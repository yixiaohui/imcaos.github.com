<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Caos</title>
 <link href="http://caoshuai.github.com/" rel="self"/>
 <link href="http://caoshuai.github.com"/>
 <updated>2015-03-28T09:43:51+08:00</updated>
 <id>http://caoshuai.github.com</id>
 <author>
   <name>Caos</name>
   <email>caoshuai at gmail.com</email>
 </author>

 
 <entry>
   <title>浪潮之巅读后感</title>
   <link href="http://caoshuai.github.com/topOfThebigWeave/"/>
   <updated>2014-12-13T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/topOfThebigWeave</id>
   <content type="html">&lt;p&gt;说来惭愧，浪潮之巅这本书，我用了将近两个月的时间才看完，这的确是一件很令人羞愧的事情，抛开外部环境的影响因素，剩下的都是源自于自身过于松懈和懒惰，两个月期间kindle只充过一次电，相比之前每周充一次电的节奏，现在阅读量急速下滑，有道是一天不读书，谁都看不出，三天不读书，就会爆口粗，一月不读书，智商输给猪。我可真得好好提高一下了。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;其实我是不太情愿写这篇读书感想的，因为间隔的时间太长，看书的时候也没有认真的记笔记，所以真的不知道能够写成什么样子，而且浪潮这本书内容很宽泛，涉及的题材不单单有互联网发展史，还有，金融，管理，经济，人文等内容，通过各领域的知识介绍，能够很清晰的勾勒出现在的互联网帝国从无到有的整个发展地图，给人一种细致到身临其中的感觉，为了不露短，我不准备细说书中的内容和观点，只谈谈这本书给我的启发，还有自己有限的领悟。&lt;/p&gt;

&lt;p&gt;作者用了大量的篇幅撰写了从十九世纪到二十世纪世界中商业巨头的发展史，以每个企业的视角为侧重，但又不失客观的介绍了各个优秀商业公司的崛起、发展、失败、瓦解。引导读者能够全方位了解企业的发展中所蕴含的规律，从现象看到本质，然后从本质分析产生现象的原因。对当前的互联网格局进行了全面细致的剖析，把企业的成功失败因素进行细致的归纳，并对未来的发展做出了理性的预测和推断。&lt;/p&gt;

&lt;p&gt;作者在阐述的过程中，融入了大量的论述和分析，不断地归纳与演绎，总结出企业发展的几条铁律：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;人类的发展过程就是不断试错和修正的过程。
创新者往往会得不到很好的结果，虽然面临着蓝海一般的市场，但很快就会因为经验不足而走弯路，这时候往往后来者居上，新进入的竞争者能够快速的学习与创新，踩在前人的脚印上，并且能够避免犯同样的错误，所以获利的往往是后来者，那些短暂辉煌过的企业，也是在为后来人铺路。&lt;/li&gt;
&lt;li&gt;市场是决定发展的重要因素
这说起来也算是废话，但凡有些常识的人都明白如此的道理，但我想说的是在市场导向的前提下，商业模式的优化和创新，才是决定企业发展规模的根基。如何去打造一个创造收益的系统，能够源源不断地为企业带来丰润的收入。其实都是商业模式中蕴含的智慧。&lt;/li&gt;
&lt;li&gt;永远不要违抗趋势
多数企业都是失败在了这点，就算是拥有百年基业的庞大企业，错过发展趋势，亦或是采取排斥和守旧的发展策略，都会迅速的被时代抛弃。在趋势面前，百年的积淀不但没有成为优势，而且变成了拖垮自己的负担。互联网的发展，加速了企业优胜劣汰的过程，此处一片片欣欣向荣别处一定会有一阵阵土崩瓦解。&lt;/li&gt;
&lt;li&gt;今后的商业发展在较长时间内会以几何级数增长。
这与我之前提到过的摩尔定律有相同的概念，原先需要孕育百年才能造就的伟大企业，如今只需要短短几年就能够被超越，一旦顺应了趋势，就像是获得了全世界的青睐，资本，人才，信息都会倾泻而来，高效的信息传播，不但带来了沟通的便利，也成了指数增长的催化剂，赢家通吃往往也是如此。世界的边界不复存在，只要有可能，趋势中的企业就能整合全世界的优质资源，助力其更快速的发展，这时候我们的头脑中大概出现了两个名字，一个是阿里，一个是小米。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;与其说这是一本互联网发展的历史通识读本，不如当做一系列当代企业管理的案例分析，其中的任何故事，都能够作为经管类的同学学习的案例，商场如战场，我更佩服那些在商战中激烈搏杀，最终倒下的企业，他们奠定了现在优秀企业，为人类的发展铺平了道路。虽然没有能够存活至今，但后来者踩着他们的肩膀，看的比原来更远，走的更长。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-12-13&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>未来能还能坏到哪里去</title>
   <link href="http://caoshuai.github.com/badFeature/"/>
   <updated>2014-12-12T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/badFeature</id>
   <content type="html">&lt;p&gt;《坏未来》这是李阳导演的另一部作品，第一次看完就忍不住想写点什么好排解下心中汹涌的情感，但我实在不知道如何用文字把它们精确的表达出来，于是就按捺住心情没有动笔，直到今晚又看了一遍，才觉得是时候写点什么，才不至于心里堵得慌。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;这是一部只有短短的三十分钟的微电影，与《李献计》相同的爱情题材，不过这次是真人出演，不同的剧情却同样的感人肺腑。天马行空的情节并不影响我去体会男主与郑晓燕那段引人入胜的爱情故事。&lt;/p&gt;

&lt;p&gt;男主角是一颗陨石，在着陆的时候一分为二，从此就有了两个身体。一个好一个坏，坏的叫赵寇，他杀人放火挣黑钱，负责养活孙白和郑晓燕，好的叫孙白，正值青春年少，负责与郑晓燕无忧无虑的恋爱，两人一起慢慢变老，直到死后还在一起，因为他直到，郑晓燕的名字将是他唯一的墓志铭。扭动胸前的开关，不停地进行着身份的变换，孙白-&gt;赵寇，赵寇-&gt;孙白，不断重复，一个伟大而又长远的计划，坎坷和波折都不曾撼动赵寇和孙白的决心，即使是八年后他与郑晓燕离了婚，也不愿意放弃。&lt;/p&gt;

&lt;p&gt;心照相交，最后一次是在疾驰的列车上，郑晓燕和孙白都明白，这一次见面之后就是永别，两个人都为了对方的安全制定了周密的计划，为了今天，孙白两年前不惜出卖朋友，并用超能力毁掉了7亿人的生命，为郑晓燕换来一张赦免令，甚至面对郑晓燕的冷嘲热讽，不但没有说出真相，而是轻描淡写的带过说是障碍性贫血，我想，他是不希望让郑晓燕知道自己还在乎，亦或者是不愿意给她负担，这种默默地付出，就像赵寇默默支持着孙白和郑晓燕的幸福生活一样，让人心疼。&lt;/p&gt;

&lt;p&gt;是的，就算是错误的认为郑晓燕对孙白和赵寇的爱是间谍们经过训练的统一反应，同样的眼神，同样的声音，同样的动作，孙白和赵寇本该一体的思想，却成了彼此排斥试探的两个人，就算是因为一个深爱的女人，自我怀疑，自我嫉妒，也没能让孙白改变他对郑晓燕的爱。&lt;/p&gt;

&lt;p&gt;而郑晓燕像是全知全能一般，看穿任何事情，她知道孙白的一切小伎俩，识破孙白与赵寇欲盖弥彰的蛛丝马迹，却始终没有拆穿。同样，郑晓燕用着她自己的方式爱着那颗陨石，就连抓捕郑晓燕的计划，也都在她的计划之中，只是面对心爱的人，她不能说出真相，一段短暂的旅程，不断地误会与和解，但始终不变的如何也割舍不掉的爱情，和心照相交。&lt;/p&gt;

&lt;p&gt;为了能让孙白成功逃脱，违心的说出那些伤人伤己的话，我听到两人的心中滴血的声音，为了确保孙白与赵寇的安全怀抱着必死的决心，那性格鲜明耀眼的郑晓燕，与孙白赵寇一样为爱执着，只不过她的代价更大，大到献出生命。&lt;/p&gt;

&lt;p&gt;孙白记不清郑晓燕扔掉黄色信纸时的脸上的表情，当赵寇从废墟中找到那张情书时，一切都结束了，这就像郑晓燕玩另一个，也是最后一个小花样，宣誓着她的又一次军事胜利，孙白想，如果那时候和她一起死在火车上该多好，可他对郑晓燕深深误解再也无法法挽回，他是否后悔说出那句「你不明白」？可有些事情只有到覆水难收时，才能懂得更真切。赵寇和孙白都不懂，真正的爱情就是为了成全对方牺牲自己，孙白自以为的仁至义尽，却敌不过郑晓燕为他献出生命的意愿。她的一举一动都在激怒孙白离开火车，回到赵寇的身体中，最终如愿以偿。&lt;/p&gt;

&lt;p&gt;赵寇把孙白留在了郑晓燕身边，火车爆炸，赵寇再也无法扭动胸前那熟悉的开关，他的另一半终于和郑晓燕死在一起了。留给他的只有这个郑晓燕曾经呼吸过的世界。当一切真相大白，赵寇完成了他的伟大计划，他终于，让那个最好的自己与心爱的人死在了一起，可他不甘心，还没来得及好好告别，郑晓燕只留下那刻骨铭心的最后一句「如果以后还能再见的话，我们就重新开始吧！」&lt;/p&gt;

&lt;p&gt;到这里本该是一个悲情故事的结尾，但故事不能就这么完了，唐僧的乱入，让我愿意相信人类文明的轮回是必然而然的结果，西方极乐世界，有人在等他，而那个人就是郑晓燕，赵寇又找到了人生的意义，我仿佛能感觉到赵寇内心某个深处，迸然炸裂的呼啸声，那应该是滚烫热血喷薄而出的声音。郑晓燕二十五岁最后一晚的那张信纸写下的，是时隔六十万年的承诺，对得起赵寇跨越人类轮回的厮守。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;我喜欢全部的你。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;我同重见天日的赵寇一样，我脸上的笑容，一如少年。&lt;/p&gt;

&lt;p&gt;不禁问自己，未来还能坏到哪里去？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-12-12&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>李献计未曾老去</title>
   <link href="http://caoshuai.github.com/LeeAdventures/"/>
   <updated>2014-12-11T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/LeeAdventures</id>
   <content type="html">&lt;p&gt;09年看过一部名叫《李献计历险记》的动画片，男主角得了一种怪病叫「差时症」，临床表现是对时间的感觉忽快忽慢，能够在感官上把一段极短的时间漫长化，同样也会把一段极长的时间短暂化。当差时症犯病时，几秒钟在他眼中无比漫长，或者是另外一种情况，几年时间感官上觉得很短暂。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;幸运的是他遇到了同样具有差时症的王倩，两个人幸福的生活在了一起，可好景不长，有一天，来自未来的王倩取代了现在王倩，两个人就分开了，王倩只留下一张只要通关就能够回到过去的游戏碟，未来的她已经没有了差时症，于是命运的齿轮就此飞速转动，推着李献计不顾一切的向前，去打穿那个游戏，好回到过去，去找那个当初第一次遇到的那个王倩。&lt;/p&gt;

&lt;p&gt;李献计不顾一切的想要打穿这款游戏，他卖掉了一个肾请来了电玩高手，为玩游戏换了铁手指，为了50万做走私并与拉登死磕，把那些拼命换来的钱全部买了兴奋剂提高反应速度，最终他打穿了这款别人认为无法被打穿的游戏。但他发现回到过去的门不只一扇，他不确定哪一扇门的背后藏着初遇的王倩，于是不停的循环，穿过门回到过去的某一个世界，在门里的世界打穿那款游戏，然后再穿过一扇门。周而复始，只为了见到王倩。&lt;/p&gt;

&lt;p&gt;最终在一个午后的下午，李献计见到了朝思暮想的王倩，而这时的它却始终无法向前迈出一步，李献计已经成了一个不折不扣的老年人，而眼前的王倩，和李献计初次见到的时候一样，美丽，耀眼。不同的是，横在他们之间的不再是距离，而是汹涌流失的岁月。&lt;/p&gt;

&lt;p&gt;很明显，这是一个悲伤的故事，对李献计来说，这次相遇终究是一声如释重负的叹息，沉重，悠长。从决定打穿游戏的那一刻起，他就把生命毫无保留的交给了爱情，眼前的任何困难都不曾让他败下阵来，可最终还是输给了时间。当他发现穷尽一生想去改变的事情，最终还是无法改变时，内心很平静，是无奈的认命，还是愿望达成的满足，我不得而知。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;他说，这一切都是为了自己，能够分手后的世界逃出来。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;时隔五年，我第二次看时，依稀能够体会到五年前自己内心汹涌喷薄的伤感情绪，再美好的爱情，终究逃不过现实。时间也好，物质也好，差时症也好，不属于自己的再怎么努力抓住也是徒劳，何况拥有也是一种错觉。但我不能说李献计太傻太执着，有时候认定了一个人，真的就很难说服自己放弃，曾经与王倩在人民公园度过的一如世纪般漫长的美好时光，刻在了灵魂中，摆脱不掉。驱使着他不停地向后看，去寻找那些自己珍视无比却一去不复返的好时光。&lt;/p&gt;

&lt;p&gt;终究是妥协，被命运狠狠的教训了一番，鼻青脸肿过后的沉默，虽然狼狈，但总算输的漂亮。&lt;/p&gt;

&lt;p&gt;不管是自尊宝的越光宝盒，还是打穿是空的游戏碟，能体验两次初遇时难以名状的心跳的感觉，这辈子，值了。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-12-11&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>为什么我们的电子设备越来越慢</title>
   <link href="http://caoshuai.github.com/whySlowDown/"/>
   <updated>2014-12-10T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/whySlowDown</id>
   <content type="html">&lt;p&gt;看过《浪潮之巅》这本书或者了解IT行业的人大概都听说过摩尔定律，也就是电脑或者电子产品的CPU每18个月会更新一次，其性能以指数的形式增长。这套理论，我第一次跟女同事解释的时候用了两个更相关的概念，第一个是半盘棋效应，还有一个是荷塘效应。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h3&gt;半盘棋&lt;/h3&gt;

&lt;p&gt;农夫和国王打赌获胜，国王决定满足农夫任何一个要求，于是农夫说我的要求很简单——找一个8*8的棋盘，第一格放一粒米，第二格放两粒，第三格放四粒，以此类推，我只要给我能放满棋盘的所有格子的米就可以了。国王觉得这样的要求很简单，欣然同意，于是大臣们就开始往棋盘上放米了。可到了半盘棋格的时候，整个王国储存的米都不够了，因为指数级的增长跨度实在是太大了，2的32次方是大约42亿，再往后就不可想象了。&lt;/p&gt;

&lt;h3&gt;荷塘效应&lt;/h3&gt;

&lt;p&gt;说一个池塘里上长了一片荷叶，每天一片荷叶都会分裂成两片，也就是第一天一片荷叶，第二天两片荷叶，可能一直到第47天，我们也只看到池塘里依然只有不到四分之一的地方长有荷叶，大部分水面还是空的，而令人瞠目结舌的是，到第48天荷叶就掩盖了半个池塘，又过了仅仅一天，荷叶就掩盖了整个池塘。这也是描述指数增长的可怕之处。&lt;/p&gt;

&lt;p&gt;回到正题，摩尔定律其背后也是与上述两个效应相同，符合指数增长的规律，也许在理想状态下，硬件的CPU处理能力越来越强，直到硬件的限制和延迟消失不见，但现实却是，我们的电子产品越来越慢，越来越难以使用，导致我们不得不频繁的更新新的电子产品以求达到最流畅的使用体验，为什么会这样呢？CPU已经足够强大了，为什么还会越来越慢呢。这就引出了IT界的另一条铁律——反摩尔定律。&lt;/p&gt;

&lt;p&gt;反摩尔定律就是软件的占用资源随着CPU的强悍和升级变得越来越大，这也是硬件厂商希望看到的结果，因为一旦你买了最新的配置，那么这样的硬件组合一定要在短时间内过期，如此一来才能促使消费者再次去购买更新的硬件，反摩尔定律就是软件越来愈大，耗费掉摩尔定律所带来的性能提升，从而促进硬件厂商的发展，这也是为什么我们的电子产品虽然配置很高，但实际上使用起来和之前配置差的手机没什么区别的原因。&lt;/p&gt;

&lt;p&gt;更糟糕的是，摩尔定律则是一个点，我们买了最新的硬件也就停留在了摩尔指数这条曲线上的一个点而已，但反摩尔定律是可以时时刻刻影响我们，如果你想使用新的操作系统，或者新版本的软件，那么你就要不断地用旧设备更新新的版本，随着反摩尔定律的曲线向前，你的硬件处理能力却止步不前，所以变慢或者是被淘汰是必然的现象。&lt;/p&gt;

&lt;p&gt;所以我们的电子产品从购买的那一刻起注定逃脱不了被淘汰的命运，这也算是硬件与软件的相辅相成的发展规律，两方都在努力的维持着如此微妙的平衡关系。虽然这么说对软件开发商很不公平，但我们可以更加明白为什么手机会越来越卡的原因。同样，不同的软件开发商对饭摩尔定律的做法会有所不同，这些以后再谈~&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-12-10&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>选择困难症</title>
   <link href="http://caoshuai.github.com/difficultChoice/"/>
   <updated>2014-12-09T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/difficultChoice</id>
   <content type="html">&lt;p&gt;前段时间参加活动，获得了二百元的滴滴打车卷，心里很开心，心想着以后加班到深夜就能打车回家了，但之后发现了一个比较严重的问题，我的2G手机卡网速太慢，连滴滴打车的地图都无法加载，更别提定位到具体的位置了，只能在WIFI环境下才能使用，但是之前没有使用过打车软件，所以如果离开了无线网络环境，支付过程不知道是不是也会因为网络不给力而出问题，所以这二百块钱也就在那里静静的躺了十几天。在我加班到深夜想要任性一次的时候，我的爪机成功的大小了我的小心思，导致我要么在汽车尾气中等迟迟不来的公家车，要么在寒风中蹬着公用自行车吃力的流鼻涕。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;然后就萌生了升级服务的想法，因为2G网络太不方便，或者说现在的应用直接忽略掉2G用户的需求，总之2G通信制式已经越来越远离主流，我并不是不愿意接收这个现实，而是之前的确没有使用高速网络的需求，当然，这也和我简单的社交需求和消费习惯有关系。在北京朋友不是很多，平时基本很少联系，花费最多的就是给家里打长途，一周一次的频率，每次十分钟左右，每个月也就四五次，加上特殊的情况，一个月的通讯费用最多不超过30元，有时候也许会更少。&lt;/p&gt;

&lt;p&gt;现在的这张电话卡还是刚来北京的时候在便利店买的神州行，五元的月租就这么用到了现在，曾经还一度断掉了自己的移动数据。最近使用手机的频率变高，对网络的要求也增加了，十一回家使用2G网络十分不方便，而且长途漫游费用也不低，这样又贵又不方便的收费机制也许是移动强迫用户进行网络升级的策略，可对我来说，也只有出门办事的时候对网络和漫游有需求，其他的时候我还是在家和公司两点一线的生活，这两个地方都有WIFI覆盖，根本不需要网络。路上的时间不是在没信号的地铁中就是在摇晃的车厢中，也没有使用手机网络的需求。&lt;/p&gt;

&lt;p&gt;我想起了原来07年的时候为了买张10元包月的电话卡，我和小伙伴跑了很远的路去买二手卡，过户登记然后又花了不少钱去交月租，最后电话卡被莫名其妙销号，然后补回。想想那时候算是第一波体会到包月无限时上网的用户，不过那时候只是去下载小游戏玩，而且网速也不太好，现在一转眼，4G已经成为了趋势，我却被远远的甩在了后头。&lt;/p&gt;

&lt;p&gt;这二百块钱的打车卷，不断地催促我，赶快升级网络，好享受高质量的的数据服务，于是我认真的考虑了一下，对我来说，如果要选择的话，肯定会直接升级到移动4G网络，这样免去了换号的麻烦，直接使用原号码，服务升级。这也是大势所趋，那么问题就来了，如果要使用4G，就得换手机，现在却不知道哪款更加适合自己，是换肾6？还是锤子？下不了决定。我需要好好静下来想一想。或许我会嫌太贵，都不不买了呢。&lt;/p&gt;

&lt;p&gt;也许你会认为我就是个屌丝，你是对的。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-12-09&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>加班</title>
   <link href="http://caoshuai.github.com/workOvertime/"/>
   <updated>2014-12-08T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/workOvertime</id>
   <content type="html">&lt;p&gt;加上今天，我已经连续加班一个月了，这一个月给我最深的感受就是，我的业余生活被彻底的打乱，很难再抽出时间做想做的事情了，原来计划每天晚上锻炼，写文章，泡脚，看书等活动都因为加班的原因搁浅了。曾经还很坚定地想利用晚上的业余时间学习一门新的编程语言，但照目前的情况看来，是不太可能了。这些问题让我一度觉得很沮丧，但慢慢的发现了自己真正的问题其实是想做的太多，但资源不足，所以目前还是专注于做重要的事情。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;其实，我倒不是排斥加班，再说程序员哪有不加班的？可现在面临的不止是工作量大，人手不足的问题。最而是项目没有一个合理的计划和安排，项目经理无法把控全局的项目进展，只能通过高强度的加班，来缓解项目人员与进度的压力，但即便如此，没有合理的统筹和任务的验收机制，如何保证加班的工作效率就成了比较棘手的问题。&lt;/p&gt;

&lt;p&gt;项目管理中，项目工作计划是必不可少的要素，没有明确的项目计划和时间节点，可能会导致无法量化的考核实际工作量，项目成员疲惫不堪，还有可能下班之后坐着干耗掉，同样，计划不到位，就不可能良好的预估工作量，也就无法制定详细的工作计划，而目前项目的处理方式是，团队成员每早跟项目经理汇报今天的工作内容，项目经理在晚上结束时询问工作进度。这样的做法就出现了几个致命的问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;项目成员为了减轻工作压力，倾向于隐瞒工作计划或少报工作计划。&lt;/li&gt;
&lt;li&gt;项目经理被动接受信息，无法统筹规划，使进度控制沦为形式。&lt;/li&gt;
&lt;li&gt;不管完成的速度快还是慢，都改变不了加班的事实，这往往会影响项目成员的积极性。&lt;/li&gt;
&lt;li&gt;没有合理的考核，项目进度更加不可控。&lt;/li&gt;
&lt;li&gt;将项目推进力下放至团队成员个人，完全依赖于个人的能力和素质，可能会导致消极怠工或进度不统一的问题出现。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;项目经理在进度管理上有着不可推卸的责任，为了保证项目能够按时交付，在研发过程中需要全面了解项目需求和项目的设计工作，尽可能的对当前的需求功能有深入的了解，并根据团队成员的整体素质水平，分解研发工作，因人而异的划分责权范围，保证项目中的工作是可量化的，并且工作的完成度是能够在把控之内的。软件工程其实也用的工程管理的一套方法论，尤其是对于传统的信息化企业，项目管理采用中规中矩的办法进行管理，理想状态下是可以解决大部分问题的。&lt;/p&gt;

&lt;p&gt;但现实生活中，需求完全明确，计划编排细致，工作估算清晰的条件很难完全都达到，有些企业为了生存不得不在项目管理中做出妥协，当然有些企业干脆就不重视项目管理的方法论，在这样的情况下，项目经理的职责范围有可能会更加扩大，但也同样需要做到能够心里有数，项目的发展能够按照大致的预期进行，而不是将IT界的前辈们总结的宝贵经验，拿来做一些形式化的东西，这样不但没有帮助，反而会加重企业的负担。&lt;/p&gt;

&lt;p&gt;加班其实不可拍，可怕的是漫无目的的加班，熬时间的加班，如此低效又高风险的事情，不如好好解决目标于计划的问题来的实在。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-12-08&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>个人知识管理的思考</title>
   <link href="http://caoshuai.github.com/knowledgeManagement/"/>
   <updated>2014-12-07T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/knowledgeManagement</id>
   <content type="html">&lt;p&gt;说实话，如果有人和两年前的我聊知识管理的话题，我也许会觉得对方太装蒜，因为那时候我根本没有知识管理的概念，说白了就是一个不知道自己什么都不知道的状态，这种浑浑噩噩的状态全拜中国填鸭式的教育模式所赐，学校用了十几年的时间，让我彻底对学习知识失去兴趣，不管是小学，中学，还是大学，都不曾激发我的求知欲，更别说通过学习改变命运了。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;毕业之后的两年，我的想法有了很大的改观，闲暇时间读了一些不错的书籍，通过互联网认识了更大的世界，遇到了更多优秀的人，真心体会到了知识的力量。于是开始考虑曾经从未考虑过的问题，渐渐地发现自己其实什么都不懂，之前认为的无忧无虑的生活，其实是自己盲目的自信和无知，用现在的话说就是太傻太天真，慢慢的我感到了一种强烈的紧迫感，恨自己领悟的太晚，浪费了太多的时间，可知识这个东西需要常年累月的积累，并不能一蹴而就。&lt;/p&gt;

&lt;p&gt;对于个人成长而言，一个人的知识积累是其立足于整个社会的基石，当然，只有知识是不够的，还需要有生存的智慧，智慧就是从知识的积累和整理得来的，人们对知识进行学习，思考，修正，质疑，都是心智成长的过程，只有经过整理和思考的知识才能够成为真正的知识，将所见到的，听到的，闻到的，学到的，深化成大脑中一道道交错纵横的沟壑，但这些只能代表记住了那些知识，而将这些脑皮层下的神经节点互相连接，形成一张网，才能够真正的称之为知识，盖洛普优势理论这本书中提到过：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;性格特质不同的人，脑神经的链接方式也不同。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;其实也就是简单地四个字，融会贯通，这是将知识转化为智慧的过程。超体中的Lucy之所以能够穿梭时空，拥有从未来到现在的超能力，是因为她拥有了全人类的知识，并且能够融汇贯通，我想，大脑开发到100%也就是将所有的知识和信息完全融合在一起的效果，眼见到的所有事物都没有任何盲点，超神是必然。&lt;/p&gt;

&lt;p&gt;可惜，我们现在还无法达到那种状态，但目前可以借助于工具与方法帮助我们一点点的靠近，其实也就是用合理的工具和方法做知识管理，让我们大脑皮层中神经元的链接更加容易，帮助我们对拥有的知识在脑中融合衍生，形成新的观点和想法，一点点的转化为智慧，虽然永远达不到全知全能，但会不断进步。&lt;/p&gt;

&lt;p&gt;这是我关于个人知识管理的小思考，目前我的情况不太乐观，没有一个完整的知识体系和统筹规划的知识管理方法，不过既然已经发现了问题，就去解决它，一点点尝试去寻找适合自己的知识管理工具和方法，希望能够有所收获。如果你对知识管理有更加独到的见解，希望能够多多指教。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-12-07&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>智齿</title>
   <link href="http://caoshuai.github.com/wisdomTooth/"/>
   <updated>2014-12-06T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/wisdomTooth</id>
   <content type="html">&lt;p&gt;是时候聊聊我的智齿了，今晚吃了一顿丰盛的咖喱牛肉大餐，现在左下方的智齿痛的我直抽凉气，无法用力咬合，这种情况从去年一直持续到现在，大有越来越严重的势头，主要的原因是智齿长得位置不对，成了阻生齿，几个月前体检的时候，医生建议拔掉，不然会影响口腔卫生，我想如果那时候能够体会到现在的痛苦的话，一定会毫不犹豫的选择拔掉它。可是那时候我拒绝了，于是就有了一段令人难忘的牙痛体验。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;体检结束后不久，医生的话就应验了，我莫名其妙的得了冠周炎，阻生齿与牙龈之间有很大的空隙，导致食物残渣无法彻底清理掉，于是滋生细菌，智齿周围的牙龈发炎肿痛，红色的牙龈变成了白色，不仅会有一种被撕裂的疼痛，而且还散发出一股刺鼻的异味，就算刷了牙也无法缓解这种症状，并且这种情况一旦出现，很难迅速恢复，总是拖拖拉拉的痛上十几天。在这期间，左边的槽牙基本丧失了咬合的能力，只能老老实实地用右半边的牙齿细细咀嚼，辛辣的东西更不能粘，这对喜欢吃辣的我来说，又增添了一份痛苦，有时候疼的简直要疯掉，那种感觉直达牙齿根部，就连相隔的牙龈也未能幸免，严重的时候连热水都不敢喝。那时候吃什么都味同嚼蜡，只为了填饱肚子，所有的注意力都被牙痛的感觉吸引了，只想着早点结束这痛苦的时刻。&lt;/p&gt;

&lt;p&gt;大学期间长齐了四颗智齿，上两颗的位置极正，而另外两颗下槽牙偏得离谱，右边的智齿于前一颗牙齿中间隔了很大的空隙，用舌头就能顶到两颗槽牙之中，粗糙的表面，喇得舌头生疼，不过因为空隙大，如果吃饭塞牙，这个也是最好清理的。最难搞定的是左边的那颗，简直是我的活祖宗，空隙不小，但无法用牙签和牙线清理干净，一旦吃了点辛辣的活着难咀嚼的肉类，就会出问题，如果再有点火气，必定会复发冠周炎，而且速度极快，也许就一觉醒来，就发现牙痛不已，之后就是漫长的牙痛期，不管用什么招数，都无法缓解，板蓝根、黄连上清片都无济于事，由于缝隙太小，而且不规则，牙签甚至会断在狭小的缝隙里面，这简直是我不能忍的，可也无济于事，只能拼命的漱口，但收效甚微。&lt;/p&gt;

&lt;p&gt;于是我萌生了拔掉它的想法，托朋友到医生那里去咨询，看来程序还挺复杂，虽然是小手术，但也需要上麻药，外带钻头等暴力拆解工具，有可能下槽牙拔掉后，楼上的哥们也得下岗，为了能够更顺利的咬合，只能拔掉互相施压的槽牙，我瞬间想起我满口鲜血的情景，就直冒冷汗，加上打麻药，我就更犹豫了，暂时先不考虑拔掉，而是静观其变。&lt;/p&gt;

&lt;p&gt;但就目前的情况来说，选择不拔牙也是相当不明智的，可总舍不得自己的长了将近4年的牙齿，可它给我带来的痛苦实在难以承受，于是就暗自下决定，事不过三，如果再一次冠周炎发作的话，只能大义灭亲。&lt;/p&gt;

&lt;p&gt;牙痛的时候做什么都没有心情，早点休息了。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-12-06&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>点播电台</title>
   <link href="http://caoshuai.github.com/lonelyRadio/"/>
   <updated>2014-12-05T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/lonelyRadio</id>
   <content type="html">&lt;p&gt;独生子的童年生活总是无比苦闷，小时候每逢节假日父母上班之后，我就成了没人管的孩子，一个人和自己玩，没有什么娱乐设备，家里的旧彩电就成了我排解孤独最好的伙伴。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;电视频道少得可怜，根本无法满足我日益增长的精神娱乐需求，我总有大把无聊的时间，CCTV的电视节目除了七巧板和大风车之外，其他的都无法引起我的兴趣，白天和上午过得如此的漫长，我无所事事，也没有小伙伴陪我玩耍，总是苦闷的在家里呆上一整天。&lt;/p&gt;

&lt;p&gt;不就之后电视台就多出了一个电话点播的频道，人们可以通过拨打电话的方式，远程控制频道内播放出的内容，歌曲MV、戏曲、小品当然还有我喜欢的动画片，这些资源分门别类的通过一个个数字整齐的列在电视屏幕上，只要有人打来付费电话，就可以根据频幕上的数字一级一级的索引至想要点播的内容，在DVD还未普及的苦闷时代，这简直是最好的消遣，而且一人点播大家受益的行为也算是极其高尚与无私的奉献，不过点播的费用不菲，也只有稍微有点消费能力的人才乐意付费点播给大家看。我总觉得这就是劫富济贫的典型案例，不花钱，也能看别人付费点播的视频。&lt;/p&gt;

&lt;p&gt;现在想想那时候也算是在极度匮乏的娱乐环境中找到了自己的小归属，点播电台的资源都将播放时长控制在三五分钟以内，好能够按照播放频次收钱，刚开始的时候大家都不敢尝试，半天都没有多少人打进去点播电话，电视台就一直显示着冷冰冰的点播列表，下边显示着孤零零的点播电话。也许是空置了太久，他们开始尝试着放广告，但始终很少有人打电话进来，突然有了一天点播电台开始陆续的有人点播了，也许是自动模拟流程，也许是真的有人在打电话，总之那些死气沉沉的列表和界面动了起来。&lt;/p&gt;

&lt;p&gt;那时候我每天都守在电视旁边，期盼着能碰到一个点播动画片的电话出现，可当时点播十有八九点播的都是影视的MV，偶尔会有动画片播放，这就会令我兴奋很久，我猜这肯定是哪个任性的小孩子，与我一样的孤独，不同的是他更有钱。有电话打进来的时候，看着他一步一步的选择菜单，我觉得自己紧张无比，这种紧张感也许比打电话的人还要强烈吧。&lt;/p&gt;

&lt;p&gt;时间久了，我才发现电视台的阴险狡诈之处，为了增加收钱的次数，他们把一整部视频或动画资源拆分成好几部，在名字后边加个1234，好刺激别人连续点播，可并不是谁都如愿的点播一个系列，这意味着不仅需要有钱，还要有耐心连续打几个电话进去，并且在不占线的情况完成一次华丽的连击，但电视台往往会拨的断断续续，这段接不上那段。对于我这种指望免费看节目的人来说真的是痛苦不堪，也许真的会有人受不了故事情节的断片而专门为吊起来的胃口埋单。但那人绝对不会是我。就这么厌恶着的欲罢不能。&lt;/p&gt;

&lt;p&gt;最终，我有了自己人生中第一台游戏DVD，从此以后点播电视台消失在了我的视线中，也会在父母看电视切换频道时看到点播频道的画面一闪而过，大都是相同的节目和画面，点播的节目不再更新，人们都厌倦了日复一日的重复，而我也不再是那个之看动画片就能满足的少年了，最后，点播台和我的那一段孤独的童年时光一起，消逝在回忆中。&lt;/p&gt;

&lt;p&gt;如果不是我一瞬间的灵光回闪，也许就再也想不起这段拧巴又快乐的时光了。回忆真好。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-12-05&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>雨打花瓣</title>
   <link href="http://caoshuai.github.com/rainFlower/"/>
   <updated>2014-12-04T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/rainFlower</id>
   <content type="html">&lt;p&gt;我始终不敢相信屏幕中那个瘦若如郭敬明的人，就是周传雄，曾经无数次出现在KTV屏幕上的那个英姿飒爽，胡渣唏嘘的粗犷男人，如今瘦弱的像个营养不良的初中生，硕大的黑框眼镜，干净利落的发型，加上略显苍白的面容，给我一瞬间的恍惚，乱了阵脚。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;沧桑大叔摇身一变成了小清晰的邻家大哥哥，这样的转变另人大跌眼镜，熟悉的声音不再吟唱伤心情歌，而是温软如风的叮嘱，小刚说，生病的这段时间有了慢下来的机会，倾听雨打花瓣的声音，对人生有了更加深刻的感悟。之后创作了这首歌，劝人们去珍视被那些曾经被我们忽略的东西。&lt;/p&gt;

&lt;p&gt;我不禁问自己，我拥有的最重要的是什么呢？是否忽略了它们？有什么是当我一生都不愿意放弃的？还有什么是我愿意花毕生时间去追求的？或许我还要反思，我之前坚持的是有意义的么？我所在乎的对我来说真的重要么？面对这些问题，我无法给出满意的答案，我知道心智的启蒙是一个漫长而又痛苦的过程，但始终无法说服自己「真正经历之后的痛苦领悟才算懂得」，我不满足于那些直接给出的答案，我不光想知道为什么，还想知道怎么破，可笑的是，就算知道为什么，还是无法完全体会其中的奥义，遇到状况该如何还是如何，无破可言，纵使万语千言说尽，也无法撼动那颗无知跳动的心，但懂得的人，只需要一个会意的眼神，就足够领会不可言说的感受。&lt;/p&gt;

&lt;p&gt;为什么即便是如此也会有那么多人不厌其烦的讲这些大道理，是因为他们认为自己应该早点懂得的东西，真的会在别人迷茫的时候给与帮助？还是单纯的想用这种方式祭奠当初懵懂的时光？亦或者是要唤醒人们的思考？&lt;/p&gt;

&lt;p&gt;其实这些问题都不重要，不管动机如何，我们都要找到建议的价值，并从中学到东西，解决自己的问题。那么如何能够设身处地的体会那些过来人的经验，并能够收为己用，本身就是伪命题，人生建议太多，目不暇接的人们怎么能听得进去呢？退一万步，他人的建议如何越过那些眼前琐碎至极的苟且直指我们的心灵呢？&lt;/p&gt;

&lt;p&gt;我想到了一个大胆的比喻，每个人都如宇宙中的星体，组成浩瀚星海，但却彼此分离，远远相望，却运行在各自的轨道，你无法温暖我，我也无法温暖你，就算偶尔耀眼，他人也无法体会到你燃烧的炽热，那种感觉，没有经历过的不会懂，经历过的却不言自明，这其中的微妙令人唏嘘。&lt;/p&gt;

&lt;p&gt;小刚还是那个小刚，只是我们变了，他大病初愈的感悟，虽能带给我们温暖，但教不会我们如何生活，就像是一个宣言，星空中一颗星明亮的闪烁，告诉懂的人，他懂了。也许会启发更多的亮，也许会慢慢沉寂，谁知道呢。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-12-04&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>11月总结</title>
   <link href="http://caoshuai.github.com/november2014/"/>
   <updated>2014-12-01T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/november2014</id>
   <content type="html">&lt;p&gt;11月发生了几件值得记录的事情，生活和心态，都发生了一系列的变化，说不上是变好还是变坏，有些事情在慢慢改善，有些事情仍旧不太乐观，但总的来说还是有些收获与成长。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;埋葬与祭奠&lt;/h2&gt;

&lt;p&gt;持续两年多的感情彻底宣告死亡，就像辛辛苦苦培育的花蕊，没等开花结果就衰败，我们都以为能够得到好的结果，但爱情不是一个人的事情，它本来善变，该结束的总要结束，遗憾、不解、愤怒、悲伤都已成了过往，如今只剩下谅解、宽容与感激，何况感情覆水难收，该放过的就放过，留给彼此一个美好回忆。也算是尊重自己曾经认真投入的感情。感情双方何来亏欠，说白了就是做生意，双方各取所需，公平交易，买卖不成，仁义也在。由爱生恨或分手即成仇人的想法，不能苟同，人生很长，曾经相伴过却不能走到最后的人，还是相忘于江湖吧。&lt;/p&gt;

&lt;h2&gt;体谅与和解&lt;/h2&gt;

&lt;p&gt;工作进入了高压紧张的阶段，问题频频出现，伴随着坏情绪令人不堪其扰，效率质量大打折扣，以我的角度去思考，却无法理解上级所面对的种种困难，而公司层面却也无法应对如此不可控的局面，项目、技术、业务、人才，都没有任何有效地积累，完全凭着一股冲劲推动项目进展。&lt;/p&gt;

&lt;p&gt;项目经理年纪尚轻，许多事情都无法考虑周全，用太过于挑剔的眼光会评判，其实会失去了学习提升的机会，体谅之后发现大有不同，尝试着去设身处地思考问题，不断地调整心理状态，试想相同的问题自己会如何处理面对，也算在一个月内完成了心态的转变，由当初的被动拖延，到如今的主动积极，主动思考会带来不同的视角，如今不再对工作闹情绪，也算是自己的幸运收获。&lt;/p&gt;

&lt;h2&gt;思考感悟&lt;/h2&gt;

&lt;p&gt;看了些书，写了不少文章，每天一点点新感悟，想法也越来越多，时间却越用越少，总想什么都去尝试，但总无法深入坚持。也许过了不断尝试的最佳年龄，但这有什么关系呢，想去做的尽管去做，何必担心太晚，一旦行动，最好的时候就算来到，也曾担心写过的文章再没机会去看，困扰自己的问题再没机会思索，可这又有什么关系呢？总有一天我会有大把时间去回顾年轻时那些杂乱不羁的想法，而现在只需做就好。&lt;/p&gt;

&lt;p&gt;有人说当level越高，reward就越难获得，可有些事好好享受过程，不必在乎reward，顺应本心的去做事总会有reward出现。做感兴趣的事情也是一种回报。&lt;/p&gt;

&lt;h2&gt;缓慢生长&lt;/h2&gt;

&lt;p&gt;彻底放弃了器械健身的计划，转投无器械健身的怀抱，可身体原因，无法完全践行，对每天例行锻炼进行了大幅度的调整，最后定下比较灵活的锻炼计划，屋内空间略显逼仄，只能简单地俯卧、仰卧、健腹轮，时间充裕偶尔会玩几组哑铃，胸、肩兼顾，强度虽不及前四个月的器械训练，但也能感受到胸肌的成长，社区的单双杠训练背阔和三头，可太受天气影响，也只是趁空气不错的早晨去锻炼，若是遇到雾霾天，也只能老老实实的呆在室内。&lt;/p&gt;

&lt;h2&gt;最后&lt;/h2&gt;

&lt;p&gt;11月的结束敲响了2014年的晚钟，提醒着时不我待，这迟来的领悟。仿佛看清了四周努力向前的背影，内心也涌起了力量，抬起脚迈出几步，忘记身后的眷恋，向前，向前，至死方休。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-12-02&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>站在身后的男孩</title>
   <link href="http://caoshuai.github.com/theBoy/"/>
   <updated>2014-11-30T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/theBoy</id>
   <content type="html">&lt;p&gt;最近我的室友迷上了一款游戏，每天下班回家都要玩上几个小时，经过他的房间门口，常常能够听见游戏中的战斗声，因为我曾经玩过这款游戏，还比较熟悉，有时候也会在他身后观战。就在昨天晚上，我站在他身后看他操作不够娴熟，忍不住指挥起来，他手忙脚乱的执行着，不一会我感受到了他的烦躁，这才意识到自己的话说的有点多了，打扰了别人游戏。于是我尽力保持着沉默，但越看越是着急，甚至想帮他操作一把示范一下。可最终还是忍住了，紧接着离开了室友的房间。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;随后我发现自己的做法很不妥，暗自教训自己少说话，收一收自己的控制欲。这件事情让我突然想起了小时候的情景，同样是站在别人身后看别人玩，小时候却更加不知收敛，那时候自己痴迷于一款叫做红色警戒的游戏，当然，手里没有任何零花钱，而且家里也没有电脑，对游戏近乎于痴迷的我，只能跑去网吧看别人玩，来解解眼馋，有时候也会约朋友一起去网吧，因为零花钱不充裕，我总是第一个到时间，有时候一句还没结束，就余额不足了，意犹未尽的我就站在同学背后观战，看他们不熟练的操作我也会很着急，在身后指指点点。&lt;/p&gt;

&lt;p&gt;有一天，我像往常一样在小伙伴身后喋喋不休，甚至着急的去抢他的鼠标，完全不顾小伙伴的感受，最后他实在忍受不了，于是玩了一个调虎离山的小计谋。到现在我还记得，小伙伴打完了一局，突然说还有作业没有写完，要回家了，我当然单纯的相信了，于是我们两个结伴出了网吧往家里走去，到了半路他又说突然想起了有点事情需要办，先不回家了，让我自己回去，他眼光躲躲闪闪，说话吞吞吐吐，面对小伙伴的拙略演技，天真烂漫的我居然开始对他产生了怀疑，于是我佯装答应，扭头就自己走了，时不时的还狐疑的回头看一眼，小伙伴站一开始在原地没有动，好像在等着我离开的样子，路过街道的拐角，我心生一计，就躲在了拐角偷偷观察他，果然，没多一会，小伙伴认为我已经走远了，掉头原路返回了，我的好奇驱使着我远远的跟了过去，想找到他躲躲闪闪的原因，不久我就跟着他又回到了之前的网吧，于是我心情就不美丽了，首先是发现自己被欺骗的愤怒，还有一种被抛弃的失落，最强烈的却是对自己喋喋不休和无理行为的反省。当时我很理智的没有冲进网吧与小伙伴对峙，而是老老实实的回家了，一路上我都在暗示自己忘记这件事情，就当他没有发生好了，也在不停的反思，小伙伴用如此温和的方式，把我“请”出了网吧，虽然手段不是很高明，但也很照顾到双方的干吼，我就在这么纠结和复杂的情绪中度过了一个难忘的夜晚。&lt;/p&gt;

&lt;p&gt;真的很难想象，那是我的第一次体会到看穿他人谎言却不戳破的优越感，同时还为自己为他人造成的困扰感到很羞愧，简直不该在这么幼小的年纪应该有的经历，如此天真烂漫的年纪却早早明白了「看透不说透，还是好朋友」的大道理。是谁说玩游戏不能提升智力的？简直是烧脑的最佳实践。&lt;/p&gt;

&lt;p&gt;其实第二天我就原谅了我的小伙伴，我仍然会和他一起玩耍，各自怀揣着小秘密继续进出着网吧，不同的是在我零花钱花光的时候，我会安安静静的站在他背后，紧绷着双嘴，心中百感交集的观战，一言不发。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-12-01&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>若生命有新体验你别拒绝</title>
   <link href="http://caoshuai.github.com/tryNewLife/"/>
   <updated>2014-11-29T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/tryNewLife</id>
   <content type="html">&lt;blockquote&gt;&lt;p&gt;当我不在你身边答应我用心去飞
生命若有新体验你别拒绝——《当我不在你身边》&lt;/p&gt;&lt;/blockquote&gt;

&lt;!--more--&gt;


&lt;p&gt;上面这段歌词来自于一首悲伤情绪满满的抒情歌曲，而最有感觉的却是后半句，我细细的品味很久,深有同感。想起了发生在自己身上的故事。&lt;/p&gt;

&lt;p&gt;两年前，我刚走出校园不久，处在学生角色与职业人角色转换的阵痛期，那时候的我迷茫、痛苦、浮躁不堪。每天都再思考如何摆脱这种心态，严重的时候甚至失眠，在那漫长又灰暗的时光中发生了一件小事，为我打开了逃离这魔障的一扇窗。&lt;/p&gt;

&lt;p&gt;一位在微博关注了很久的前辈，发布了一条招募信息，他需要志愿者为他自制的恶搞视频配音，需要几名来自不同地域的小伙伴，为视频配上自己家乡的方言，为了能够更突出视频的喜感，按我平时的状态是不可能对这件事感兴趣的，可当时就完全是为了换个心情，索性就报了名，能体验一次配音演员的感觉也不错，很巧，当时这位朋友正好缺一名河南选手，于是故事情节的发展就进入了不可预测的阶段，我们约好了周末在朝阳大悦城附近见面，一起配音的还有很多小伙伴，因为都是抱着一起玩的心态，而且都是同龄人，彼此没有隔阂，不一会就打得火热。&lt;/p&gt;

&lt;p&gt;开始配音时，由于我配音的角色台词最多，而且要求配音感情丰富，大家都对我印象深刻，那时为了配好一段带着很强感情色彩的男声，我拼尽了全力，没有辜负专业的录音设备和录音师。甚至第一次录音就得到了录音师的夸奖，历经三个多小时，这段集合了众多方言的剪辑视频就新鲜出炉了，还记得配的是《中国合伙人》的影片，我们一起修改了剧本，换了台词，重新演绎了一遍，最后的劳动成果超出了组织人的预期，现在还记得视频播出时大家笑得前仰后合的情景，录音结束之后大家意犹未尽的去聚餐，推杯换盏之间关系更加进了一步。我因为结识了新的朋友，心情有了很大的改观，我的坏情绪慢慢消失，新的朋友激发了我压抑已久的幽默感，娱乐了大家，也治愈了自己。&lt;/p&gt;

&lt;p&gt;这件事距今已经两年的时间，我们这群因为配音认识的小伙伴还保持着联系，虽然每天都在忙个自己的工作，很少聚会，但都互相感受着彼此的存在，偶尔相聚也会觉得很亲切。我们都亲切的称对方为战友，共同奋战在北京这片远离故乡的土地上，成为彼此的精神支柱，我们约好了一年一次的聚会，又会是一个愉快的夜晚。&lt;/p&gt;

&lt;p&gt;其实我想说的是，生活中的大胆的尝试也许真的能给与你超出预期的回报，对陌生人的一个善意的微笑，给多年未见的老朋友打一通电话，对妈妈说我爱你或者是结识新的朋友，不管是多小的改变，都有可能在潜移默化中影响着你的生活。只需要下定小小的决心，就可能收获不同的世界，所以用心去飞，若生命有新的体验，不要拒绝。&lt;/p&gt;

&lt;p&gt;何况我们还年轻。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-29&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>我为什么写不出好文章</title>
   <link href="http://caoshuai.github.com/cannotWriteWell/"/>
   <updated>2014-11-28T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/cannotWriteWell</id>
   <content type="html">&lt;p&gt;执行每日千字文的计划已经快一个月，如果超过21天重复做一件事情能够内化成习惯的话，我想我已经习惯了每天写点东西，可最近似乎写不出东西了，每天的写作变成了一种煎熬，像是坠入泥潭一般举步维艰。这种吃力感在今天特别明显，昨晚回顾了前几天写的文章，发现质量都不太令人满意，今天不再强迫自己，决定停一停，好好反思一下。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;我不确定每天强迫自己写够一千字是好还是坏，但如果一直这么持续下去，必然会让自己排斥写作，甚至产生厌倦，写的不开心，就更别提写出令人满意的文章，于是我把今天例行写作的时间空出来，总结一下这一个月来写千字文的问题，希望对自己有所帮助。&lt;/p&gt;

&lt;h3&gt;缺乏构思文章的能力&lt;/h3&gt;

&lt;p&gt;写文章之前对自己要写的主题只有一个模糊的概念，并没有进行围绕主题的构思工作，少了这一步就成了一边写一边想的模式，思路往往会受文字的限制，知道最后不知道自己到底要写什么了。缺少了提前构思的框架，文章就容易跑偏。&lt;/p&gt;

&lt;h3&gt;思路不够清晰&lt;/h3&gt;

&lt;p&gt;同样，没有提前构思就不可能有清晰的思路，这必然会导致文章结构混乱，找不到中心主题，写出来的东西就没有中心思想，变得不知所云，偏离了最初的想法，有时候自己写了好了标题，开始写正文，等正文写好了，通读一遍之后就悻悻的把标题改掉。&lt;/p&gt;

&lt;h3&gt;发散的能力不足&lt;/h3&gt;

&lt;p&gt;头脑中出现一个想要表达的观点，有很强的表达欲，但又不知从何说起，即便是写了出来也觉得太单薄，无法使他人真正理解。针对该想法却无法发散的思考会有什么相关的观点或者引发更多的话题，于是写得磕磕绊绊，异常艰苦。&lt;/p&gt;

&lt;h3&gt;逻辑不够严密&lt;/h3&gt;

&lt;p&gt;写出来的文章一般我是不敢直接发布的，先放在一边，过几个小时再拿出来看一遍，就能发现文章中很多处逻辑错误或者语义不通顺，于是就耐着性子再把思路梳理一遍，然后忍住吐槽自己的冲动进行修改。这期间花费的时间基本上都会超过写作的时间，其实也不是对文章要求太高，而是写得太烂，不得不去重写掉大部分的内容。&lt;/p&gt;

&lt;h3&gt;不良的写作习惯&lt;/h3&gt;

&lt;p&gt;还有边写边改的坏毛病，没等写完，就从头开始读了起来，边读边改，一点点回到暂停的位置，这时候好不容易找到的思路也会断掉，然后就没有然后了。这种纠结不但没有让文章更加通顺，反而因为断掉的思路而变得更加混乱，得不偿失。&lt;/p&gt;

&lt;h3&gt;缺少积累&lt;/h3&gt;

&lt;p&gt;毫无疑问，这一切的根源都是因为书读的太少，加上平时也没有特意的去积累写作的素材，所以每到创作的时候就捉襟见肘，二十多年积累的知识也只够我卖弄一个月，平时的灵感都懒得去记录，素材也只是搜集起来，再也不会看第二遍，真到需要用的时候才发现自己的记忆力是多么的不可靠。&lt;/p&gt;

&lt;h3&gt;心态问题&lt;/h3&gt;

&lt;p&gt;其实上述的问题对于心态来说都不是很重要了，从之前有感而发的写作，到现在为了完成例行任务而写作，我的心态发生了很大的变化，已经严重的偏离了最初的想法，写作的目的是为了记录和分享，如果是例行公事一般的满足自己小小的虚荣心，那么写字这个事情就没有什么实际的意义了，我也不想浪费时间在没有任何意义的事情上，再者，既然时间已经花在了写作上，那么就要写得有价值，不能敷衍了事，蒙混过关，最起码对的起自己，套用一句话：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;如果说照片是对一个人外表的记忆，那么文字则记录着一个人灵魂的成长&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;我面对的不只是文字，还有自己的灵魂，毕竟当初是因为喜欢写作才开始每天的练习的，如此多的问题就必须要一一化解，我也许永远也无法习得高深的写作技巧，但我只希望这个过程，能够欢喜流畅，让我真正的爱上持续写作这件事情。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-28&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>坏数据</title>
   <link href="http://caoshuai.github.com/badData/"/>
   <updated>2014-11-27T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/badData</id>
   <content type="html">&lt;p&gt;入秋以来，空气质量越来越差，现在每天早起的第一件事情就是打开手机看PM值，根据这个数据再来决定一天的活动，时间一长就产生了依赖。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;今早起床，手机显示PM值400+高的离谱，心中一惊，窗外天还没亮，黑压压的一片看不清状况，于是果断放弃晨练的打算，在家做几组运动，可锻炼结束打开电脑无意中发现北京的PM值只有39，突然间我整个人都感觉不好了，特意去专业的监测网站查询，平均的PM值为46，再打开手机确认，发现了数据错误的原因，手机上的数据是因为没有及时更新，保留的是昨夜凌晨的数据，而网页上的数据是最新的实时数据，所以打开电脑之前我是被旧的数据吓到了，这时候天已经亮了，看看外边的情况，像是起风了，能见度很高，雾霾也不太严重，可惜了一个清爽的晨练机会。&lt;/p&gt;

&lt;p&gt;这虽然是个再平常不过的小误会，我在想，我相信数据是因为方便，就拿今天早上来说，不打开窗户并且在光线不足的情况下辨别空气的质量对我来说是一件很困难的事情，没有精密的设备去测量，更没有丰富的经验去判断。但打开手机看PM值就是一件很方便的事情，天气信息一目了然，而且app还可以给出前几天的雾霾趋势，的确很容易让人产生依赖。但对数据的依赖是有要限度的，如果过度依赖数据，甚至是迷信数据，就会很麻烦，大脑会减少对外界感受搜集信息的支持，更喜欢不需要费力搜集和分析就能得到的数据。
我们趋于本能的去需找更加舒服的方式，尽量避免多余的劳动和思考。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;大脑不是设计去思考，而是设计去避免思考。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;然而一旦出现数据错误的情况，这种依赖也是致命的，当现实世界与虚拟世界的联系被错误的数据切断以后，我无法顺利的完成转换，从而更愿意去相信出现偏误的数据，如果是两个数据对照产生偏差，我会感到很无助，本来需要走捷径的大脑，一时半会还受不了需要分析之后还要分辨出真假数据，从偷懒模式转换到勤奋模式并不轻松。&lt;/p&gt;

&lt;p&gt;最后，也是最重要的，如果有一天数据出错并且没有参照，那么这个错误也许会影响大多数人，我们日常需要获取的任何信息都能够很轻易的获得，而正是这种便利导致了我们懒惰的思维，我们变得不爱思考不爱观察，一切问题交给手机和搜索引擎。但如果想要保持清醒的头脑，就需要排除掉对信息的完全依赖，而且现在的信息技术并不能准确的展示一切，还需要我们去亲身体验和感受，所以有限度的利用互联网中的信息就显得格外重要。&lt;/p&gt;

&lt;p&gt;同样，有保留的相信数据也是比较明智的选择，或许我们有能力分辨数据是否可靠，但这对个人的经验和知识要求出奇的高，而如今的互联网时代信息的噪音已经越来越大，我们很难排除干扰，所以多观察，多思考，保持怀疑，坏数据才不会影响你。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-27&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>旧水杯</title>
   <link href="http://caoshuai.github.com/oldCup/"/>
   <updated>2014-11-26T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/oldCup</id>
   <content type="html">&lt;p&gt;在我的左手边，放着一个蓝色的水杯，每天都会不经意的憋见它，就在刚刚我打下这行字的时候，我又看了一眼，它在桌角一动不动的站着，孤独又凄凉。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;这是一个极其普通的塑料杯，甚至可以用简陋来形容，它只有背身和杯盖，购买于三年前学校附近的超市，价格不详，但从样子上来看应该很便宜，蓝色的杯盖四周有四个乐扣，均匀的分布在杯盖的外延，盖上杯盖，卡住扣子，杯子里面的水怎么摇晃都不会漏出来，杯盖正中间有一个凸起，那是用来扣住喝水的杯口防止水从杯口流出而设计的，打开杯口上的保护盖，就能在不打开杯盖的情况下喝到瓶里的水，正上方还藏着一个正方形的小孔，是杯子换气用的。杯身是磨砂的材料制成，带着刻度，厚度适中，装满热水也不会很烫手，大小也刚好，一只手能够牢牢的握住，算是一个好杯子。&lt;/p&gt;

&lt;p&gt;杯盖的杯口，这个三角椎体的镂空塑料和我的嘴唇牙齿进行了无数次的亲密接触，倒不是我喜欢咬东西，而是杯口不大水流量小，我的性子又急，往往会用力嘬几口，难免会碰到牙齿，有时候渴的很了，力道会大一些，就免不了误伤了队友，但杯口没有一点划痕，依然光洁如初，其实我还是很喜欢这个杯子的，确切的说我喜欢用它喝水的感觉，不同于普通的开口杯，那种杯子需要斯斯文文的喝，而且还要该上杯盖，防止浮尘落入杯中，乐扣杯就不一样了，只要在接水的时候打开一次，之后就能够一直盖住杯盖，想喝的时候打开杯口上的小盖子，一个清脆的「bo」，喝完之后合上瓶口盖，也是一个清脆的「pa」，酷极了。喝水的时候需要用嘴巴抵住杯口，杯底朝天，一边喝水，一边45度角仰望天空。整个过程行云流水，一气呵成。&lt;/p&gt;

&lt;p&gt;这个动作我已经练了将近三年，只要去需要喝水的地方，我都会把它装满，然后带着它，白开水、可乐、雪碧、牛奶、咖啡，都装过。它没有杯绳，不方便携带，只能握着或者拖着，而我总习惯用手指钳着它，就像杯盖钳着杯身一样，手就像鹰爪一样拿着杯子，还有比这个更酷的姿势么？三年来我们之间产生了深厚的感情，在昏昏欲睡的教室里、闷热潮湿的大学寝室、冷风习习的校园中、灯光刺眼的健身房、破败不堪的出租屋，最后是在干净整洁的工位上，我已经习惯了它的陪伴。&lt;/p&gt;

&lt;p&gt;直到两个月前，我有了新的水杯，它就成了旧杯子，是呀，它那么旧，杯口盖的塑料不知道什么时候缺掉了一块，杯身用来卡紧乐扣的外延，被我摔掉了一部分，虽然乐扣能够避开断裂的地方，但它已经不能堵住水杯内的水了，每次接完水都要很小心翼翼的扣好杯盖，扭动杯盖，避免杯盖上的卡扣对在断裂的杯口外延。喝水的时候也会漏出水来，于是我把它摆在办公桌的角落里，不理不睬放了两个月，今天打开发现杯身里面已经发霉了，不知道怎么处理它，扔掉，舍不得，用来喝水也不如以前方便，现在的我已经不需要仰望天空了，嗒嗒声也显得格外的刺耳。&lt;/p&gt;

&lt;p&gt;可我已经习惯了它陪在身边，不忍扔掉，于是决定在放一放，找一株长生的植物放在里面养起来，有小花替我陪着它，应该就不会寂寞难过了吧？仙人掌怎么样，会喜欢么？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-26&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>时间丈量一切</title>
   <link href="http://caoshuai.github.com/timeMeasure/"/>
   <updated>2014-11-25T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/timeMeasure</id>
   <content type="html">&lt;p&gt;超体给我最重要的启发就是那句话：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;时间才是全宇宙唯一的单位。&lt;/p&gt;&lt;/blockquote&gt;

&lt;!--more--&gt;


&lt;p&gt;我不禁试着去理解这句话的含义，如果世间万物都以时间作为衡量单位，那么时间刻度就会无限的拉长，任何物体都有了统一的度量衡，时间的度量范围超越了我们的认知，人类漫长的进化史就显得如此短暂，甚至山高水长都只在一瞬，我实在无法想象人类的寿命如何与其相比，只能从有限的生命来思考，如何过好这短暂，渺小，微不足道的一生。&lt;/p&gt;

&lt;p&gt;人生不过几十年，在无远弗届的时间长河中确实是一瞬，我们能够掌控的只有很微不足道的一小部分，可明明人生如此短暂，时间如此宝贵，大多数人还是意识不到时间的重要性，人性的弱点阻碍着我们对时间的充分利用，好逸恶劳、拖延成疾、甚至会特意找些事情避免无聊，就是为了杀掉多余的时间。可笑的是，时间怎么能被杀死呢？我们杀的是自己，时间绝不会因为任何人的轻视和忽略而改变，就在那里，冷眼看着我们的无知，匆匆略过，甚至可能连看都来不及看一眼，转眼我们就老了，那时我们才意识到时间的力量，它能改变一切除了它自己。我们的衰老、我们的智慧、我们对往昔的回忆，都是拜时间所赐，也许只有那个时候才能意识到，原来时间才是杀手，我们谁都逃不掉。&lt;/p&gt;

&lt;p&gt;也许每个人都幻想过自己能够永生，可有多少人想过好好利用这短暂的人生呢？许多人能够逐渐的明白这个道理，他们秉承着时间就是金钱的理念，他们购买正版书籍，而不是花时间在网络上搜索和下载，再比如愿意为提升效率的工具付费，而不是为了节省金钱牺牲效率，还有对任何能够充分利用时间的方法加以学习，而不是得过且过的顺其自然，浪费掉大把的财富。总之就是愿意用金钱换取时间，而不是用时间换取金钱。&lt;/p&gt;

&lt;p&gt;说道财富，其实还有另一个观点——在时间面前，人人平等，时间越多的人财富越多，这种财富只有自己能够支配，很少有人意识到那些宝贵的东西，不管我们怎么试图挽回都是徒劳，只能要求自己好好地利用这笔财富，去完成我们想要完成的事情，不管是什么目标，把时间投入进去，它就会帮我们，因为那是资本。你的财富，也是你的投资。&lt;/p&gt;

&lt;p&gt;即便是短暂的几十年，总得做点什么好让人生不白活，哪怕是一瞬间，我们也要化作绚烂的烟火，照亮夜空，响彻天际。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-25&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>租个自行车</title>
   <link href="http://caoshuai.github.com/rentABike/"/>
   <updated>2014-11-24T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/rentABike</id>
   <content type="html">&lt;p&gt;一个月前，我离开居住了三年的石景山区，搬到了丰台区，确切的说是丰台区于西城区的交界处，那里距离我上班的地方很近，然后我就感觉到幸福感飙升，因为每天通勤的时间从三小时缩短成了为一个多小时，这简直是我这三年做的最明智的决定了。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;是的，我再也不用担心加班太晚赶不上回家的班车，也逃离了沙丁鱼罐头一般的一号线，还有每天往返走的那段永远尘土飞扬的小路。通勤时间一缩短，整个生活质量都有了很大的提升，每天多出来的时间可以做些自己原来想做却没时间做的事情。比如看看感兴趣的书或电影，为自己准备一顿丰盛的晚餐，或者躺在那里发呆也好，都胜过枯燥无味的上下班时间。&lt;/p&gt;

&lt;p&gt;但是我还是不满足，通勤时间虽然短了，但效率却没有提高，每天等公交的时间令人烦躁，而且新的住址交通也不是很方便，夹在两条护城河的中间，虽然景色和环境没得说，但我无法忍受班次不靠谱的公交车，而且坐公交车会直接影响我早餐的胃口，因为我实在受不了公交车在十字路口怠速空转的发动机，坐在上边的感觉简直就是痛苦不堪，我觉得自己就呆在一部不断震动的手机里面，精神不振，还会微微的反胃。可怕的是一路上基本都是在等红绿灯，对我来说真是痛苦不堪。&lt;/p&gt;

&lt;p&gt;于是就有了买车的念头，当然是自行车了，3.5公里的距离也还能够接受，既锻炼身体有低碳环保，可问题来了，买了自行车之后存在哪里？如何防盗？这都成了大问题，倒不是我对北京的治安不放心，而是很多朋友都有车被偷的经历，而有些干脆直接把心爱的自行车存在家里面，一想到如此麻烦，不禁有些动摇，其次考虑到自己漂在北京，随身的负担少一个总比多一个强，本着断舍离的态度，我打消了买车的想法，但还是不甘心。&lt;/p&gt;

&lt;p&gt;于是开始考虑租公共自行车这个备选方案，经过考察，其实也不是不可以，虽然车子的质量不及变速的山地车，车子的颜色也不是我喜欢的，可它毕竟是自行车呀，而且在附近的租车点很多，也算是方便，基本上使用起来无障碍，也没有被偷的烦恼，短途使用基本上是免费的，着完全能够解决我的困扰，再说我想要锻炼身体，不能变速正好成了优点，最吸引我的其实是公司和住处都有租赁点，如果骑自行车，我能够把通勤的时间进一步缩短，能够严格控制在1小时以内，并且不会有太多的出入，简直比坐公交车通勤强的太多了，而且最好的是租车可以很灵活，不用像买车一样骑回来还得再骑回去，如果遇到了突发的恶略天气也能够灵活变通，这样一来就省了不少麻烦。于是果断的去办手续，从此开始了骑车上班的美好生活。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-24&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>谨慎乐观派</title>
   <link href="http://caoshuai.github.com/cautiouslyOptimistic/"/>
   <updated>2014-11-23T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/cautiously</id>
   <content type="html">&lt;p&gt;从北京的西五环搬到南二环并不是件容易的事情，更头痛的是合同已经到期了好几天，而我却在新疆出差，项目上的事情让我忙的焦头烂额，而且充满为知的变数，就连回来的日期都无法确定。内心焦灼却也没有处理办法，只能等回到北京再说，我也曾仔细分析过产生这种情绪的原因，认为这都是源自于对未来不确定的恐惧，对于今后发生的任何事情都无法给出一个完全乐观的设想，尽管自己也很清楚这种庸人自扰的行为会给我带来很多麻烦，畏首畏尾，固步自封，归根结底是一种悲观心态作祟，而且根本停不下来。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;我曾尝试着去改变这种思维方式，我需要不断地提醒自己，喂，明天又是新的一天，你的未来充满无限可能，但一想到五年后，甚至是两年后的自己会是什么样子，心中就发怵，这种与思维抗争的事情，太难了。我从小学时期就已经具有如此悲观主义思想，任何事情都会担心自己做不好，或是出现一些无法处理的状况，虽然每次都能够有惊无险的过关，但这种心态随着年龄的增长非但没有减轻，反而一点点加重了。面对棘手的问题也一样的状态，会下意识地排斥，退缩，甚至怀疑自己。&lt;/p&gt;

&lt;p&gt;对未来的不确定性可以暂时归结为害怕遇到困难，而害怕遇到困难是因为没有信心能够处理好它，而对自己没信心的原因其实是固定型思维模式，那么问题最后又回到了心态调整与思维方式的转变上来，虽然有时也会对今后的生活抱有谨慎的乐观，但随即就会被一波波的自我怀疑和自我否定的思想淹没。&lt;/p&gt;

&lt;p&gt;知乎上有一个问题是「应该清楚男友那些方面才能嫁给他」，其中有一个高票回答，是从最根本的思维模式来分析思维的价值所在，大概的观点就是要与具有成长型思维模式的人相处，因为他们更愿意相信幸福的生活是靠不懈的努力达成的，而具有固定型思维模式的人面对问题，则更倾向于去寻找而不是努力。反思了一下，可真的连固定型思维模式都达不到，遇到困难不但不是寻找，而是悲观消极的退缩，连躺枪的机会都没有。&lt;/p&gt;

&lt;p&gt;其实仔细想想就是因为自己努力不够，无法接受自己处理不了未知问题的事实，选择逃避面对，盖洛普优势识别器中，我的第一优势是竞争，竞争才干的最致命的缺点就是无法接受差异悬殊的比拼，如果遭到碾压，很容易一蹶不振。同理，竞争才干突出的人，更乐于跟势均力敌的对手同场竞技，面对毫无胜算的比赛，他们宁愿选择退出，好了，这次成功中枪。&lt;/p&gt;

&lt;p&gt;那么根据盖洛普的理论来讲，我更应该顺应着优势的要求发展自己，而把那些影响优势的因素加以控制，不要影响才干发挥就好，所以想要解决这个问题，需要做的工作还有很多。只有每天对未来多一点点乐观，相信可能，不断尝试，哦，还有面对失败的良好心态。这也许是比较好的解决办法吧。&lt;/p&gt;

&lt;p&gt;我突然觉得，势均力敌的对手不可以是我自己么？也许我还可以尝试一个「每天战胜自己一点点」的小挑战呢。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-23&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>最难不过是体谅</title>
   <link href="http://caoshuai.github.com/theHardestConsideration/"/>
   <updated>2014-11-22T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/theHardestConsideration</id>
   <content type="html">&lt;p&gt;这几天为了处理工作上的坏情绪花费了很多精力，这期间我也在不断反思自身的问题，直到我得出了需要「换位思考」的结论，才算把整个心态调整平衡，原本这件事也就算该这么过去了，可还是发生了一些让我觉得更加奇妙的巧合，这让我暗自庆幸自己的幸运，而这点小欢喜，也坚定了自己能够重拾对生活热爱之情的信心。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;第一件事是关于奶牛Denny的故事，还有一个就是罗辑思维的视频，其实这两件事并没有任何的关联，只是对我来说意义非凡，奶牛老师和罗振宇老师都是我学习的榜样，之所以称他们老师，是因为两位都秉承着热爱分享的理念做事，他们的思维和观点，都给了我许多的启迪。而今天我却又一次被二位老师的想法触动了，以至于我迫不及待的想要把他写出来，分享给大家。&lt;/p&gt;

&lt;p&gt;首先是奶牛老师今早在微信推送的消息，第一次知道奶牛老师是因为读过他之前写一篇《给明年依然年轻的我们》，被他透彻的思想和分享的精神所打动，就关注了奶牛老师的微信公众号，但是他基本很少推送消息，基本保持者一个月一次的更新频率，而今天早上，我睡眼惺忪的睁开眼，看到了他昨天深夜推送的消息，主题是关于创业和人生，一共三篇文章，将近两万字的内容，奶牛老师讲述了自己几个月来在乐纯酸奶创业的经历和感悟，先是放弃全职工作的权衡，到创业起步的艰难，然后是遭到背叛的失落，最后是面对误解于非议的疲惫。至始至终，都以一个非常平淡冷静的角度在描述这段令人根本无法承受的经历，他面对合伙人的背叛行为所表现出冷静与克制令我深深折服，根本无法想象自己能够如何处理这种状况，我甚至很不理解他为何如此宽宏大量，这份淡然本不该从如此坎坷至极的创业经历中保存下来的。&lt;/p&gt;

&lt;p&gt;直到看完了他写在关于合伙人的复盘文章最后的话：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;这个人做了件好事，那个人做了件不那么好的事。然后该分享的分享，该道歉的道歉，继续多做些事。
多做些让世界变得更有趣的事。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;这也许就是大爱吧，触动我的最深的就是这句话，点中了我昨天的反思，然后又赋予了更珍贵的意义，文章中并没有为自己辩解，更没有谴责那位中途退出最后甚至拆台的合伙人，而是将故事中两人的处境完整的描述了出来，并引导我们去体会，可以说这其实是一次纯粹的分享，目的在于告诉我们，体会到处境和人的关系，从而更加体谅那些无法理解，甚至对我们造成伤害的事情，不管是好的，还是坏的，都和人无关，只和处境有关。你如果无法设身处地的去为他人思考，那么误解甚至冲突困扰的始终会困绕着你。体谅他人也是在善待自己，对和错其实都不那么重要了。当我还在回味这些道理的时候，紧接着又发生了另一件让我倍感温暖的事情。&lt;/p&gt;

&lt;p&gt;起床之后就是每周末的晨练，因为平时实在抽不出时间，只能在周末早上晨练的时候听一听罗老师的罗辑思维视频，以前落下的一期《海盗的世界你懂吗》中，罗老师绘声绘色的讲述了海盗世界中不为人知的规则，在之后的结论里，他一反常态的没有提及互联网思维和唱衰大企业的论调，而是分享了另外一个观点，关于两个学者对贫富不同的两个村庄进行分析于调研，却得出相反结论的故事，造成如此荒诞结果的原因就是，其中一位学者只站在局外人的角度去分析情况，而另一位学者则能够设身处地的去站在当事人的角度分析问题，于是两个人得出完全相悖的结论。最终罗老师引出中心思想：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;争论是非不如理解他人。
人的思维方式有两种，第一种是评论家，站在局外去分析评判他人的是非对错和善恶美丑。
另一种却是试图理解他人，将心比心，穿越到别人的处境中去理解别人。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;是啊，因为谁都会为了捍卫自己的利益作出最聪明的决策，所有人的做法都有自己的道理，应当抱有理解之同情。这华丽的二连击，真的不能同意更多。&lt;/p&gt;

&lt;p&gt;我希望这令人温暖的巧合能让我对他人更加宽容和体谅，真真正正的去爱这个世界，同时也希望能够像二位老师一样，分享自己的感悟和心得，与他人一同成长，现在，我更加坚定了自己这小小心愿。&lt;/p&gt;

&lt;p&gt;横祸真的好奇妙，不是么？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-22&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>换位思考</title>
   <link href="http://caoshuai.github.com/Empathy/"/>
   <updated>2014-11-21T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/Empathy</id>
   <content type="html">&lt;p&gt;一个月前，我加入了一个新的项目，工作内容发生了很大的变化，没有了具体的目标，也没有了量化的工作内容，同时充满了很多不确定因素。由于之前的工作内容大都很明确，计划也很清晰，基本都是依照计划，按部就班的工作模式。一开始我很不适应，感觉一切都无法掌控，而要命的是任务多，时间紧，需要尽快启动项目工作，但因为流程的关系，还需等待很长的一段时间才能展开下一步的工作，而且，时间也不确定。简直快要疯掉了。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;于是我感觉十分的焦虑，同时也对项目未来的进展担心，害怕耽误项目工期，无法按时交付。按说这么个情况项目负责人应该比我还要着急才对，可他看起来好像一点也不着急，不紧不慢的干活，项目信息也不主动的沟通，好像一切都在掌控之中一样。于是我就成了热锅上的太监，为皇上着急的要死。&lt;/p&gt;

&lt;p&gt;从此之后我就摆正了姿势，可还是无法克服为知风险隐隐的担忧，时不时的就会设想万一项目黄掉了怎么办，越想越害怕，一想到我每天要面对如此多的不确定性，我就觉得很沮丧，甚至开始怀疑整个项目的可行性，一直试图控制这些消极的想法，好让它赶快消失掉，以免影响其他的团队成员，可事与愿违，这种情况不但没有好转，我甚至将项目的不确定归咎于项目经理不够主动，认为他的能力不足以把控整个项目的进展。这对我来说是一件很痛苦的事情，坏情绪完全改变了我的工作态度，我变得焦躁，易怒，消极。对项目经理有很大的意见，我能够感觉到这种情绪有慢慢加剧的趋势。&lt;/p&gt;

&lt;p&gt;如此一来，问题就变得严重了，我开始下意识地排斥与拖延，我明白，如果任由这种情绪继续下去，事情会变的很严重，甚至完失控。直到昨天中午，项目经理找到我，告诉我出大事了，我强忍着不满听他说完了事情的来龙去脉，才知道其中的原委。这次沟通之后，我改变了之前的看法。&lt;/p&gt;

&lt;p&gt;从对话中了解到，原来项目经理的压力比我大得多了，只是很多时候没有表现出来，协调的工作十分繁杂，不断地跟进和推动流程进展，也是一件很痛苦的事情。我开始设想，如果我处在项目管理者的位置，我会怎么做，面对如此焦头烂额的情况，也许会处理的更差，只站在自己角度去看待问题，容易有选择的忽略有价值的信息，更别说搞清楚其他人在做什么了，不了解信息就开始猜忌怀疑，这种行为并不明智，毕竟他是第一次做项目经理。有些做不到的地方，还需要我提供帮助和提醒。经过了换位思考，我才发现之前的想法有多可笑，暗自庆幸没有对周围的人造成困扰，在内心警告自己要多沟通，避免对同事产生误解。&lt;/p&gt;

&lt;p&gt;这件事情我反思了很久，之后也在调整心态，并写下这篇文章作为反思，之后专注当下的情况，努力的推动项目进展，踏踏实实做事，争取项目按时交付。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-21&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>不一样的思考</title>
   <link href="http://caoshuai.github.com/thinkDifferent/"/>
   <updated>2014-11-20T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/thinkDifferent</id>
   <content type="html">&lt;p&gt;独立思考的第一步，就是对原有的认知产生怀疑，这无疑是一个庞大的工程，对我们来说，从小到大接受的教育，学校的统一管理，家长的耳提面命都在一定程度上扼杀了我们的怀疑精神，告诉你的只要认真的听话，按照他们的安排好好学习就行了，不要去问为什么，「听话」也成了衡量孩子好坏的标准，当然没有之一。兴趣、天赋、好奇心等对成长影响最为深远的因素在这一简单粗暴的评价标准面前，根本不值一提。不难看出学校与家长那份可耻的控制欲，以“过来人”的身份去掌控本该属于孩子自己的命运，以爱的名义裹挟着别人的生活，最后的结果却不需要由那些做决策的人承担，这公平么？&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;也许我们都想过反抗，青春期的叛逆是最好的证明，不愿意承受身上哪怕一丁点的束缚和要求，迫不及待的想要活出自己，蔑视一切权威，将反叛精神发挥到极致，最后还是败下阵来，于是成了「不听话」的反面教材，被用来教育那些「不怎么听话」的孩子，可大家心里都明白，都向往真正的自由，可再也没人愿意打破这种沉默的现状，去勇敢的表达自己，因为这是权威的时代，家长和学校掌握着我们的命运决定权，我们别无选择，只能妥协。这让我想起了《1984》中的老大哥，而我们的青春也被老大哥悉心照料，内心唾弃但却只能与他和睦相处，直到我们习惯了这种生活，一旦如此，生活也就轻松许多了，不需要思考，不需要有疑问，只管按照他们说的去做就好，因为这都是为我们好，然后就造就了那些，只听不想的大脑，他们丧失了独立思考的能力，甚至不愿意去独立思考了。&lt;/p&gt;

&lt;p&gt;怀疑原有的认知，需要我们不断地挑战固有的思维模式，当然也不是全盘否定之前的认知和方法，而是一点点的去架构自己原有的思维，找到问题然后修正它，比如标题的那段话，就有些违背我们的认知，不过既然要有怀疑精神，那么就不要只停留在字面的怀疑之上而妄下论断，深入的思考为什么会得出如此结论，这句话是站在什么角度去说的？发生的场景是什么样的？有什么理论依据？是否是一个合理的推论？这些都是我们需要怀疑的问题，有了这些问题其实也就找到了印证这句话真假的方法，只要解答了这几个核心的问题，就能够判断此结论是否成立。从而选择是否赞同此观点。如果不赞同，提出自己的反对意见，并以之前的分析方式阐述自己的立场。如果赞同，那么就说出自己的理由。如此一来就是整个的思考过程，对问题的分析和对结论的阐述，其实都是独立思考必不可少的步骤。&lt;/p&gt;

&lt;p&gt;其实独立思考并不难，难的是跳出自己固有的认知领域，勇于挑战自己，保持着谦卑的态度，接受新思想的冲击。这些同样是一个具备独立思考能力的人应该具备的条件。说白了就是给大脑找别扭，因为大脑不是设计为思考的，而是设计为避免思考的，所以，别迟疑，去怀疑。总会发现不同的世界。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-20&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>忍者神龟</title>
   <link href="http://caoshuai.github.com/NinjaTurtles/"/>
   <updated>2014-11-19T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/NinjaTurtles</id>
   <content type="html">&lt;p&gt;说实话，我还是比较喜欢以经典动画为题材的电影的，尤其喜欢那些无法用真人饰演的虚拟角色，看他们出现在现实的世界也是种不错的体验，如果在加上酣畅淋漓的打斗场面那就更好了，因为我能感觉到每一帧都凝结着创作人员的大量心血，这些要素《忍者神龟》基本上都具备，预告片中逼真的人物特效，个性鲜明的对白，紧张刺激的打斗场景，噢，还有辣妹，这些再一次吊足了我的胃口。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;其实我原来就是一个对电影质量要求不高的人，只要能看的舒服就好了，可随阅片量的提升，口味就变得挑剔了，看了忍者神龟之后，总觉得有些失望，虽然电影整体水平中规中矩，但还是感觉少了些什么，其实我也能够感觉到电影剧情完全按照人们可预见的形式发展的，丝毫没有任何新意。我完全找不到年少时看忍者神龟时那种紧张刺激又豪气万丈的感觉。忽然意识到，现在的忍者神龟已经不是原来的忍者神龟了，但我认为，既然选择了翻拍经典动画，那么就不要丢弃掉原有动画的灵魂，因为这对那些抱着对经典动画的深厚感情而慕名前来观影的观众来说，是不公平的。包括我在内。&lt;/p&gt;

&lt;p&gt;当然，剧情虽然平淡无奇，但内容还是比较饱满的，电影前期的铺垫与人物的塑造能够把主线更加的突出，对原著熟悉的人带出原有的动画情节，不熟悉的人带入电影中。还有时不时的笑料和包袱抖出，最后也有煽情的表白，总的来说基本的元素都拥有了，观影的体验也不差，可就是因为没有任何新意的剧情，让抱有高期待的人们失望。&lt;/p&gt;

&lt;p&gt;倒不是说这样不好，因为看电影本来就是一种娱乐活动，娱乐的目的就是放松大脑，从现实的繁杂的生活中脱离出来，也不指望所有的电影都能达到启发观影者思考人生的境界，大家看着高兴就好。票卖出去，你看得满意就够了。可我们已经被欧美电影中千篇一律的桥段洗脑太久，每次都是如此的套路的确会令人乏味，胃口再好，也架不住天天吃包子，虽然馅儿不同，但它还是包子啊。&lt;/p&gt;

&lt;p&gt;其实原因也很简单，之所以有这种感觉是因为我对忍者神龟的原著有着特别的情感，难免会对电影版抱有过高的期待，造成了我个人如此挑剔的态度，可看了豆瓣上的影评，与我有同感的人并不少，这就很能够说明问题了，欧美片剧情同质化严重的时代下，忍者神龟这部没有剧情亮点的电影还是会被人诟病。彻底沦为了人们口中的爆米花电影。&lt;/p&gt;

&lt;p&gt;当然你也许会觉得我的观点很杂乱，不够清晰，没错，我并没有一套自认为合理的评分标准，配音、动画、题材、场景这些我都无法给出专业的评论，但就实实在在的观影体验来总结的话，那就是，我很失望。我们都能看出，故事还没有结束，也许我明知道那是烂片，也还是会去看的，谁叫我喜欢呢。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-19&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>现在就要，还是以后再说？</title>
   <link href="http://caoshuai.github.com/NowOrLater/"/>
   <updated>2014-11-18T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/NowOrLater</id>
   <content type="html">&lt;blockquote&gt;&lt;p&gt;所有的青春都是在为中年做准备——吴晓波&lt;/p&gt;&lt;/blockquote&gt;

&lt;!--more--&gt;


&lt;p&gt;何止是如此，所有的少年都是在为青年做准备，所有的中年都是在为老年做准备，我们当下做的事情，总会反过来作用我们的人生，塑造出我们的未来。这个道理虽然浅显的不行，但很少有人懂。要知道人生是被创造出来的，而创造人生的主体，就是我们自己呀。&lt;/p&gt;

&lt;p&gt;其实这个问题很简单，有些人之所以参不透其中的道理，并不是因为智商不足，而是无法处理「即时满足」于「滞后满足」的关系，为什么吴老师只挑了青春为中年做准备的话题呢？其实少年时期我们是无法很好的处理这两者之间的关系，那是因为自控力不足，而且还不懂得克制自身的欲望。同理，中年时期大体也就明白了自身的问题所在，已经能够很好地处理现在和未来的关系了。唯独提出青春两字，无非是希望点醒那些沉浸在「即时满足」状态下的青年们，为自己不久的将来多做考虑，中年体面的生活需要青年时期的成功投资来保证。&lt;/p&gt;

&lt;p&gt;也许有人会说我什么都没有，能投资什么呢？是啊，在我们的眼中，青春就是用来荒废的，青春就是用来被怀念的，可有谁说过青春是用来投资自己的？高调宣扬荒废青春的都是些什么人呢？生活无忧的艺术家、矫情文艺的作家、别有用心的广告商，他们只做大众喜欢的事情，说大众喜欢的话。真正荒废过青春的人是无颜站在众人灼灼的目光下忏悔的。也许他也会鼓吹青春无悔，是的，因为他们再也回不去了。&lt;/p&gt;

&lt;p&gt;再回到什么都没有的话题，认真思考一下，青春真的是一无所有么？你充裕的时间，你旺盛的精力，你不败的激情和你强健的体魄，都是无比宝贵的财富，这些唾手可得的财富，会随着时间流逝渐渐离你远去，直到进入中年，最后完全消失不见，只留下一颗还算清醒的头脑，那时的你会怎么想呢？是否会埋怨当初的自己，在力所能及的时候没有努力的做一件事，当没有机会再去做的时候才老泪纵横？&lt;/p&gt;

&lt;p&gt;我同大多数人一样，从15岁开始就对自己不满意，任何事情都觉得自己能够做的更好，可事实却很难如愿，这种情绪也就这么一直僵持着陪我走过了十个春秋，青春小鸟一去不会来，我还傻傻的站在原地悔恨的回望那段本不该荒废的美好岁月。可我们始终都无法处理好与未来的关系，现实往往充满诱惑，这让我们逐渐丧失了清醒思考的能力，也许会事后悔恨不已的下决心，以后再也不会乖乖就范，可打脸的事情经常发生，不是么？&lt;/p&gt;

&lt;p&gt;说白了就是面对诱惑的欲望时，你能否坚持初心？能否清醒的思考到底什么是你真正想要的，亦或者未来的你会因为没有抵挡住这次的诱惑失去什么？那么问题又来了，面对诱惑，你是现在就要？还是等等再说？&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-18&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>当我写不出东西的时候，我在写什么？</title>
   <link href="http://caoshuai.github.com/whenIWriteNothing/"/>
   <updated>2014-11-17T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/whenIWriteNothing</id>
   <content type="html">&lt;p&gt;我对着电脑发呆，不知道写些什么，这已经是这个月第三次，一阵焦虑感涌了上来，我坐如针毡。心想这么下去可不行，我总得写点东西，于是我喝了一口水，吃了个水果，努力想想昨天脑中蹦出的灵感是什么，可我绞尽脑汁，只记得当时的写作冲动，却忘记了要写的内容。这使我很沮丧，不过既然坐在这里了，还是写点东西吧，什么内容都行，唠家常、谈理想、评事实都行，只要别呆着，做点什么总会有收获。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;不知道是什么时候开始，觉得应该写点文字，记录每天的想法，或者整理思路。从去年就有意的开始写文章，但由于种种原因，没能保证每天一篇的频率，但也在陆陆续续的写，期间也有过很长时间的间断，但这也是我这两年唯一持续执行的计划，当然没有之一，其他的计划都已搁浅，唯有写东西这个习惯持续到了现在。当然我并不是单纯的为了记录和整理，其实我内心还是有一个文艺青年的梦想的。可惜上学的时候读书太少，空有一颗多愁善感的心，心中那些感情，无法转换成优美的文章，毕业之后稍微读了点书，就有点跃跃欲试，尝试着写却怎么都无法让自己满意，不是觉得自己幼稚，就是觉得文笔太烂，有时候真觉得自己倒退到了小学生得水平，其实我也知道自己从小学毕业之后就没怎么提升过。&lt;/p&gt;

&lt;p&gt;不过这些都无法抑制我想写东西的欲望，所以就这么一点点拧巴的写，工作的时候写代码，业余时间写文章，奈何肚子里的存货太少，很容易遇到没什么可写的情况，于是就强迫自己，也说不上是有热情，只是想找个有意义的事情做。消费了太多优秀的作品，觉得自己也该创造点东西出来，哪怕是一些质量堪忧的文章，也会让我在完成的那一刻有点小小的满足感。&lt;/p&gt;

&lt;p&gt;写不出东西的时候会随手翻翻之前写过的文章读一读，如此一来脚底板就窜出一股劲，顺着脊梁骨到了后脑勺，这种感觉令我倍受鼓舞，瞬间就释然了，不为任何目的的写，不加任何要求的写才是我写东西的意义所在，这纷繁复杂的思绪在写的过程中就创造了价值，让我更加了解自己，接纳自己的情绪，看到自己的思想，沉浸在思考和写作的乐趣中，这就够了，何必在乎写的好不好呢，就像找到了一位知心朋友，它安静的听我倾诉内心的想法，接纳我各种好情绪或坏情绪。我只需要有人能够听我诉说，至于他是谁，有什么感受，其实也不重要了。就这样，写作已经成为了我排解情绪的一种途径，给我继续前行的力量。&lt;/p&gt;

&lt;p&gt;当写成为习惯，我就有些离不开它了，从之前的厌恶、焦虑到现在的自然而然，就像从陌生到熟悉的朋友，陪我度过了数不清的苦闷夜晚和百无聊赖的早晨，虽然我写不出什么，但我就是想写，对我来说不写的感觉可比写不出的感觉难受多了。好了，就先写到这里吧。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-17&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>为何留在北京？</title>
   <link href="http://caoshuai.github.com/WhyYouStayBeijing/"/>
   <updated>2014-11-16T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/WhyYouStayBeijing</id>
   <content type="html">&lt;p&gt;有些事我都已忘记，但我现在还记得，在一个晚上，我的朋友问我，为什么留在北京？顿时我脑中思绪万千，想要找到一个能够说服他的说辞，可我的思路乱的就像头上的那一团自来卷，怎么都梳理不清楚，经过短暂的沉默，我只能半开玩笑搪塞他说「老子是为了为祖国首都做贡献」，也许是朋友看出了我的尴尬，贴心的换了别的话题。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;事情过去之后，我整个人都不好了，这个问题一直萦绕在脑海中，逼得我不得不去认真的思考，是啊，在北京这么久居然找不到一个能够说服自己背井离乡的理由，任谁都会不舒服吧？在媒体的鼓吹和报道中，在北京漂泊的人如果没有梦想，就不好意思和别人打招呼，可遗憾的是我必须承认我没有梦想，就是想单纯的留在这里。&lt;/p&gt;

&lt;p&gt;在我朋友的眼中，我在北京独自奋斗，每天朝九晚五过着乏味的生活，收入在北京买个厕所都困难，没有朋友圈子，更没有女朋友，这些足以让他对我留在这里的想法产生严重的怀疑。也许我说不清楚，为什么要留在这里，但是我想说为什么不愿意回去的原因。&lt;/p&gt;

&lt;p&gt;首先，家乡很难有一个公平的环境，我出身普通家庭，并没有显赫的家庭背景，这在关系主导的家乡是很难找到一个能够获得平等对待的机会。托人办事已经成为了一种解决问题的主流方式，这种环境下人们往往更加浮躁，无法沉心做事。在北京，关系也许有效果，但个人的能力是能够被普遍认可的，因为市场足够大，总会有人为你的才华和努力买单。不靠关系，也能活的有底气，在家乡，我做不到。说白了就是靠自己的努力在社会立足的感觉，家乡的孩子大概体会的没有我们深刻。&lt;/p&gt;

&lt;p&gt;其次，无法开拓眼界，当然这是对于普通人家的孩子来说，如果一辈子呆在家乡不出来也好，老老实实地呆在水井中，早早的结婚生子过上幸福的生活。而我确是下了决心跳出了来的那一只，见识过更大的世界之后，怎么甘心回到逼仄的水井中呢？根本无法想象在家乡过着一眼望到老的生活，想必是一件令人痛苦绝望的过程吧。&lt;/p&gt;

&lt;p&gt;再次，北京的生活成本高，买车买房都暂时无望，这让我能够更加专注自身的发展，因为一无所有，所以动力十足，而不是早早的在家乡划着父母半辈子的积蓄，贷款买车买房从此丧失了努力拼搏的斗志，当然我并不是不想要房子和车子，只是更想靠自己的努力得到这些，作为独子，的确能够心安理得的花父母的钱，但我做不到。&lt;/p&gt;

&lt;p&gt;然后，就是远离家乡的朋友圈子，我不热衷聚会party，更愿意独子呆着，看书，写字，听音乐，健身。过自己喜欢的生活，不被友情裹挟。免去了攀比的烦恼，免去了觥筹交错的应酬，反而能够静下心来认真思考自己需要什么，同样，在北京我的朋友也少的可怜，我的朋友都在书中，旋律中，而这里更像我精神的世外桃源，让我乐在其中。&lt;/p&gt;

&lt;p&gt;最后，也是因为我习惯了独自一人的生活，不愿意回家和父母同住，当然这不是说我不爱他们，而是因为太爱他们了，所以我能够每星期打电话的时候告诉他们我很好，过得很开心，而不是每天在他们身边看着他们为我操劳忙碌。我能够照顾自己，独立的生活。我也一直希望能够将二老接来北京，享受完善的基础设施和高水平的医疗服务，这应该算是支撑我留在这里的原因之一。&lt;/p&gt;

&lt;p&gt;虽然到现在我也无法想象以后是否能够在北京扎根，无法想象我是否能在这里组建自己的家庭，更无法想象令人大多数人头痛的教育，医疗，交通，环境问题。但是我就是愿意留在这里，为了坚持那一份「靠自己」的想法，为了一个能够安然入睡的理由。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;2014-11-16&lt;/code&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>优势挖掘指南</title>
   <link href="http://caoshuai.github.com/StrengthFinderRecord/"/>
   <updated>2014-11-15T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/StrengthFinderRecord</id>
   <content type="html">&lt;p&gt;我这个人不喜欢欠别人东西，所以早上挖的坑，今天晚上就得填好，我可是牺牲掉了看星际穿越的时间给大家整理笔记，只希望大家能够喜欢。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;这篇文章主要是为了帮助大家识别出自己的优势，从而更好地认识自己，也能在将来面临人生决策的时候不至于因为对自身性格和优势缺乏了解而陷入两难的境地。废话不多说直接上干货。&lt;/p&gt;

&lt;h2&gt;如何发现自身的优势&lt;/h2&gt;

&lt;p&gt;其实很简单，上盖洛普的官网做测试就好了，但是网站要求测试者输入随书附赠的测试码，而且该测试码只能用一次，很坑爹的规则。不过广大无码人士，不要着急，我找到了一个能够进行免费测试网址，虽然测试的评估结果的中文翻译有点瑕疵，但是不影响大家找到自身的五个主题优势，结果中同样会列出三十四个优势所得的全部分数，当然，前提是你要耐着性子把180道测试题认真的做完，结果如下图：
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/56077-4c13f391d886c00d.png&quot; alt=&quot;测试结果&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;优势识别器测试”意在帮助你提高你的观察精度。它向你提出一一配对的问题，捕捉你的选择，分析它们，揭示你的主导行为模式，继而告诉你，你最大的优势领域在哪里。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;测过的同学，请直接跳过此段，无码人士请点击&lt;a href=&quot;http://www.apesk.com/strengthsfinder/&quot;&gt;这里&lt;/a&gt;，总共180道测试题，请认真阅读答题要求，认真的思考回答，书本中要求对每个问题的思考不要超过20秒钟，以确保能够按照真实地想法回答问题，以便获得最准确的结果。填好姓名和邮箱，开始测试吧！&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;BTW，这个是可以重复测试的，但是最好一次认真的测完，因为题目真的是太多了，OK，半小时之后见！&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;各项优势的特点&lt;/h2&gt;

&lt;p&gt;测完的同学们可以来这里对比你们各项优势的特点，还有如何于具有这样优势特点的人相处更加融洽的方法。如果你和我一样对自己的测试结果产生怀疑，不妨认真的看完如下的优势描述，然后对自己好好评估一番，如果还是没有感觉，也不要太着急，因为这里没有标准答案，只有最适合自己的答案，所以要在平时的生活中多留心自己的想法，多关注自身对事物的感受，我想，你很快就能找到自己的优势的。下面开始罗列出三十四个优势：&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;成就 行动 适应 分析 统筹 信仰 统率 沟通 竞争 关联 回顾 审慎 伯乐 纪律 体谅 公平 专注 前瞻 和谐 理念 包容 个别 搜集 思维 学习 完美 积极 交往 责任 排难 自信 追求 战略 取悦&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;弯掰腕，黑喂狗！&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;成就（Achiever)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你的成就主题说明你的内在动力。它表明你始终渴望有所建树。&lt;/li&gt;
&lt;li&gt;你感到每一天似乎都从零开始。一天结束时，你必须获得某种有形的成果，如此才能感觉良好。&lt;/li&gt;
&lt;li&gt;你所谓的“每一天”指的是所有的日子——工作日、周末、休假日。无论你多么需要歇一天，如果这一天你无所事事，你就会感到不满意。&lt;/li&gt;
&lt;li&gt;你体内有团烈火在熊熊燃烧。它促使你多做事情，多出成果。完成一项任务后，这火会暂时减弱，但很快重新燃起，推动你朝下一个目标努力。&lt;/li&gt;
&lt;li&gt;你对成就的不懈追求或许缺乏逻辑，甚至漫无边际。然而，它将伴随你一生。作为一名追求成就的人，你必须学会与这种隐隐的不满足感相处。它毕竟不无益处。它给你动力，使你能长久工作而不知疲倦。它不失时机地使你奋起，去迎接新的任务和新的挑战。它为你输入充沛的精力，帮助你为你所领导的班组设定工作进度和业绩指标。它是推动你不断前进的主题。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“成就”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;要人加班时，给他打电话。常言道：“要做事，找忙人。”这话一般不假。切记，他喜欢忙碌。坐下来开会让他心烦。所以，要么让他去于自己的事，要么只让他参加非他不可、而且他充分投人的会。&lt;/li&gt;
&lt;li&gt;帮助他测量自己的业绩。他很可能喜欢计算他的工作时间，但更重要的是，他应能测量自己的工作总量。简单的测量标准，如为多少顾客提供了服务、记住多少顾客的名字、查阅了多少文件、联系了多少潜在客户，或看过多少病人，都能使他有据&lt;/li&gt;
&lt;li&gt;可依。通过合作与他做朋友。共同努力工作常使他感到亲密。别让低效率的人靠近他，他讨厌“懒人”。&lt;/li&gt;
&lt;li&gt;他做完一件工作时，让他休息或给他派件小活绝非他所希望的奖励。如果你对他做的工作进行表彰，并为他定下更高的目标，他的干劲会更大。&lt;/li&gt;
&lt;li&gt;他很可能比多数人晚睡早起。如有要求晚睡早起的工作，就交给他去做。另外，别忘了问他：“你要到多晚才能干完这事？&quot;或“你早上几点来的？”对这样的关注，他会领情的。&lt;/li&gt;
&lt;li&gt;你看他工作自觉，会想提拔他。如果此举使他不能继续发挥优势，就不可取。不如指出他的其他主题和优势，找机会让他多做他所胜任的工作。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;行动（Activator）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;“我们什么时候可以开始？”你最爱问这个问题。&lt;/li&gt;
&lt;li&gt;你急不可耐地要行动。你也许会同意，分析自有它的作用，争辩和讨论有时也不真知灼见。但你深知，没有行动，一切皆为空谈。惟有行动才能做事情。惟有行动才能出业绩。&lt;/li&gt;
&lt;li&gt;一旦作出决定，你就必须行动。别人或许会担忧，“还有些事我们不知道”，但是你不会因此而放慢步伐。如果决定通过城区，你便认定到达目的地的最快途径就是从一个红绿灯走到下一个红绿灯，而不会坐等所有的灯都变绿。&lt;/li&gt;
&lt;li&gt;此外，在你看来，行动和思考并不互相排斥。事实上，在你的行动才干指引下，你确信最好的办法是干中学。&lt;/li&gt;
&lt;li&gt;你作出决定，采取行动，检验结果，继而学习和进步。在学习的基础上，你决定你未来一步接一步的行动。如果你没有作出反应的对象，你怎么能够进步？你的答案很简单，不能。&lt;/li&gt;
&lt;li&gt;你必须不断冲锋陷阵，你必须不断走出下一步。否则，你如何保持思维敏锐我耳聪目明？这就是你的底线：你深知评判你的标准不是你的言辞，也不是你的思想，而是你的行动。你丝毫不为此感到畏惧。恰恰相反，你感到快慰。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理&quot;行动”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;向他了解你所在部门的新目标是什么，应该怎样改进。为他选择一个合适的岗位，并让他负责发起和组织项目。告诉他，你知道他能干，并且你在关键时刻会向他求助。你的期望会给他以激励。派他领导，一个陷入惰性，光说不干的团队。他会把他们煽起来。&lt;/li&gt;
&lt;li&gt;如果他抱怨，要认真听——你可能从中了解到一些情况。但随后你应与他讨论如何率先创新和改进，从而使他同你保持一致，但你的动作要快，如果不加管束，他就会到处散布消极言沦。&lt;/li&gt;
&lt;li&gt;了解他的其他重要主题。他如果”统率”才干突出，就可能具有推销和说服的潜力。他如果“交往”和“取悦”主题突出，就可能成为一名优秀的招聘人员，为你广招人才，并帮助他们敬业&lt;/li&gt;
&lt;li&gt;为帮助他避开障碍，寻找“战略”或“分析”才干突出的人与他合作。他们可以帮助他总揽全局。然而，你有时需要为他辩护，以免他们对预测和分析的热衷干扰他的行动本能。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;适应（Adaptability）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你生活在当前。你不把未来视为固定的目的地。&lt;/li&gt;
&lt;li&gt;相反，你认为未来是你在现有选择的基础上创造出来的。因此，你通过选择逐一发现你的未来。这并不意味着你没有计划。你很可能有。但你的适应主题使你能够自愿地对眼前需求作出反应，即使此举使你偏离原有计划。&lt;/li&gt;
&lt;li&gt;你与有的人不同，并不讨厌突如其来的要求或出乎意料的曲折。你对此有料在先，它们是不可避免的。事实上，在某种意义上，你期待它们发生。&lt;/li&gt;
&lt;li&gt;你本质上是一个非常灵活的人，即使工作的不同需求把你东拉西扯，你仍能保持高效率。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“适应”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;这种人天生善于随机应变。把他放在合适的位置上，使他充分发挥应变能力，继而取得成功。告诉他你的打算。但是，除非他“专注”主题突出，别指望他帮你出谋策划。他很可能发现大部分计划工作都极其乏味。由于他天生灵活多变，因而他适合于几乎所有的团队。如果出了差错，他会及时根据新情况调整，并努力进展。他不会置身事外而怨天尤人。&lt;/li&gt;
&lt;li&gt;他最适合执行需要立即行动的短期任务。他更希望生活中频繁短兵相接，而不是打持久战。了解他的其他重要主题。如果他还有“体谅”才干，就让他去做随时识别和满足顾客各种需求的工作。如果他还有‘伯乐”主题，就让他去当辅导员。由于他“随遇而安”，他就能建立一种&lt;/li&gt;
&lt;li&gt;鼓励别人尝试和学习的良好氛围。不要让他参与讨论未来，如制定目标或职业咨询一类的会议。他是一个‘’关注眼前”的人，会认为这些会议与他毫不相干。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;分析(Analytical)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你的分析主题向别人挑战：“证明它。告诉我为什么你的结论是对的。”面对此种质疑，某些人将发现他们自鸣得意的理论会枯萎和互解。而恰恰是你的目的。&lt;/li&gt;
&lt;li&gt;你无意扼杀别人的观点，但你认定，他们的理论必须经得起检验。&lt;/li&gt;
&lt;li&gt;你自视客观和冷静。你喜欢数据，因为它们既不包含特定的价值观念，又没有特殊的目的。有了数据的武装，你就寻找模式和关联，你想了解某些模式如何互相影响。它们如何组合？它们有什么结果？这个结果是否与所提出的理论或面临的情形相符？这就是你的问题。&lt;/li&gt;
&lt;li&gt;你将表层逐一剥开，直至揭示其中的根源。别人认为你思维逻辑严谨。久而久之，他们就习惯于请你用你的严谨思维来剖析某些人的“异想天开”和“愚钝”。但愿你的分析不要表述得太尖刻，否则，如果“异想天开”的是他们自己，他们就会刻意回避你。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“分析”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;无论他何时参与一项重要决策，花时间与他一起深入思考各种问题。他希望了解影响决策的所有因素。如果你在解释一项已经做出的决策，切记讲明其逻辑依据。你可能觉得这是多费口舌，可对他来说，惟有充分了解决策细节，才能为之承担义务。&lt;/li&gt;
&lt;li&gt;一有机会，你就应对他的推理能力表示认可和赞赏。他为白己思维的严谨而自豪。在为一项决策或原则辩护时，向他展示数字依据。他本能地更加相信含有数据的信息。&lt;/li&gt;
&lt;li&gt;切记，他需要经过认真推敲的准确数字。切勿把虚假数据充作可靠证据提供给他。他的生活亮点就是在数据中发现规律。不断给他机会向你详细解释其所见规律。这是对他的激励，并有助于巩固你们之间的关系。你虽然不会始终与他一致，但须认真考虑他的意见。他很可能经过了深思熟虑。&lt;/li&gt;
&lt;li&gt;鉴于他关注工作的精确性，准确完成任务比准时完成任务对他更重要。因此，在任务期限将至时，应经常与他核对进度，确保他有足够的时间避免差错&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;统筹（Arranger)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你是一名乐队指挥。当你面对一个涉及多种因素的复杂环境时，你喜欢设法管理所有的变数，将它们反复排列，直至你确信形成最佳组合。在你看来，此种行为毫无特别之处。你不过是试图琢磨出做事的最佳方案而已。然而，其他人由于缺乏这一主题，对你的本领瞠目结舌。“你的脑袋里怎么能同时装这么多事情呢？他们会问。”你怎么能保持如此灵活，如此不假思索地放弃经过深思熟虑的计划，转而采取你突发奇想的全新方案呢？“但是你无法想象其他的行为方式。&lt;/li&gt;
&lt;li&gt;你是高度灵活性的杰出代表。如果你发现一个更优惠的票价，你就会在最后一刻突然改变旅行计划。同样，你会绞尽脑汁，思考完成一个新项目的最佳人员和资源组合。你事无巨细，总在寻找最佳配置。毋庸置疑，形势越是变化无常，你越能出神入化。&lt;/li&gt;
&lt;li&gt;有的人面对不测，会一口咬定，经过精心策划的计划不容更改，而另一些人则躺进现有的规则和程序中。你却不然。你奋身投入混乱的局面，设计新方案，搜寻新捷径，思考新合作——因为说到底，总有可能找到更好的方案。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“统筹”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;这样的人喜欢负责，应根据他的知识和技能水平让他尽量多负责。他或许有当经理或主管的才于。他的“统筹”主题帮助他了解具有不同优势的人怎样合作。&lt;/li&gt;
&lt;li&gt;开始实施一个项目时，给他机会来挑选和分派项目组成员。他善于判断每个成员的优势怎样为团队带来最大价值。复杂和多层面的任务使他振奋。他同时承担多项工作时最得心应手。&lt;/li&gt;
&lt;li&gt;他足智多谋。你可以放心派他担任一件困难的’I二作。他乐于寻找做事的其他途径。关注他的其他突出主题。他如果有“纪律”才于，就可能是一名优秀的组织者，为完成任务而建立程序和体制。&lt;/li&gt;
&lt;li&gt;他靠相互信任的人际关系来建设团队。他拒绝那些他认为不诚实或敷衍了事的人。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;信仰（Belief)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果你有很强的信仰主题，那你就会持有某些经久不变的核心价值。这些价值因人而异，但你的信仰通常使你关注家庭，乐于助人，甚至追求灵性。&lt;/li&gt;
&lt;li&gt;无论对已对人，你都珍视责任和伦理。这些核心价值以多种方式影响你的行为，它们赋予你的生活以意义和满足——在你看来，金钱和名望并不完全代表成功。它们为你指明方向，指引你排除生活中的种种引诱和干扰，朝着恒定的目标前进。这种恒定性是你建立所有关系的基础。&lt;/li&gt;
&lt;li&gt;你的朋友认为你为人可靠；他们会说：“我知道你是什么立场。”你的信仰为你赢得信任。它还要求你从事与你的价值观相符的工作。你的工作必须有意义，必须“有分量”。因为你受到你的信仰的指引，所以你的工作惟有使你有机会实践自身价值观时才是有意义的。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“信仰”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;这样的人对某些事怀有激情。了解他的激情所在并将它与工作任务相联系。他可能笃信某些经久不变的价值。设法将他的价值与公司的价值相结合。例如，告诉他，公司的产品和服务如何使人们的生活更美好，或与他讨论公司如何体现诚信，或给他机会来千。&lt;/li&gt;
&lt;li&gt;方百计地帮助同事与客户。如此，他就会用自身言行来体现公司文化的价值。了解他的家庭和社区。他可能对此负有重大义务。你必须理解、领会和尊重这些义务，他也会因此而尊重你。要知道，他可能更看重提高服务质量，而不是多赚钱。设法加强这种天生的服务意识，他就会出彩。&lt;/li&gt;
&lt;li&gt;你虽然无须赞同他的信仰体系，但必须理解、尊重和使用它。你如果不能将他的价值用于你自己或公司的目标，就应帮助他换工作，否则你们之间最终会爆发激烈冲突。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;统率（Command)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;统率主题促使你实施指挥。与有的人不同，你对将自己的观点强加于人并无不适。相反，你一旦形成观点，就必须与人分享。&lt;/li&gt;
&lt;li&gt;你一旦确定目标，就要用它来统一众人的思想，否则就会坐立不安。&lt;/li&gt;
&lt;li&gt;你不怕对立；相反，你确信对立是解决难题的第一步。其他人可能对生活的不快讳莫如深，你则感到必须陈述事实或真理，无论它们多么令人不快。&lt;/li&gt;
&lt;li&gt;你需要在人们之间扫除误会；因此，你要求他们明辨是非，开诚布公，你推动他们承担风险，甚至会为此而逼迫他们。虽然有人会对些表示厌恶，指责你刚愎自用，但他们又常常会自愿让你掌舵。人们往往拥戴那些立场鲜明的人，那些确定方向，然后率领他们前进的人。人们会拥戴你。你一呼百应，你发号施令。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“统率”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;如果需要重新启动一个项目，打通障碍，或说服别人，就让他领头。经常请他判断公司现状。他会直言不伟。同样，让他提出与你不同的想法，他不会随大流。&lt;/li&gt;
&lt;li&gt;放手让他领导和决策。他不喜欢别人管头管脚。如果他拉帮结派、冒犯同事、一心二用，或不务正业，要抓住证据，当头棒喝。行动要果断，并视情况要求他将功补过。然后作出适当安排，使他尽快创造效益。他会很快纠正错误，你也应向前看。&lt;/li&gt;
&lt;li&gt;除非你说到做到，否则切勿威胁他。他可能以毫不掩饰的武断方式威逼别人。你必须权衡他的功绩能否使你宽恕他偶然发怒。与其强迫他学会体谅和礼貌，不如多花时间帮助他的同事了解，他的固执己见有助于提高效&lt;/li&gt;
&lt;li&gt;率——前提是他的固执己见不演变为咄咄通人和出口伤人。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;沟通（Communication)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你喜欢解释、描述、主持、演讲和写作。这是你的沟通主题在起作用。&lt;/li&gt;
&lt;li&gt;概念索然无味，事件平淡无奇，你需要将它们激活，使它们生机勃勃，激动人心，引人入胜。所以你就把事件编成故事，频繁讲述。你用形象、案例和比喻赋予枯燥的概念以生气。&lt;/li&gt;
&lt;li&gt;你认为大部分人注意力甚短。他们天天受到信息的轰击，但所记寥寥。你希望你所传达的信息——思想、事件、产品的特征和功能、发明或一堂课——被人铭记。&lt;/li&gt;
&lt;li&gt;你想把他们的注意力吸引过来，然后捕捉和锁定它。这种愿望驱动你搜寻完美的语句，使你陶醉于生动而富有感染力的词汇组合。正因为如此，别人乐于听你侃侃而谈。你用语言勾画的图象激发他们的兴趣，澄清他们的眼界，并激励他们去行动。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“沟通”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;与他共同探讨如何加强他的沟通优势，继而为公司作出更大贡献。他善于交谈。请他参加社交活动、晚宴或任何你希望款待现有和潜在客户的恬动。&lt;/li&gt;
&lt;li&gt;鼓励他搜集公司内部的传奇和趣事，然后创造机会让他对同事讲述，他会活跃公司文化，继而增强它。抽空了解他的生活与经历。他会乐于讲述，你会乐于倾听，你们之间的关系会因此而更加亲密。&lt;/li&gt;
&lt;li&gt;同他讨论公司的社交活动计划。对于如何招待客人和传递什么信息，他往往有好主意。请他帮助公司专业人员改进演示效果。有时，应安排他代替专业人员作演示。&lt;/li&gt;
&lt;li&gt;如果派他参加演说培训，切记把他送到有一流培训师任教，而且人少的高级班。他在初级班中很快就会厌烦。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;竞争（Competition)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;竞争扎根于比较。当你环视四周时，你本能地意识到别人的业绩。他们的业绩就是你的最终标尺。&lt;/li&gt;
&lt;li&gt;无论你如何苦干，无论你的动机如何高尚，如果你仅仅达到自身目标，但未能傲视同侪，你就会感到现有的成就空洞无物，如同所有的竞争者，你需要其他人。&lt;/li&gt;
&lt;li&gt;你需要比较，因为如果你能比较，你就能竞争，而如果你能竞争，你就能取胜。一旦取胜，你就能感受到无与伦比的快慰，你喜欢测量，因为它有助于比较。&lt;/li&gt;
&lt;li&gt;你喜欢其他竞争者，因为他们使你振奋。你热爱比赛，因为它们必定产生一个赢家。你尤其喜欢胜券在握的比赛。虽然你对你的对手彬彬有礼，甚至能做到虽败尤荣，但你参加比赛绝不是为了取乐，而是为了取胜，你最终会避免参加取胜无望的比赛。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“竞争”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;对他使用竞争语言。例如，对他来说，这是一个非胜即败的世界，而在他看来，达到目标就是胜利，未达目标就是失败。当你需要他参与制定计划或解决问题时，使用“以智取胜”的竞争字眼。把他与其他人、特别是其他好胜的人比较。你可能公布全体员工的业绩，但须牢记，惟有好胜的人才会从公开对比中获得激励。其他人则会讨厌它，甚至感到屈辱。&lt;/li&gt;
&lt;li&gt;为他安排竟赛。让他与其他人竞争．甚至可以从外部找对手。竞争欲极强的人希望与水平相近的人竞争，他们对与弱者竞争不感兴趣。帮他寻找能获胜的场合。如果屡战展败，他就可能洗手不干。切记，在他看重的竞赛中，他不会为赛而赛，他的目的是取胜。&lt;/li&gt;
&lt;li&gt;切记，管理他的一个最好的办法就是找一位能力更强的竟争者。与他讨论才干。一如所有竞争者，他深知，取胜需要才干。指出他的才干，告诉他，必须调动他的才干才能取胜。切忌对他实行“彼得法则”。提醒他，“获胜”并不等于提升。帮助他通过&lt;/li&gt;
&lt;li&gt;扬长避短而取胜。他失败时，可能痛苦一阵。由他去。随后迅速将他引入下一场有望取胜的竞争。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;关联（Connectedness)&lt;/h3&gt;

&lt;p&gt;凡事发生必有原因。你对些深信不疑。你深信不疑，是因为你从心底里认为我们都是相互关联的。诚然，我们各个有别，各自对自己的判断负责，并保持选择的自由。但是，尽管如此，我们仍然是宏观世界的一部分。有人称其为集体的下意识，还有人称其为灵性或生命之能。但无论你用何种语言，你一想到我们并不相互隔绝，也不与地球及其生命隔绝，就会备添信心。这种关联感包含了某些责任。如果我们都是宏观世界的一部分，我们就决不能害人，因为害人等于害已；我们决不能剥削，因为剥削别人等于剥削自己。你对这些责任的意识构成了你的价值体系。你为人周到、体贴和宽容。由于笃信人类大同，你为不同文化背景的人们构筑沟通的桥梁。仿佛有一只“看不见的手”在指引你，帮你开导别人超越日常琐事，而看到更高尚的目标。你的具体信仰固然取决于你的人生经历和文化，但是你的信仰十分坚定。它使你和你的朋友面对人生之秘而持之以恒。&lt;/p&gt;

&lt;h4&gt;如何管理“关联”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;对一些社会问题，他会极力辩护。认真倾听他的立场，了解是些什么问题。你的认同会加深与他的关系。他可能有宗教倾向，也可能是虔诚的教徒。你需要了解，并且．至少是接受他的宗教立场，如此，他与你相处就会越来越舒畅。&lt;/li&gt;
&lt;li&gt;鼓励他与公司中不同的人沟通。他生来就熟谙事务的内在联系，继而善于向不同的人说明他们如何相互依赖。如果定位准确，他会成为公司的团队建设能手。他会乐意帮助公司构思和定义使命。他喜欢成为大事业的一部分。&lt;/li&gt;
&lt;li&gt;你如果也有很强的“关联”全题，就与他分享文章、作品和经验，继而相互增强关注点。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;回顾（Context)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你往回看。你往回看是为了寻找答案。你往回看是为了了解当前。&lt;/li&gt;
&lt;li&gt;从你的制高点看去，当前变动无常，杂乱无章，惟有回首以往，回到策划之初，当前才重归平稳。以往是一个简明的时代，一个描画蓝图的时代。&lt;/li&gt;
&lt;li&gt;你回顾以往，目睹蓝图浮现，继而重归初衷。这些蓝图和初衷后来被装饰得面目全非，无从辨认，但是你的回顾主题使它们原形再现。这一认识使你充满信心。&lt;/li&gt;
&lt;li&gt;你排除了干扰，在了解事物内涵的基础上明智决策。由于了解同事们的来龙去脉，你就能更好地与其合作。并且，由于你看到未来的种子播撒在过去，反而更加明察未来。面对新人和新形势，你需要一些时间来适应。但你必须给自己留出这些时间。&lt;/li&gt;
&lt;li&gt;你必须迫使自己问这些问题。你必须让蓝图再现，因为无论情况如何，如果你未见蓝图，你就不可能对你的决定充满自信。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“回顾”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;如果要他做事，先花时间向他解释行动的构思过程。他在行动之前需要了解背景。你把他介绍给新同事时，要求后者先介绍个人背景，然后再谈正事。&lt;/li&gt;
&lt;li&gt;每次开会都请他作前阶段工作和学习的回顾，他本能地希望别人了解决策的来龙去脉。他喜欢通过案例思考。他会想，我们什么时候遇过类似的情况，我们做了了l·么，结果如何，我们从中学到什么？你可以指望他用这种才干去帮助别人学习，尤其是需要研究案例时。无论什么课题，都让他去搜集有意义的轶事，讲解从每件轶事中获得的重要发现，井围绕这些案例授课。&lt;/li&gt;
&lt;li&gt;他对公司文化能起相同作用。让他去搜集体现公司文化本质的先进事迹，在员工通讯、培训班、网站和录相上宣传推广，继而增强公司文化。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;审慎（Deliberative)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你为人谨慎，处世警觉。&lt;/li&gt;
&lt;li&gt;你是一个十分关注隐私的人。你深知世事难测，表面上一切井井有条，但深处危机四伏。你并不否认这些危险，相反，你把它们全部暴露在光天化日之下，逐一识别、评判、并最终消除。就此而言，你是一个十分认真的人，你对生活的态度是有所保留的。例如，你喜欢提前计划，以防不测。&lt;/li&gt;
&lt;li&gt;你谨慎地选择朋友，并避而不谈私事。你避免过度赞扬别人，以免被人误解。如果有人因为你不如别人热情洋溢而对你不满，那就随他的便。&lt;/li&gt;
&lt;li&gt;在你看来，生活不是一场取悦的竞赛，而更像一片雷场。其他人如果愿意尽可以不顾一切地跑过去，你则不然。你识别各种危险，判断其各自影响，然后小心地落脚，谨慎前行。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“审慎”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;切勿让他担任需要当机立断的工作。靠直觉决策会使他不安。让他加人好冲动的团队。他会劝人稍安毋躁，帮助团队深思熟虑和防患于未然。&lt;/li&gt;
&lt;li&gt;他考虑问题填密周到。决策前，请他帮你排除可能使你的计划出轨的隐患。在需要谨慎的时候，例如涉及法律、安全或精确度等敏感问题时，让他负责。他天生善于预见危险，继而保护你的侧翼。&lt;/li&gt;
&lt;li&gt;他很可能善于谈判合同，特别是在幕后出谋划策。尽量让他在权限之内发挥这个作用。尊重他的隐私。除非他有意，避免过早与他套近乎。同理，如果他刻意保持距离，你不必往心里去。&lt;/li&gt;
&lt;li&gt;不要派他为公司送往迎来，充当说客或拉关系。干这行需要热情奔放，非他所长。他在交友方面是有选择的。因此，切勿将他频繁调动。他需要确信周围的人胜任本职并可以信赖，而建立这种信心非一日之功。&lt;/li&gt;
&lt;li&gt;作为经理，他往往不会轻易表扬部下，而他一旦表扬，就一定是真的优秀。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;伯乐(Developer)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你能发现别人的潜能。事实上，你常常只关注潜能。在你看来，没有人十全十美。相反，每个人都是“正在加工”中。&lt;/li&gt;
&lt;li&gt;每个人都充满可能。而正因为如此，你对他们备加关注。你与别人交往的目的是帮助他们安排各种有趣的经历，来增强他们的能力，帮助他们成长。&lt;/li&gt;
&lt;li&gt;你孜孜孜不倦地搜寻他们进步的蛛丝马迹——稍有改变的举止，日趋精湛的技能，偶露峥嵘的佳绩，蹒跚学步变成“行云流水”。&lt;/li&gt;
&lt;li&gt;有人对这些细微的变化视而不见，而你却从中辨认出得到发挥的潜能。别人的进步如同燃料，给予你力量和满足。久而久之，许多人会向你寻求帮助和鼓励，因为他们深知你的相助是真诚的，并能为你自身带来快慰。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“伯乐”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;向他了解哪些员工在工作中进步。他能看见别人容易忽视的点滴进步。大胆使用他，使他能帮助其他员工成长。例如，给他机会辅导一两个他自己挑选的员工，或让他选一个公司关心的题目授课，如安全、福利或客户服务。&lt;/li&gt;
&lt;li&gt;他如果参加当地一个培训组织，替他交纳会费。让他出面表扬优秀同事。他乐于寻找值得表扬的业绩，而被表扬的员工会知道，对他们的表扬是名副其实的。&lt;/li&gt;
&lt;li&gt;他可能是担任主管、团队负责人或经理的人选。如果他已是经理或高层主管，从他所在部门挑选公司其他部门需要的干部。他善于培养在未来担当重任的人才。&lt;/li&gt;
&lt;li&gt;增强他催人奋进的自我意识。例如，告诉他：“他们靠自己永远也不会打破纪录。你的鼓励和信心使他们奋起。”要提防他保护一些苦苦挣扎、早该解职的员工。引导他把“伯乐”才干用于帮助强者取得成功，而不是支持陷人困境的弱者。他对陷人困境的人的最大帮助就是为他另辟蹊径，寻找可能使他出彩的机会。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;纪律（Discipline)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你的世界必须可以预测，必须井井有条，规划有序。因此，你本能地将你的世界规范化。&lt;/li&gt;
&lt;li&gt;你建立常规，制定时间表，规定完成任务的日期。&lt;/li&gt;
&lt;li&gt;你把长期项目分解为一系列具体的短期计划，然后锲而不舍地逐一实施。&lt;/li&gt;
&lt;li&gt;你并不一定整洁有序，但你的确要求精确。面对生活中内在的混乱，你需要建立控制感。别人由于缺乏这种规律主题，有时可能厌恶你建立秩序的需求，但这未必导致冲突。&lt;/li&gt;
&lt;li&gt;你必须了解，并非人人都像你一样渴求预测，他们自有其做事之道。同样，你也可以帮助他们理解、甚至赞赏你对规范的需求。&lt;/li&gt;
&lt;li&gt;你讨厌意外，憎恶失误，建立常规，注重细节——所有这些无须被视为意欲束缚别人，而应被视为你的一种本能的方法，旨在摈除生活的诸多诱惑，确保进步和效益。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“纪律”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;给他机会整顿混乱局面。由于他天生受不了无序和混乱，如果不把局面收拾得井井有条，他是不会罢休的。杂乱会惹恼他。不要指望他在脏乱差的环境中呆下去。要么派他收拾局面，要么帮他换地方。&lt;/li&gt;
&lt;li&gt;切记向他说明任务期限。他会觉得有必要提前完成任务。如果你不事先告知工作计划，他就无法这样做。同样，不要随意改变计刘和工作重点，以免他感到意外。他讨厌意外，它们会使他垂头丧气。&lt;/li&gt;
&lt;li&gt;如果一段时间内有许多事要做，切记他需要区分轻重缓急。与他一起制定计划。一旦决定，切勿随意改变。视情况请他帮助你自己制定计划和安排工作。你可以请他来评估你的时间管理系统，甚至你对本部门进行部分流程再造的动议。告诉他的同事这是他的优势，并鼓励他们在类似方面向他求助。&lt;/li&gt;
&lt;li&gt;他善于为提高效率而建立常规。如果他不得不在需要灵活性和随机应变的环境中工作，鼓励他针对各种不同的环境，建立不同的常规。这样，无论发生什么特殊情况．他都有章可循。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;体谅(Empathy)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你善解人意。你能体会到他人的感觉，就你体会你自己一样。&lt;/li&gt;
&lt;li&gt;你能凭直觉通过他们的眼睛看世界，并分享他们的观点。你未必赞同每个人的看法。你未必怜悯每个人的困境。那是“同情”，而不是体谅。你未必赞成每个人的选择，但你的确理解他们，而这种理解的本能是威力无穷的。&lt;/li&gt;
&lt;li&gt;你能听到无声的提问。你能预料到需求。别人为寻找词汇而搜索枯肠，你却总能找到恰如其分的词汇和语调。&lt;/li&gt;
&lt;li&gt;你帮助别人寻找合适的语句向自己或他人表达情感。你帮助他们倾诉其情感生活。由于所有这些原因，其他人被你所吸引&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“体谅”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;请他帮助你了解公司中某些人的想法。他对别人的情绪非常敏感。.　　在要求他对某个行动方案承担义务之前，了解他和其他有关人员对此的感受。对他来说，情感与其他一些更为实际的因素一样不容忽视，务必在决策时仔细权衡。&lt;/li&gt;
&lt;li&gt;他如果哭，应予关注，但切忌反应过度。他的生活离不开眼泪．他感受别人的喜怒哀乐，甚至会超过当事人。&lt;/li&gt;
&lt;li&gt;帮助他认识到，他的“体凉”是一种特殊才干。也许他会想当然地认为别人的感受与他一样，也许他会为他的感知力而不安。告诉他如何用它来使大家获益。测试他靠本能而不是靠逻辑决策的能力。也许他说不清为什么他认为采取某种行动是对的，但他常常又是对的。问他：你从骨子里觉得我们该做什么？&quot;&lt;/li&gt;
&lt;li&gt;安排他与积极乐观的人共事。他会受这些人的感染，继而产生动力。反之，防止他与消极悲观的人接触。这些人会使他消沉。如果员工或顾客对一项举措表示不解，向他求助，他或许能感知他们的疑问&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;公平(fairness)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;平衡对你很重要。你深知需要公平待人，无论其社会地位如何。因此，你不希望天平过于倒向任何个人。&lt;/li&gt;
&lt;li&gt;你确信这将导致自私自利而获得不公平的优势。你对此深恶痛绝。你自视抵御这种倾向的卫士。与这种裙带世界载然相反，你深信只有在规则明确而人人适用的恒定环境中，才能发挥每个人的最大潜能。因为在这样的环境中，每个人都了解对其的期待，一切都可以预测并不偏不倚。一切都公平。在这里，每个人将有平等的机会施展才华。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“公平”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;在项目完成后对团队成员进行表扬时，让他指出每个人的贡献。他会确保每个受表扬的人当之无愧。当你需要建立常规时，清他来协助制定公司的规章制度。&lt;/li&gt;
&lt;li&gt;遇到重大变化时给予他支持，因为他最喜欢那些他认为效果良好并便于把握的工作模式。进行分析时，要他使用群体数据而不是个体数据．他可能更善于发现群体共性，而不是个人特点。&lt;/li&gt;
&lt;li&gt;如果你作为经理，遇到必须公平而严格地执行规章，不得有丝毫偏袒的棘手情况时，请他参与处理。他自然会作出解释，讲明道理。在必须公平对待不同人的场合，请他参与制定规章制度。&lt;/li&gt;
&lt;li&gt;他是一个讲究实际的人，更喜欢完成任务和作出决策，而不愿参加诸如头脑风暴或长期规划的抽象工作。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;专注(Focus)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;“我正走向何方？”你扪心自问。这一问题每天都萦绕脑际。&lt;/li&gt;
&lt;li&gt;在专注主题的指引下，你需要一个明确的目的地。没有它，你很快就会对自己的生活和工作一筹莫展。因此，每年，每月，甚至每周，你都在制定目标。这些目标如同罗盘，帮助你确定重点，并进行必要的修正，以保持航向。&lt;/li&gt;
&lt;li&gt;你的专注主题十分强大，因为它迫使你进行过滤；你本能地判断某个行动是否有助于你达到目睹标；无助于此的便放弃。你的专注最终迫使你提高效率。毋庸讳言，这种模式的另一面是，它使你难以忍受拖延、障碍，甚至迂回，无论它们多么引人。这使你成为一名极其可贵的团队成员。当别人开始溜向“有趣的”岔道时，你会及时把他们带回正路。&lt;/li&gt;
&lt;li&gt;你的专注主题提醒每个人，如果一件事不能帮助大家通往目的地，那它就无关紧要。而如果它无关紧要，那就不值得为它浪费时间。你确保每个人都目不斜视。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理”专注”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;确定带时间表的目标，然后让他决定如何实现它们。如果让他控制工作进度，他就会效率最高。只要他认为有帮助，就定期与他碰头。定期碰头会使他振奋，因为他喜欢讨论目标和他为实现目标而取得的进步。问他希望多长时间见一次而来讨论目标。&lt;/li&gt;
&lt;li&gt;不要指望他对别人的情感始终保持敏感，因为相对于情感，他总把完成工作视为当务之急。如果他还有“体谅”才干，这种情况会有所缓和。尽管如此，切记这样一种可能性：他在实现目标的过科中可能毫不顾及别人的情感。&lt;/li&gt;
&lt;li&gt;他不喜欢变动无常的局面。为处理好这个问题，应使用他能理解的语言来对他解释变化。例如，使用“新的目标”和“新的成功标准”等字眼来讨论变化。这类字眼会使变化显得既有章法，又有目的。这是他天生的思维方式。让他参与有严格期限的项目。他会本能地遵守这些期限。一旦接手一个有明确期限的项目，他就会倾注全力，直到完成。&lt;/li&gt;
&lt;li&gt;让他参加时间管理培训。他天生不擅长于此，但鉴于他的“专注’‘主题推动他尽快向目标迈进，他会看重时间管理给他带来的高效率。切记，漫无边际的会议使他厌烦，因此，如果他在场，就应严格遵守议事日程。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;前瞻(Futuristic)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;“如果这样，那该多好……”你是个喜欢遥望天际的人。&lt;/li&gt;
&lt;li&gt;未来使你着迷。未来如同墙壁上的投影，在你眼中维妙维肖。这幅细致入微的图画催你奋进，奔向明天。虽然未来图景的具体内容取决于你的其他优势和兴趣——更好的产品，更好的队伍，更好的生活，或更好的世界——它将永远给你以灵感。&lt;/li&gt;
&lt;li&gt;你是一个幻想家，能看到未来的种种可能，并珍视这样的想象。当现实使你一筹莫展，而你周围的人又过于世俗时，你就会唤起对未来的憧憬，继而精力倍增，同时振奋别人。&lt;/li&gt;
&lt;li&gt;事实上，人们往往期待你描述对未来的种种遐想。他们希望看到一幅画卷，来提高他们的眼界，继而燃起激情。你能为他们描绘这幅卷。不断实践。字斟名酌，越生动越好。人们将拥抱你所带来的希望。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“前瞻”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;当你同他讨论事业或业绩时，切记他关注的是未来。请他描述他的愿景——关于事业、公司以及市场整体状况的愿景。给他时间去思考、描述和规划未来需要的产品和服务。为他开辟机会，让他在公司的内部通信、会议或行业会上阐述他的观点。&lt;/li&gt;
&lt;li&gt;如果得到他感兴趣的资料或文章，及时送给他‘，他的远见需要原料。请他参加公司的计划委员会。让他在数据基础上描述公司三年后的发展前景。每隔六个月左右让他重做一次报告。这样，他可以加人新的数据和见解。&lt;/li&gt;
&lt;li&gt;经常同他讨论各种可能性，以此激发他。多问他问题，鼓励他尽可能生动地描述未来。当公司需要员工接受变革时，请他从公司未来需要的角度来解释变革。请他作报告或写内部文章，帮助员工全面把握变革。他能帮助别人摆脱现有疑惑，继而像他一样为未来的美好前
景而激奋。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;和谐(Harmony)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你寻求共识。你认为，冲突和摩擦有害无益，所以你尽量将其化小。&lt;/li&gt;
&lt;li&gt;当你发现周围的人意见不一时，你力图求同存异。你力图使他们避免对抗，寻求和谐。事实上，和谐是你的核心价值。尽管无济于事，有人却总想将自己的的观点强加于人，这在你看来真是难以置信。我们如果避免固执己见，转而寻找共识和支持，岂非效益大增？你对此深信不疑，并照此原则待人处事。&lt;/li&gt;
&lt;li&gt;当别人鼓吹他们的目标、权益和神圣的信条时，你却守口如瓶。当别人朝着某个方向冲去时，你为了维系和谐，心甘情愿地修改自己的目标，以求与别人保持一致（只要他们的基本价值与你相符）。当别人为他们钟爱的理论或概念大发宏论时，你却避开争论，宁可讨论有可能建立共识的实际问题。&lt;/li&gt;
&lt;li&gt;在你看来，我们都在一条船上，必须同舟共济。这是条好船，大可不必为了逞能而乱晃它。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“和谐”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;尽量使他远离冲突。不要让他参加几乎肯定会发生争执的会议，因为与人争辩不是他的强项。确定你在哪些方而赞同他的意见，并与他定期回顾这些一致意见。安排具有“和谐”主题的员工与他共事。他如果知道别人在支持他，就会更专注，效率更高，并更有创造性。&lt;/li&gt;
&lt;li&gt;不要浪费时间同他讨论有争议的问题。他不喜欢一单纯的辩论。相反，与他集中讨论可以采取明确行动的实际间题。不要指望他对你提出不同意见，即使你犯错。尽管他已看出你的想法是馊主意，但为了保持和气，他仍会点头称是。因此，你可能需要其他能直抒己见的人来帮助你清醒思考。&lt;/li&gt;
&lt;li&gt;有时，当别人争执不下时，他能使他们言归于好。他未必能解决争端，但能帮助他们求同存异。这些共识会成为再度合作的出发点。他希望对自己的行动建立信心。他每次行动，都应帮助他争取权威人士和专家的支持。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;理念(Ideation)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你为理念而痴迷。什么是理念？理念就是概念，就是对大部分事件的最合理的解释。&lt;/li&gt;
&lt;li&gt;当你透过复杂的表层，发现一个精彩而简明的概念，继而解释事物的本质时，你会喜不自胜。理念是一种关联。你的头脑总在寻找关联；因此，当表面截然不同的现象被某个不起眼的纽带联系在一起时，你会感到新奇。一个理念是对习以为常的挑战的全新见解。&lt;/li&gt;
&lt;li&gt;你乐于将我们熟知的世界转一个圈，让我们从一个陌生但充满新意的角度看它。你喜爱所有这些理念。因为它们深刻。因为它们新颖。因为它们能正本清源。因为它们引发争论。因为它们怪诞。由于所有这些原因，每当你产生一个新理念时，你都为之一振。&lt;/li&gt;
&lt;li&gt;别人可能视你为锐意创新、标新立异、富于理性或聪明过人。也许这些你都是。谁能说得准呢？你确信无疑的是理念使你激动不己。而大数日子里，这就足够了。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“理念”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;他富有创意。务必将他安排在能出好点子的地方。他善于设计，无论销售战略、营销攻势、顾客服务方案还是新产品，都会格外有效。无论他是什么专业，都应尽量发挥他的设计才干。既然他爱想点子，就向他多多灌输公司关注的新观念。他不仅会对自身工作更投人，而且会利用这些新观念寻找新的见解和发现。&lt;/li&gt;
&lt;li&gt;鼓励他思考能与公司最佳客户分享的好点子或见解。盖洛普的研究表明，如果一家公司能有意识地教顾客一两招，他们就会提高忠实度。他喜欢词汇的威力。因此，每当你遇到一个能准确表述一种概念、观点或模式的词组时，务必与他分享。这样做会激励他思考。&lt;/li&gt;
&lt;li&gt;他需要确知一切都珠联璧合，天衣无缝。所以，在作决定时，向他说明，每一项决定都源于同一种理论或概念。如果一项决定．与整体构想偶尔冲突，务必向他讲明，这一决定是个例外或是一次试验。如不解释，他就会担心公司步调不一。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;包容(Inclusiveness)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;“扩大圈子”，这就是你的人生准则。你希望拉人入伙，使他们感到自己是团队的成员。有的人只参加排外的小团体；你截然不同，处处避免排外团体。你希望扩大团体，使尽可能多的人受益于团体的支持。&lt;/li&gt;
&lt;li&gt;你最不愿目睹有人站在圈外旁观。你请他们进来，给他们温暖。&lt;/li&gt;
&lt;li&gt;你天生是一个来者不拒的人。无论什么种族、性别、国籍、性格，还是信仰，你从不妄作评判。评判可能伤及他人的感情，不到万不得已，何必这么做呢？&lt;/li&gt;
&lt;li&gt;你之所以来者不拒，并不是因为你深信人各有别，继而应当彼此尊重差异，而是因为你确信我们在本质上彼此相同。我们一样重要。因此，谁也不应被忽视。我们每个人都有份。这是我们的基本权利。“&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“包容”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;他热衷于使每个人都感到自己是团队一员。请他编写新员工入门课。他会乐于思考如何欢迎新成员。请他领导一个特别小组来招聘少数民族雇员。他天生善于判断谁受到冷遇。&lt;/li&gt;
&lt;li&gt;举办集体活动时，请他动员每个人参加。他会力争不漏掉任何个人或团组。同样，你可以利用他的“包容”主题，为顾客服务。只一要定位恰当，他能有效消除顾客与公司之间的屏障。&lt;/li&gt;
&lt;li&gt;鉴于他不喜欢针对少数人的高档产品或服务，让他参与为大众市场提供产品或服务。他喜欢设计各种方法来扩大服务网。,在其些情况下，请他担任公司与所在社区的社会服务部门之间的联系人。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;个别(Individualization)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你的个别主题使你对每个人的与众不同之处兴趣盎然。&lt;/li&gt;
&lt;li&gt;你不能容忍一概而论或简单归类，因为你不想抹煞个人特点。相反，你关注个人差异。你本能地观察每个人的风格、动机、思维方法和交际方式，倾听其独一无二的生活经历。这一主题说明为什么你能为朋友选择恰到好处的生日礼品；为什么你知道有人喜欢，而有人讨厌当众受表扬；为什么你能因为施教，对有的人手把手地教，而让别的人“自己琢磨”。&lt;/li&gt;
&lt;li&gt;由于你密切观察别人的优势，你就能使每个人真正人尽其才。这一个别主题还有助于你建立高效的团队。有人寻求完美无缺的团队“结构”或“过程”，而你的直觉告诉你优秀团队的秘诀在于根据个人优势分配工作，使每个人都能多做他们最擅长做的事。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“个别”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;让他参加职务选拔委员会的工作。他能准确判断每个候选人的优势和弱点。&lt;/li&gt;
&lt;li&gt;请他根据每个人的优势和弱点来说明其所胜任的工作，继而帮助公司提高效率。让他帮助设计绩效薪酬方案，使每个员工都能利用自身优势而实现薪酬最大化。&lt;/li&gt;
&lt;li&gt;如果你觉得了解一名员工的思想有困难，就向他求助。他能帮助你从员工的角度想问题。当你对个别员工的表现不满时，就与他讨论对策。他天生善于区别对待每个员工。&lt;/li&gt;
&lt;li&gt;视情况请他担任公司内部培训班的教员，或辅导一些新员工。他的绝招是因材施教。观察他的其他重要主题。他如果有突出的“伯乐”和“统筹”才干，就可能具备当经理或主管的潜力。他如果有“统率”和“取悦”的优势，就可能善于变潜在客户为现实客户。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;搜集(Input)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你充满好奇。你爱攒东西。&lt;/li&gt;
&lt;li&gt;你可能搜集各种信息，譬如词汇、事实、书籍和语录。你也可能搜集有形的东西，如蝴蝶、垒球卡、瓷娃娃或老照片等等。无论你搜集什么，你这样做是因为你感兴趣。&lt;/li&gt;
&lt;li&gt;你好奇心不泯。世界的激动人心之处就在于其多姿多彩，变幻无穷。如果你博览群书，你的目的未必是完善你的理论，而是积累更多的信息。如果你喜欢旅行，那是顺为在新的地点你能发现新奇的文物和轶事。这一切均可供收藏。&lt;/li&gt;
&lt;li&gt;为什么它们值得收藏呢？你在收藏之时，常常说不清什么时候或为什么需要它们，可谁能说准它们什么时候用得着呢？由于想到各种用途，你什么都舍不得丢弃。所以你不断搜集、整理和储存坛坛罐罐。这很有趣，它使你思维常新。而且，也许某一天，有些东西会变得很珍贵。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“搜集”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;利用他天生的好奇心，要他研究对公司至关重要的课题。他喜欢从研究中获得知识。安排他担任有大量研究任务的工作。&lt;/li&gt;
&lt;li&gt;关注他的其他重要主题。他如果“伯乐”主题突出，就可能成为优秀的教员或培训师，以生动的实例和故事活跃课堂。不断向他传递公司内部的最新消息。他需要了解内情。把你认为他愿意了解和翻阅的文章和书籍送给他。&lt;/li&gt;
&lt;li&gt;鼓励他充分利用互联网。他会在网．上查找所需信息。他的调查虽然并不完个用得上，却有助于他保持自尊。帮助他开发一套信息储存系统，继而确保在他和公司需要时随时查询信息。&lt;/li&gt;
&lt;li&gt;每次开会，务必请他介绍情况。伺机鼓励他所作的回顾，可以说：“真叫人不敢相信。你总有我们要的资料。”&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;思维（Intellection）&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你喜欢思考。你喜欢思想活动。&lt;/li&gt;
&lt;li&gt;你喜欢锻炼你的大脑“肌肉”，把它们四面抻扯。这种对思想活动的需求有可能是专注的，专注的焦点取决于你的其他优势。例如，你可能努力解决一个问题，或酝酿一个创意，或了解另一个人的感受。另一方面，这种思维活动很可能漫无边际。思维的主题并不一定限定你思考的具体内容，它只是说你喜欢思考。&lt;/li&gt;
&lt;li&gt;你是一个喜欢独处的人，因为这样你才能沉思冥想。你性格内向。在某种意义上，你是自己最好的伴侣，因为你扪心自问，并在自己身上测试答案。&lt;/li&gt;
&lt;li&gt;当你把自己的实际作为与你所思考的所有想法相比时，你的这种自省可能会使你略为不满。此种自省也能导致你关注现实问题，例如当日所发生的事件，或你准备进行的一场谈话。&lt;/li&gt;
&lt;li&gt;无论它把你引向何方，这种不停的思考都是你生活中的一个固定内容。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“思维”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;思考使他精力充沛．要多加利用。例如，当你需要解释为什么要做一件事时，就请他为你全盘考虑，然后向你提供完美的解释。随时向他的思想挑战，不要犹豫。他不会觉得这是威胁，相反，他会将此看作你重视他的信号，继而受到激励。&lt;/li&gt;
&lt;li&gt;鼓励他找出整块的时间来思考。有些人认为，纯粹的思考不会产生效益，他的看法相反。思考使他思路更清晰，自信心更强。你如果需要对一些书籍、文章或建议进行评估，就请他审阅并提交报告。他喜欢阅读。&lt;/li&gt;
&lt;li&gt;同他详细讨论他的优势，他喜欢自省和自我发现。让他向部门同事阐述思想。与别人交流思想的压力会促使他不断完善和梳理自己的想法。&lt;/li&gt;
&lt;li&gt;让他．与“行动’”主题突出的人合作。后者会推动他将想法和主意付诸行动。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;学习(Leaner)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你热爱学习。你最感兴趣的题目取决于你的其他主题和经历。但无论是什么题目，你总是受到学习过程的吸引。&lt;/li&gt;
&lt;li&gt;过程，而不是内容或结果，最使你兴奋。从无知到熟练的扎实而执著的进程使你精力倍增。&lt;/li&gt;
&lt;li&gt;入门的快感；初学者背诵或实践学到的内容；掌握一门新技术而日益增强的信心——这些学习的过程深深吸引着你。&lt;/li&gt;
&lt;li&gt;你对学习的激情促使你参加各种成人教程——瑜伽、钢琴或研究生课程等等。它使你能在变动无常的环境中应付自如，无论是分配你完成一个应急项目，还是反复要求你在短时间内成为某个专题的行家。学习主题并不一定意味着你力图成为某个专题的专家，或追求伴随某种专业或学术头衔的荣耀。&lt;/li&gt;
&lt;li&gt;相比之下，更重要的是学习的“路程”，而不是具体结果。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“学习”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;分配他做需要在瞬息万变的环境中不落伍的工作。他喜欢保持自身锐气的挑战。他无论担任什么工作，都急于了解新情况，学习新技能，吸收新知识。不断为他创造新的学习条件，使他保持动力，以免他到别处寻找更好的学习环境，、例如加果他没有在职学习的机会，就鼓励他到本地学院或协会学习他感兴趣的课程。切记，他并不一定需要升职，而只是需要学习。他乐此不疲的是学习的过程，而不是学习的结果。&lt;/li&gt;
&lt;li&gt;帮助他根据所达到的标准和水平而记录学习的进步。祝贺他取得的每个进步。同样，鼓励他成为其所在领域的“行家里手”或“常驻专家”。安排他学习相关课程。务必用适当的证书和奖盘来认可他的学习成绩。安徘他与一位高手一起工作，后者将不断推动他学习更多的东西。&lt;/li&gt;
&lt;li&gt;请他主持内部讨论或作演讲。施教于人是最好的学习方式。为他的继续教育争取财务补贴。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;完美(Maximizer)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你的标准是优秀，而不是平均。&lt;/li&gt;
&lt;li&gt;把低于平均的的业绩稍微提高到平均之上需要艰苦努力，且无法使你满足。而把本已不俗的业绩转变成出类拔萃，需要相同的努力，但远比前者激动人心。&lt;/li&gt;
&lt;li&gt;你更愿与欣赏你优势的人相处。同样，你喜欢结交发现并培养自己优势的人。你避开力图修理你，使你样样精通的人。&lt;/li&gt;
&lt;li&gt;你不想终生哀叹自己的欠缺；相反，你想发挥你的天生优势。这样更开心，更有效，并且，与常人所思相反，要求更高。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“完美”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;他喜欢琢磨如何将正常的业绩最大化。他对把破东西修好不感兴趣。别让他担任需要不断解决问题的工作。&lt;/li&gt;
&lt;li&gt;他期望你了解他的优势，并看重他的价值。过多关注他的弱点会使他沮丧。约他详细讨论他的优势，策划如何从公司利益出发来运用这些优势。他会喜欢这种谈话，并就如何充分发挥优势而提出许多实际的建议。&lt;/li&gt;
&lt;li&gt;尽量帮助他开辟一条事业之路，并设计一项薪酬计划，使他在本职岗位上出类拔萃，他本能地希望沿着自身优势之路发展，而不喜欢为了多赚钱而偏离方向。请他领导一个特别小组来了解公司内部的先进事迹。他天生对佳绩好奇。请他帮助设计一个方案，来衡量和表彰每个员工的业绩。他乐于思考每个岗位上的杰出表现。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;交往(relator)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你的交往主题描述你对人际关系的态度。简言之，交往主题使你与熟人的关系更紧密。&lt;/li&gt;
&lt;li&gt;你未必羞于结交新人——事实上，你可能有其他主题，使你从结交新朋友中获得无穷乐趣——但你的确从保持密友交往中汲取巨大的欢乐和力量。&lt;/li&gt;
&lt;li&gt;你对亲密关系感觉自然。一旦与人结识，你就会有意深化关系。你希望了解他们的情感、他们的目标、他们的恐惧和他们的的梦想；你希望他们用相同的方式了解你。你深知这种密切关系不无风险——别人可能利用你——但你甘愿接受这种风险。&lt;/li&gt;
&lt;li&gt;对你来说，惟有真诚的关系才有价值。而相信检验关系是否真诚的惟一方式便是完全信任别人。你与别人分享的越多，你们共同承担的风险就越多。你们共同承担的风险越多，你们各自就能证明彼此关爱是真诚的。这就是你建立真诚友谊的步骤，而你这样做完全是心甘情愿的。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“交往”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;对他明说，你很在乎他。儿乎可以肯定，这话不仅不会使他感到不妥，而且会受他欢迎。亲朋好友是他的生活中心，因此他希望知道他与你关系如何。他喜欢与同事建立亲密关系。这样做需要时间，因此，不要让他担任需要他频繁离开同事和顾客的工作。&lt;/li&gt;
&lt;li&gt;帮助他了解同事们的目标。一旦知道他们的目标，他就更可能与他们打成一片。放心将秘密告诉他。他为人忠诚，珍视信任，不会背叛你。请他与你希望留住的骨干建立真正的信任关系。他能用良好的人际关系增进优秀人才对公司的忠诚。&lt;/li&gt;
&lt;li&gt;关注他的其他优势主题。他如果还有“专注”、“统筹”或“自信“主题，就可能具有管理的潜能。员工们如果知道自己的上司为他们着想和希望他们成功，一定会加倍努力工作。他能够轻而易举地建立起这种关系。&lt;/li&gt;
&lt;li&gt;宽宏大量通常是他的优势。提醒他予以关注，并告诉他，这一优势将帮助他影响周围的人并与他们建立联系。他会感谢你的关注。如此，你们之间的关系也将得到加强。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;积极(Positivity)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你慷慨赞人，笑容可掬，不失时机地捕捉亮点。&lt;/li&gt;
&lt;li&gt;有人说你无忧无虑。还有人但愿能像你一样乐观豁达。无论怎样，人们喜欢与你相处。&lt;/li&gt;
&lt;li&gt;有你在，他们的世界就更加美好，因为你的热情是如此富有感染力。由于缺乏你的精力和乐观，有的人感到他们的的世界重复而乏味，甚至压力重重。&lt;/li&gt;
&lt;li&gt;你似乎总能设法活跃他们的心灵。你为每个项目注入生机勃勃，激动人心。&lt;/li&gt;
&lt;li&gt;你由于精力充沛，会受到某些玩世不恭都的排斥，但你的积极主题使你很少灰心泄气。你内心深处确信：活着无比美好；工作充满乐趣；无论遇到什么挫折，都不应失去幽默感。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“积极”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;他为工作场所注人戏剧和动力。安排他尽量接近公司的顾客。他会使公司显得更加积极和充满活力。请他参与策划公司款待最佳顾客的活动，例如新产品发布会或用户聚会等。&lt;/li&gt;
&lt;li&gt;具备“积极”主题并不意味着他整天情绪高涨，但的确表明，他能用自身的幽默和情趣来提高人们的工作热情。提醒他关注这一优势，并鼓励他多加运用。与怨天尤人者在一起会很快耗尽他的活力。别指望他会喜欢为消极的人打气。如果让他为基本积极而需要点把火的人鼓劲，他会做得更好。&lt;/li&gt;
&lt;li&gt;他的热情具有感染力。把他派往项目组时应考虑这一点。他喜欢赞美。取得重大成就时，请他就如何表彰成就出主意。他比大多数人更有创意。&lt;/li&gt;
&lt;li&gt;关注他的其他优势主题。他如果有“伯乐”才干，就可能成为一名优秀的教练或教员，因为他能为教室注人激情。他如果有“统率”才干，就可能在销售上出类拔萃，因为他用果断和活力武装自己。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;责任(Responsibility)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你的责任主题促使你在心理上对你的诺言负全责。&lt;/li&gt;
&lt;li&gt;你一旦作出承诺，无论大小，你从感情上就觉得有义务将其完全落实。&lt;/li&gt;
&lt;li&gt;你的名声有赖于此。如果由于某种原因你不能兑现，你会自动寻找其他途径给对方以补偿。仅仅道歉是不够的。托辞和辩解是完全不可接受的。你不作出补偿，就会寝食不安。你的这种自觉性，这种几乎走火入魔的行为准则，这种无可挑剔的道德标准，使你作为完全可以信赖的人而美名四扬。当分配新任务时，人们会首先想到你，因为他们知道你说到做到。他们很快就会向你求助——但你必须有所选择，从而避免因为乐善好施而力不从心。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“责任”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;他的做人准则是履行诺言。与做不到这一点的人共事会使他痛苦难一言。尽量避免把他放在萎靡不振的团队环境中。他以自身工作的高质量为豪。如果你强迫他不顾质量而赶工，他就会反抗。他不喜欢为速度而牺牲质量。同他讨论工作时，先谈质量。&lt;/li&gt;
&lt;li&gt;切记，他做事主动积极，不需要监督就能完成分配给他的工作。让他担任需要严格遵守道德规范的工作。他不会让你失望。&lt;/li&gt;
&lt;li&gt;定期询问他愿意承担哪些新责任。他自愿承担新责任，并从中获得动力。因此，多给他机会。注意不要让他承担过多的责任，特别是如果他缺乏“纪律”主题的话。帮助他认清，如果于得太多，就可能“丢球”。而这是他所不乐见的。&lt;/li&gt;
&lt;li&gt;他说到做到，从不食言，令人称羡。也许你对他印象甚佳，继而决定提升他当经理。要小心。他可能宁愿自己做事．而不愿为别人的工作负责，因而不愿管理，遇到这种情况，帮助他另辟蹊径。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;排难(Restorative)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你热衷于排忧解难。其他人遇到新困难往往一筹莫展，而你却干劲倍增。&lt;/li&gt;
&lt;li&gt;面结分析症状、判断问题和解决问题的挑战，你无比兴奋。你可能会寻找你过去多次遇到并自信能解决的问题。或许当你遇到复杂而陌生的问题时最为激奋。&lt;/li&gt;
&lt;li&gt;你的具体偏好将取决于你的其他优势和经历。得可以肯定的是，你喜欢手到病除。判断故障，排除问题，起死回生，使你其乐无穷。&lt;/li&gt;
&lt;li&gt;你本能地感到，没有你的介入，这个东西——这部机器、这门技术、这个人、这家公司很可能会停转。你修好了它，救活了它，使它重燃生命之火。或者用你自己的话说，你拯救了它。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“排难”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;当你希望识别公司内部的问题时，请他发表意见。他往往有真知灼见。&lt;/li&gt;
&lt;li&gt;把他派去为你的最佳客户排优解难。他喜欢发现并排除障碍。当公司内部有情况需要立即改善时，向他求助。他不会畏惧，而会按部就班地专心应对。&lt;/li&gt;
&lt;li&gt;他解决一个问题后，切记赞扬他取得的成绩。对他而言，每一次拨乱反正都是一次成功，他需要你持相同观点。告诉他，其他人依靠他来排除障碍向前进。当他遇到特别棘手的问题时，给他支持。鉴于他以自身应变能力为豪，如果问题悬而未决，他就会产生失败感。帮助他克服挫折。&lt;/li&gt;
&lt;li&gt;了解他希望如何改进。把这些改进作为其后六个月的目标。他会感谢你的关注。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;自信(Self-Assurance)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在你心灵最深处，你对自己的优势充满信心。&lt;/li&gt;
&lt;li&gt;你深知你是个有能力的人——有能力冒风险，有能力接受新的挑战，有能力提出要求，并且更重要的是，有能力履行诺言。然而不仅如此，由于具有自信的主题，你不仅对自己的能力，而且对自己的判断充满信心。&lt;/li&gt;
&lt;li&gt;当你观察世界的时候，你深知你的视点与众不同。而由于没有人看问题的角度与你完全一样，你知道没有人能为你作决定；也没有人能告诉你如何去思考。他们能够引导，能够建议，但只有你才有权作结论，下决心，去行动。这种权威，这种对自身生活方向的终极负责，并不使你畏惧。相反，它对于你顺乎自然。无论碰到什么情况，你似乎总能悟出该做什么。这一主题给罩上一层神机妙算的光环。你与许多人不同，从不轻易被别人的论点所左右，无论他们多么巧言令色。&lt;/li&gt;
&lt;li&gt;这种自信既可能深藏不露，也可能一目了然，这取决于你的其他主题。但它根深蒂固，牢不可破。一如舰船的龙骨，能抵御各种压力，使你把稳航向。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“自信”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;让他担任有充分的自主决策空间的工作。他既不希望也不需要被人牵着手走。让他担任需要坚持不懈才能成功的工作。面对各种于扰，他有充分的自信把定方向。&lt;/li&gt;
&lt;li&gt;让他担任需要处变不惊的工作。在关键时刻，他的内在权威会使同事和顾客保持冷静。他自视行动代理人。应加强他的这一自我意识：对他说：“由你作主。你把这事办成了。”或者：“你的直觉告诉你什么？我们听从你的直觉。”&lt;/li&gt;
&lt;li&gt;帮助他认识到，他的决定和行动的确有效。当他确信掌握自身命运时，他就最有成效。向他指明卓有成效的做法。要认识到，他也许抱有不切实际的信念，以为他能做到与自身实际优势无关的事。尽管他的自信通常有用，但如果他忘乎所以，或判断严重失误，务必立即指出。他需要清醒的反馈来补充他的直觉。&lt;/li&gt;
&lt;li&gt;关注他的其他优势主题。他如果还有“前脆”、“专注”、“追求”或“统筹”等优势主题，就可能具备担任公司负责人的潜力。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;追求(Significance)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;你希望在别人的眼中非同凡响。你希望获得真正意义上的“认可”。你希望自己的意见受到重视。你希望出人头地。你希望出名。&lt;/li&gt;
&lt;li&gt;你尤其希望别人了解和赞赏你的独特优势。&lt;/li&gt;
&lt;li&gt;你渴望别人赞扬你是一个可依赖和专业化的成功人士。同样，你希望与可依赖和专业化的成功上士交往。如果他们不是这样，你就会推动他们朝此努力，直到成功，否则你就会弃他们而去。&lt;/li&gt;
&lt;li&gt;你天性独立，希望自己的工作是一种生活方式而不仅仅是一种职业。在工作中，你希望获得充分的自由，按你自己的方式做事的自由。你对自己的渴望感觉强烈并付诸行动。为此，你的生活中充斥着你所渴求的目标、成就或资格。无论你是目标如何——每个人的目标都与众不同——你的追求主题都将不断将你升高，摆脱平庸，通往卓越。这个主题推动你不断追求。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“追求”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;切记，他需要独立。不要过多管束他。切记，他有贡献，要及时表扬，这是他的动力。给他活动空间，但切勿不闻不问。他应得的赞扬要全部给他。&lt;/li&gt;
&lt;li&gt;给他机会亮相，让大家都知道他。他喜欢成为公众关注的焦点。合理安排他亮相，否则他会不顾场合地自己出头，安排他与可靠和高效率的专业人士共事。他喜欢与高手为伍。&lt;/li&gt;
&lt;li&gt;鼓励他表扬团队中其他取得优异成绩的人。他喜欢让其他人有成就感。当他宣称要出类拔萃时，帮助他分析为了实现这些理想而必须增强的自身优势。在指导他的时候，切勿要求他降低标准。相反，建议他保持基准，继而开发相关的优势。&lt;/li&gt;
&lt;li&gt;鉴于他非常重视别人的看法，如果别人不给他应得的褒奖，他的自尊心就会受到伤害。在这种情况下，应提醒他重新关注自身优势，并鼓励他根据自身优势拟定新的目标，继而重新振奋起来。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;战略(Strategic)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;战略主题使你能够透过日常琐碎，寻找前进的捷径。它不是一种可以教授的技能，而是一些种与众不同的思维方式，一种独特的世界观。有了这种世界观，别人被复杂和事物所迷惑时，你却能识别其中的规律。&lt;/li&gt;
&lt;li&gt;你将规律牢记在心，尝试各种不同的方案，不断问自己：“如果发生这种情况会怎样？如果发生那种情况会怎样？”这些不断出现的问题帮助你预防不测。如此，你便能够精确判断在障碍。&lt;/li&gt;
&lt;li&gt;你看清各条路径的走向，就能进行筛选。你筛去死路。你筛去直通屏障的路线。你筛去通往混乱和迷茫的路线。你不断筛选，直到你选定一条路线——这就是你的战略。有了战略武装，你开始出击。这就是你的战略主题的动作模式：“倘若……会怎样？”筛选，出击。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“战略’”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;让他为公司打头阵。他善于预见和解决问题，这种能力非常宝贵。例如，请他权衡各种方案，并为团队寻找最佳路径。建议他就最佳战略作出汇报。让他参与公司规划。问他：“如果发生这种情况，我们该怎么办？&quot;“如果发生那种情况，我们该怎么办？&quot;&lt;/li&gt;
&lt;li&gt;在征求他的意见之前，务必给他足够的时间思考。他在发表意见之前需要考虑几种方案。派他参加战略计划或未来学研讨会，以此认可他所具备的’‘战略”主题。研讨会的内容会使他的思想更加犀利。&lt;/li&gt;
&lt;li&gt;他往往善于用语言表达观点和思想。为了磨砺他的思维，请他向同事阐述他的观点，或者将想法写成文字在公司内传阅。当你听到或读到适合你所在领域的战略时，务必告诉他，继而激发他思考。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;取悦(Woo)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;取悦的英文愿意是把别人争取过来。你酷爱的挑战就是结识新人并赢得其好感。&lt;/li&gt;
&lt;li&gt;你从不怕见生人，相反，你见到生人精力倍增。你受他们的吸引。你想知道他们的姓名，问他们问题，寻找与他们的共同兴趣，以便攀谈，建立友情。有的人避免与人攀谈，因为他们担心话不投机。你则不然。你不仅从不辞穷，而且喜欢主动与生人攀谈，因为打破坚冰，建立联系使你心满意足，而一旦关系对立，你就高高兴兴地把它搁置一边，继续前进。还有新人要结识，还有新的房间要进去，还有新的人群要交际。在你在生活中是没有生人的，只有尚未谋面的朋友，许多许多的朋友。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;如何管理“取悦”主题突出的人&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;让他担任每天都能见到新人的工作。与陌生人见面使他兴奋。派他代表公司与外界打交道。他能使外人感到宾至如归，继而对公司产生好感。&lt;/li&gt;
&lt;li&gt;帮助他建立系统来记人名。为他制定一个目标，了解尽可能多的顾客姓名和个人资料J他能帮助公司广泛建立市场联系。除非他具备“体谅”和“交往”优势，别指望他会喜欢与客户建立密切关系的工作。相反，他更愿结识新人，征服他，然后再见下一个。&lt;/li&gt;
&lt;li&gt;他的“取悦”优势会森得你的好感，使你喜欢他。考虑派他担任新职时，务必摆脱你对他个人好感的影响，而关注他的真实优势。不要被他的“取悦”主题迷倒。如可能，让他在社区内担任公司的亲善使者，代表公司参加社区的俱乐部和集会。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;关于弱点&lt;/h2&gt;

&lt;p&gt;这里说一下书中关于弱点的独到见解，其实作者的主要观点就是控制那些阻碍你发挥优势的弱点，而不是花费精力克服它。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;我们每个人都有弱点。对于某些人是轻而易举的事情，对于另一些人可能难上加难。如果这些弱点干扰了我们的优势，就需要想出一些策略来控制它们。然而，为了拨乱反正，我们必须记住，关注并设法控制弱点，虽然有时确有必要，但只能帮助我们避免失败，而不可能帮助我们出类拔萃。塞利格曼告诉我们——我们采访的许多有卓越表现的人们也告诉我们一一惟有了解并加强自身优势才能出类拔萃。&lt;/p&gt;

&lt;p&gt;避开你的优势而专注于弱点，不是勤奋和谦逊的表现，而可以说是不负责任。相反，最负责任、最具挑战性，并且就忠实于自我而言最值得尊敬的任务，就是直面潜伏在你天生才干中的优势，并努力将它充分实现。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h3&gt;分析弱点&lt;/h3&gt;

&lt;p&gt;同样，我们也要找到自身的弱点，也就是找到发挥优势的绊脚石，接纳并分析它，最终还是要为发挥自身优势而服务。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;你一旦知道了自身真正的弱点所在，即妨碍你出色发挥的一种欠缺，你该如何应对呢？首先你要搞清楚这个弱点涉及的是技能、知识还是才干。例如，如果你是一名一筹莫展的医疗器械推销员，问题并不在于你缺少敢于抗争的才干（“统率”主题），而在于你一味向医生推销，却没意识到在当今医疗市场上，财务主管才是真正的决策人。再如，你是一名经理，但不善于有效委派，原因并不是你缺乏‘’伯乐”主题，而是你不知道如何与员工一道制定明确的目标。在这些例子中，答案很明确；学会你所需要的技能或知识。&lt;/p&gt;

&lt;p&gt;你怎样才能确知你所缺少的是知识或技能，而不是才于呢？应当说，出色发挥，取得佳绩并不是一门精确的科学，所以给出确切答案不易。但我们建议：如果你在获得了自己需要的知识和技能之后仍觉捉襟见肘，那么根据排除法，你缺少的必定是才干。这时，你就不该继续浪费时间去完善知识和技能，而应转而采用更有创造性的策略。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;总结&lt;/h2&gt;

&lt;p&gt;这篇文章主要就是为大家提供一个参考和工具，希望能够帮助大家，如果大家有什么意见和建议，欢迎留言，谢谢！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>优势识别</title>
   <link href="http://caoshuai.github.com/StrengthFinder/"/>
   <updated>2014-11-15T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/StrengthFinder</id>
   <content type="html">&lt;p&gt;有些日子没有好好静下来看本书了，APEC调休的那阵子算是逼着自己看了一本，《现在，发现你的优势》这本书其实很早就列入了读书计划中，只可惜懒癌发作，一直拖着没有把读书计划执行下去，趁着自己突然的良心发现，于是就再懒癌发作之前一气呵成读完了，也算是填了之前给自己挖的坑(&lt;a href=&quot;http://caoshuai.github.io/StrengthFinderRecord/&quot;&gt;已填&lt;/a&gt;)。好的，废话说完了。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;总体来说这是一本优势识别的方法论，没有阅读的难度，任何人都适合读这本书，旨在帮助他人识别自己或者他人的优势，然后加以分析，最后有意的强化和利用，然后达到认识自我的目的，能够在做影响人生的决策时清楚内心真实的想法。书中三十四个优势的主题的详细介绍，能够更好的帮助我们识别出优势。同样，也涵盖了对他人优势的管理。整本书先是对盖洛普优势理论的详细介绍，接着是优势的识别，然后是优势的管理，层层递进，环环紧扣，提供了一套更好的方法论，帮助别人找到自己的优势，最终达到认识自己的目的。&lt;/p&gt;

&lt;p&gt;说实话这本书归在成功心理学的类目下有点冤枉了，曾经红极一时的成功学如今已经在国民整体智慧水平提升的大潮下销声匿迹了，现如今但凡沾着「成功」二字的书基本上都会引起人们的反感，而且成功心理学难免会与饱受诟病的鸡汤文画上等号，加上年头也比较老，一本好书就被埋没了，如果懒癌发作，也许我也会和其他人一样，错过了一次重新认识自己的机会。&lt;/p&gt;

&lt;p&gt;盖洛普优势识别器那套理论，一直在强调成功的因素，重点在于控制自己的缺点，发挥并培养自己的优势。这有悖于我们大多数人的常识，我之前也同样的认为，克服了自身的缺点才能成功。如此一来，人们会把精力都花在了自己不擅长的地方，却忽视了自身的优势的培养，而书中却提出了更加独到的见解，那就是只有优势才能够完全的发挥你的潜能，让你做事更加得心应手，从而更容易取得成功，所以个人培养都要以发挥优势作为主要目标，而且书中还重新定义了「缺点」——不是你的短板，而是影响你发挥优势的障碍。同样，对待缺点的策略也有了重新的定义，原来我们都视缺点为眼中钉，肉中刺，非要把它克服才算心满意足，而书中的观点却不同，当然不是让我们无视自身的缺点，而是接受自身的缺点，然后控制它，保证在发挥优势的时候不要出来捣乱就好，这种方法我说不出孰优孰劣，但将注意力放在自身优势的培养上的确是我们需要认真考虑的事情。&lt;/p&gt;

&lt;p&gt;对我个人来说，我更愿意把它当做一本工具书，因为三十四个主题优势我是需要不停地回顾和记忆才能够完全的掌握的，并且书中也提供了优势识别的测试，帮助你更快速地找到自身的优势所在，一百八十道测试题能够客观的分析你的优势倾向，并找出倾向最高的五种优势。当然书本只能做到这么多，想要充分运用，还需要不停地思考和分析，发现优势并不是一件容易的事情，因为这需要我们从之前的思维定式中跳出来，以更加客观的角度分析自己行为的内在动机，按照书中对主题优势的界定去判断，各种主题都是因人而异的，这种优势的标准并不是适用于所有人的，三十四个主题也会有其无法涵盖的地方，我们不需要严格的对号入座，只需要找到你自己的主导优势就达到了优势识别的目的就可以了。但最终结果如何，在于你自己，不断地自我分析和提问，有助于快速的获得最终的答案，从而更加了解自己做什么是最擅长的。这也是令我困扰的原因，为了能够更好地为自己识别优势做出参考，我决定把书中对三十四个优势的介绍和优势管理的方法整理一番，然后分享给大家，这也算是给自己填的大坑吧，希望能帮助我自己的同时，同时对大家也有用。&lt;/p&gt;

&lt;p&gt;我始终认为，关注与自我成长的人都具有认识自我的渴望，我写这篇文章的目的就是要在懈怠的时候提醒自己——其他人都在努力的成长，你怎么能停下来呢？同样，也为了提醒看到这篇文章的你——成长的路上你并不孤单，我们都在彼此守望。共勉！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>宿醉这件小事</title>
   <link href="http://caoshuai.github.com/Hangover/"/>
   <updated>2014-11-14T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/Hangover</id>
   <content type="html">&lt;p&gt;关于上一次宿醉的记忆，还停留在大学时代，三年前的寒假，高中同学们张罗着要聚一聚，其实我并不是很热衷于参加这种活动，也知道聚会免不了喝酒，但盛情难却，最终还是去了。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;结果没有出乎意料，我被灌的伶仃大醉，一直喝到深夜，根本赶不上回家的短途汽车。只好和同学们在县城里找了个宾馆住了下来，那一晚上我过的多么的煎熬直到现在都无法忘却，当然，这和我的同学们没有关系，而是我实在喝得太多了，到了宾馆，我却无法入睡。一阵阵眩晕感刺激着我的脑神经，让我始终无法抑制反胃的感觉，平均每两分钟我都会吐一次，后来干脆就瘫坐在卫生间的马桶边，免得一躺下就又想吐，我甚至连黄色的胆汁都吐了出来，那味道苦极了，我甚至觉得自己的胃已经完全的翻了过来，这种感觉一直持续了一个晚上，始终都没有要停下来的迹象，我已经没什么东西可吐了，我在想，是不是我的大脑想要从脑袋中蹦出来，但却找不到出口，于是就让我不停地呕吐，它好找机会逃出来。为了缓解这种不适感，我只能继续，于是就猛灌了一瓶矿泉水，好让自己有东西可吐，免得把胃给吐出来。&lt;/p&gt;

&lt;p&gt;就这样，我陪着马桶一夜无眠，第二天我彻底绝望了，本以为能缓解一些，忍着反胃的感觉吃了些早点，没想到还是全吐了出来，最要命的是接下来我还要在车上颠簸两个小时才能到家，没有办法，紧紧地攥着塑料袋绝望地上车了，小巴轰鸣的发动机都盖不住我干呕的声音，这漫长的两个小时中，我根本无暇顾忌车上其他人得惊异的眼光，被折腾的筋疲力尽，连吐的力气都没有了，最终瘫倒在床上沉沉的睡去。这真实一个血淋淋的教训。&lt;/p&gt;

&lt;p&gt;可我就是这么的不长记性，昨天和赶来北京的朋友聚会，又一次喝高了，不过这次醉的体面些，回到宾馆倒头就睡，直到早上才把自己恶心醒，对，没错，我被一阵阵恶心的感觉唤醒了，然后就是吐的昏天地，宾馆、卫生间、马桶，我的噩梦又一次回来了，虽然没有上次难受的要死，但也只剩下半条命了，该死的是今天还要上班，我简直无法说服自己在公司再挺上8个小时，可最后我还是去了，一上午都打不起精神，除了深呼吸，基本上什么都没有做，为了不让自己感觉那么难受，我试着分散自己的注意力，于是我开始思考一个问题，为什么人们聚会的时候那么喜欢喝酒呢？虽然我是地地道道的中国人，但真的想不明白中国的酒场文化，更想不明白为什么有些人宁愿喝的胃出血还要继续乐此不疲的参加一个又一个酒场，真正的朋友真的会打着联络感情的幌子，让你喝的不省人事，让过量的酒精直接伤害你的身体么？为什么非要有你不喝就是看不起我，你喝不了就会被人瞧不起的野蛮思维呢？这些想法的逻辑在哪里？我真的不清楚。唯一清楚的就是，没有什么比身体健康更重要，不管你是联络感情还是商务公关能都不要以牺牲身体的健康为代价，换取想要的结果。如果做不到，真的要好好考虑是不是需要放弃。总之，为了自己的身体，再怎么小心都不为过。&lt;/p&gt;

&lt;p&gt;虽然我很少有喝醉的机会，但是经过这两次的教训，我体会到了宿醉的痛苦，潇洒无比的推杯换盏，一干而尽的背后是惨痛的代价，我实在是不敢恭维，所以还是老老实实地在酒桌上认怂吧。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>互联网思维重要的是「思维」好么？</title>
   <link href="http://caoshuai.github.com/WeChatPhone/"/>
   <updated>2014-11-12T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/WeChatPhone</id>
   <content type="html">&lt;p&gt;微信挑战通讯巨头的桥段想必大家已经再熟悉不过，尤其是互联网人，他们对微信的每一次版本迭代都十分的敏感，一个小小更新，都会细细揣摩，然后品头论足一番，对普通人来说，他们能够很快的熟悉并运用自如，从而更加离不开它。不难看出，微信已经不单单是一款交流通讯的应用，它已经深入到使用者的生活中，成为了一种生活方式，这其中的缘由，就是做用户喜欢的事情。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;从摇一摇到公众号，微信的战略不断地调整，能够看出他每一步走的都很谨慎，但每一步都能体现出它要做平台的决心，不可否认，腾讯中聚集着全中国乃至全球最顶尖的人才，他们聪明，有远见，极富创新精神。为上亿用户创造了优秀的产品，确切的说是开拓了另一种沟通交流的渠道，让我们的生活更加便捷，用更好的体验，更便捷的操作来改变用户的生活方式。&lt;/p&gt;

&lt;p&gt;微信颠覆了传统的电信行业，让短信即将成为历史，如今微信电话本这一记重拳，简直是要玩死那些巨头妥妥的，曾经人们抱怨电话费用高，计费不透明，长途漫游不便的用户，痛点被解决了，虽然目前只支持微信好友互相免费的通话，好让传统通讯行业死的慢一点，可未来胜负已定，传统电信行业将逐渐失去电话和短信的业务份额，眼睁睁的看着这些曾经作为企业支柱的业务被微信轻而易举的夺走，也许会导致所有与通话业务相关的业务萎缩，只能沦为流量提供商，眼睁睁看着自己桌上的蛋糕轻而易举的被人拿走，这种滋味不好受，但这就是商业竞争，很残酷也很现实。&lt;/p&gt;

&lt;p&gt;其实巨头们也挣扎过，曾经闹得沸沸扬扬的微信收费事件，最后也不了了之，这种事情，只会被人理解成无赖一般的流氓行径，好在大公司不缺明白人，也算没有把如此的闹剧继续进行下去，你们不求改变，就会有别人吃掉你，这也是互联网的「丛林法则」任何企业都无法幸免，也许今天你觉得自己的企业膀大腰圆，可以高枕无忧，不惧怕那些小得可怜，在险种求生的创业者，很难说几年甚至一年之后，你却被他们打得措手不及，叫苦连连。&lt;/p&gt;

&lt;p&gt;而从腾讯这里来看，电话本就像是微信的护卫舰，为其保驾护航，如此的战略设计的确是精妙，独立的电话本应用提供免费得电话服务，既让微信避免遭到运营商的打击，又整合了用户联系他人的入口，不但丰富了产品布局，又能够在竞争对手和运营商的围剿下全身而退，先丢出来个马前卒试探一下，如果不介意，那我继续折腾，如果失败，那我丢掉好了，也许之后会有更狠的招数来颠覆你。&lt;/p&gt;

&lt;p&gt;腾讯也好，其他的企业也罢，想要做大，说一千，道一万，都得能够找到用户的痛点，然后解决他，之后把这件事情做到极致，才能壮大，我觉得，互联网思维就是聪明做事的一种思维，发现问题，解决问题，其实，这些都和互联网无关，重要的只是思维。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>又是一年光棍节</title>
   <link href="http://caoshuai.github.com/AnotherSinglesDay/"/>
   <updated>2014-11-11T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/AnotherSinglesDay</id>
   <content type="html">&lt;p&gt;在我的家乡，「光棍」这个词有两个意思，第一个是名词，用来表式单身汉，另一个却是形容放霸道无理的人，这种形容往往略带鄙夷的意味，透着隐隐的不服气，但又无可奈何之意。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;所以每次提到光棍我都会联想到，一个人霸道无理以至于找不到女朋友，然后就成了光棍的光棍，到底是光棍的光棍，还是光棍的光棍，我就不解（zuo）释（si）了，请大家自己去体会这之间的微妙关系。&lt;/p&gt;

&lt;p&gt;说来也巧，今年意外的赶上了光棍节，在这个全国网友欢庆的时刻，我在北京享受着APEC带来的短暂蓝天白云和清新空气，唯一美中不足的是今天公司放假，而我却要来公司值班，中午领导带着值班的同事去必胜客美餐一了顿，这负面情绪也就消散的差不多了。现在的我躺在工位的椅子上，琢磨着写完这一片文章就小睡一会，醒来以后筹划着明天的假期如何度过，如果不出意外，我想我还是会宅一天，心情好的话会锻炼身体，心情不好干脆就躺在床上发呆。————这样的生活也还不错，除了自己，谁都不用担心，从去年11月开始我就已经进入了这种单身生活的状态，朝九晚五的工作，一个人度过假期，一个人睡双人床，一个人做喜欢做的任何事情。从开始的不适应，烦躁，到慢慢地接受，习惯，甚至爱上这种感觉，我总共花了5个月的时间，学会了如何与自己独处，从颓废慢慢调整到积极进取，我开始每天健身，控制饮食，注重作息的规律，这些都已经成了独自生活的一部分，以至于刚和同事合租时很不适应，一个人过日子太久了就有些留恋那种无忧无虑的状态了。直到10月底，彻底结束了一段异地感情，也算由实质上的独居变成了名副其实的光棍，算算日子，正好独居一年时间，就像是接到了通知书，才猛然发现，已经不知不觉毕业了一年了。不知道是该高兴还是该难过。&lt;/p&gt;

&lt;p&gt;记得一年前的光棍节的凌晨，我光着屁股坐在电脑前，等待着零点的抢购活动，那时候小米三刚刚上市，供不应求，奈何不到几秒中的时间全被抢购一空，我坐在冰凉的凳子上一无所获，打了个寒战，从此对双十一无感。我始终认为选择太多也是一种负担，有时候我为了买一双能够货比三家的产品，往往要花掉好多时间。网上商城中纷繁复杂的信息让我头昏脑涨，往往记得了这一家，又忘记了那一家，各种商家的活动花样百出，支付手段也复杂无比，不断地挑战我快要枯竭的脑细胞。&lt;/p&gt;

&lt;p&gt;双十一的确是商家和消费者一同的狂欢，中国人就喜欢扎堆凑热闹，就连买东西也一样。从可靠来源的数据来看，今天半天的交易额已经超过了去年全天的成交额，试想一下，就在我打下这行字的短短几秒钟，就有成千上万的交易达成，百万千万级的交易额产生，估计今年的交易额会达到去年的二倍，可这些对我来说有什么意义呢？我根本不关心这个，我只关心自己过得是否开心，明天下一顿吃什么好吃的才不会饿肚子，看那些书能够让我解决我内心的困惑，个人实力如何能循序渐进的提升，睡眠质量怎么能进一步改善，这些，双十一都无法给我解答，这也是我反应很平淡的原因，我压根就没想起来还有什么是需要买的，也许我会因为一天的消费和比较而觉得自己这一天过得无比充实，可这始终不是一件明智的事情，也是我苦恼的原因。&lt;/p&gt;

&lt;p&gt;光棍的烦恼还是比较实在的，请谅解我这么死板固执，这就是一个光（diao）棍（si）的心声，你们开心就好，让我再一个人发会呆。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>杂念</title>
   <link href="http://caoshuai.github.com/NeverMind/"/>
   <updated>2014-11-10T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/NeverMind</id>
   <content type="html">&lt;p&gt;我曾经多次思考一些比较无用的问题，比如宇宙是否有边界？是否存在一个与现实世界完全相同的平行世界？时间会有尽头么，如果有，那会是什么样子？这些暂时无解的问题时常困扰着我，尤其受到各种科幻小说电影等天马行空想法的刺激之后，会让我思考很久，也曾试着去幻想这些问题的答案，当然这都依赖于有限的想象力，那些大胆的设想就像散落一地的碎片，无法拼凑出一个完整的样子，就像做了一场不痛不痒的梦，回想起来依稀只记得某个场景，却无法再拼凑出完整的内容。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;当然，以上的文字与《超体》没有任何关系，只是我大脑中纷乱的思绪。将近一个多月没有看电影，午饭后小憩了一会，起床之后什么也不想做，决定看个电影杀掉下午慵懒的时间，于是就有了这一段毫无边际的话。&lt;/p&gt;

&lt;p&gt;我更愿意把这部片子理解为对知识和生命的尊重，而不单单当做一个科幻电影来看，在此我并不想谈论电影的剧情如何，而是更愿意去思考电影给我的启示，如果真的像超体中设想的那样，人得脑使用率达到100%，真的会如此的无所不能么？思想真的会超脱物质甚至控制物质么？脑中的未激活的神经元是否存留着大量的信息？这些信息是我们时刻想探寻的生命的真谛么?如果人类还未进化至使用这些能力和知识的程度，几千年或者几万年之后我们的后代子孙会得到这种进化么？如果会，他们会如何看待现在的们？粗鲁、愚蠢、野蛮还是未开化？&lt;/p&gt;

&lt;p&gt;我在想，是否真的存在一个叫Lucy的女人，她在无时无刻的观察者世人的一举一动，整个世界或是整个宇宙在她的眼中都已经分崩离析不复存在。如果这个大胆的设想是真的，我更愿意相信Lucy是神，她可以感知万物，控制万物，创造万物，无处不在——这不就是神的能力么？&lt;/p&gt;

&lt;p&gt;我还会幻想，大脑开发之后世界在人类眼中还是现在的样子么？会不会看到世界的另一个维度，从三维迁跃至四维？五维？甚至更高？会不会像三体中描述的一样，还有很多的维度我们无法感知，但却真实的存在着？或许这些感知力就存在我们脑中的某个深邃的角落，等待着我们去激活？那么问题又来了？如果真的存在大量的信息和能力在大脑中另块未开发的地方，这些信息是如何被保存下来的呢？是谁存入的呢?&lt;/p&gt;

&lt;p&gt;也许真的有一天出现了扭转时空的人，回到过去订好了程式，然后旁观着人类的繁衍兴衰，就像在看一场闹剧，只是身在其中的我们不知情，上演着一幕幕自以为的舞台剧，这一切也许从一开始就被安排好了，只需要你出场，然后退场，一代一代的直到时间尽头。可这些无解的问题始终会让我们去思考神是否存在，这些都超越了我们的认知范畴。更有可能人脑已经无法再扩充，如今人类的大脑已经演变到了极限，无法再去获得更多的能力，唯有繁衍直到一个纪元谢幕。可我更愿意相信的是，从原始人到现代人的脑演化是一个极为缓慢的过程，需要一代又一代的传承，更需要一次又一次的基因重组，人类可能永远也体会不到脑容量质变的过程，也可能要经过上百万年或是上亿年的演变。&lt;/p&gt;

&lt;p&gt;但这又有什么关系呢？这么多暂时无解的问题，总有一天会得到答案的，因为人类的发展始终是在不断进步的，不管需要多久，只要享受这个进步的过程就好。&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;怕什么真理无穷，进一寸有一寸的欢喜。——胡适&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;更能理解这句话的含义了。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>EffectiveJava读书笔记</title>
   <link href="http://caoshuai.github.com/EffectiveJava/"/>
   <updated>2014-11-09T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/EffecctiveJava</id>
   <content type="html">&lt;p&gt;章节和书籍是相对应的，所以直接从第二章开始了，大家如果手上有这本书书参考的话是最好不过的了，如果你没有书，而且有些地方看不明白，那么很抱歉，找本书吧，这篇文章只是我自己做记录用的，如果能给大家帮助最好，如果帮不到你，我也没办法。&lt;/p&gt;

&lt;!--more--&gt;


&lt;h2&gt;第二章 创建和销毁对象&lt;/h2&gt;

&lt;h3&gt;1、考虑用静态工厂方法替代构造器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;优点

&lt;ul&gt;
&lt;li&gt;静态工厂方法与构造器不同的第一大优势在于，他们有名称。优于通过多个参数区分构造方法的构造器。&lt;/li&gt;
&lt;li&gt;第二大优势在于，不必在每次调用他们的时候都创建一个新对象。&lt;/li&gt;
&lt;li&gt;第三大优势在于，他可以返回原返回类型的任何子类型的对象。在返回对象的时候就有了更大的灵活性。&lt;/li&gt;
&lt;li&gt;第四大优势在于，在创建参数化类型实例的时候，它们使代码变得更加简洁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点

&lt;ul&gt;
&lt;li&gt;类如果不含共有的或者受保护的构造器，就不能被子类化。&lt;/li&gt;
&lt;li&gt;它们与其他的静态方法实际上没有任何区别。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;2、遇到多个构造器参数是要考虑用构造器&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// Builder Pattern - Pages 14-15
public class NutritionFacts {
    private final int servingSize;
    private final int servings;
    private final int calories;
    private final int fat;
    private final int sodium;
    private final int carbohydrate;

    //static inner builder class
    public static class Builder {
        // Required parameters
        private final int servingSize;
        private final int servings;

        // Optional parameters - initialized to default values
        private int calories      = 0;
        private int fat           = 0;
        private int carbohydrate  = 0;
        private int sodium        = 0;

        public Builder(int servingSize, int servings) {
            this.servingSize = servingSize;
            this.servings    = servings;
        }

        public Builder calories(int val)
            { calories = val;      return this; }
        public Builder fat(int val)
            { fat = val;           return this; }
        public Builder carbohydrate(int val)
            { carbohydrate = val;  return this; }
        public Builder sodium(int val)
            { sodium = val;        return this; }

        public NutritionFacts build() {
            return new NutritionFacts(this);
        }
}

private NutritionFacts(Builder builder) {
    servingSize  = builder.servingSize;
    servings     = builder.servings;
    calories     = builder.calories;
    fat          = builder.fat;
    sodium       = builder.sodium;
    carbohydrate = builder.carbohydrate;
}

//test method
public static void main(String[] args) {
    NutritionFacts cocaCola = new NutritionFacts.Builder(240, 8).
        calories(100).sodium(35).carbohydrate(27).build();
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;builder模式只在有很多参数的时候才能使用，在设计阶段如果能够预想到将来多参数的情况，那么最好在最开始使用这种模式&lt;/li&gt;
&lt;li&gt;总之，如果类的构造器或者静态工厂中具有多个参数，设计这种类时，Builder模式就是中不错的选择。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;3、用私有构造器或者枚举类型强化Singleton属性。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使类成为Singleton会是它的客户端测试变得十分困难，因为无法给Singleton替换模拟实现，除非它实现一个充当其类型的接口。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用私有构造器的Singleton模式&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Singleton with public final field - Page 17
public class Elvis {

    public static final Elvis INSTANCE = new Elvis();

    private Elvis() { }

    public void leaveTheBuilding() {
        System.out.println(&quot;Whoa baby, I&#39;m outta here!&quot;);
    }

    // This code would normally appear outside the class!
    public static void main(String[] args) {
        Elvis elvis = Elvis.INSTANCE;
        elvis.leaveTheBuilding();
    }
}
// Singleton with static factory - Page 17

public class Elvis {
    private static final Elvis INSTANCE = new Elvis();
    private Elvis() { }
    public static Elvis getInstance() { return INSTANCE; }

    public void leaveTheBuilding() {
        System.out.println(&quot;Whoa baby, I&#39;m outta here!&quot;);
    }

    // This code would normally appear outside the class!
    public static void main(String[] args) {
        Elvis elvis = Elvis.getInstance();
        elvis.leaveTheBuilding();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;私有的构造方法也会被享有特权的客户端借助AccessibleObject.setAccessible方法，通过反射机调用私有构造器。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;序列化Singleton类使用implement Serializable是不够的，为了维护并保证Singleton，必须声明所有实例域都是瞬时（transient）的，并提供一个readResolve方法，否则每次反序列化一个序列化的实例时，都会创建一个新的实例。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三种实现Singleton的方法，只需编写一个包含单个元素的枚举类型：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Enum singleton - the preferred approach - page 18
public enum Elvis {
    INSTANCE;
    public void leaveTheBuilding() {
        System.out.println(&quot;Whoa baby, I&#39;m outta here!&quot;);
    }

    // This code would normally appear outside the class!
    public static void main(String[] args) {
        Elvis elvis = Elvis.INSTANCE;
        elvis.leaveTheBuilding();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单元素的枚举类型已经成为实现Singleton的最佳方法木有之一。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;4、通过私有构造器强化不可实例化的能力&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;导致一个类不能被子类化。所有的构造器都必须显示或隐式的调用超类的构造器。如此一来子类就没有可访问的超类构造器可用了。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;5、避免创建不必要的对象&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; String s = new String(“string”);  //不要这么写&lt;/li&gt;
&lt;li&gt;&lt;p&gt; 自动装箱也会引起不必要的性能开销——优先使用基本类型而不是装箱基本类型，当心无意识的自动装箱&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Sum {
    // Hideously slow program! Can you spot the object creation?
    public static void main(String[] args) {
        Long sum = 0L;
        //long to Long is not a good idea.
        for (long i = 0; i &amp;lt; Integer.MAX_VALUE; i++) {
            sum += i;
        }
        System.out.println(sum);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;6、消除过期的对象引用&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt; 栈的内部容易出现过期引用（obsolete reference），导致JVM无法进行垃圾回收。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//it method could be better
public Object pop() {
    if (size == 0)
        throw new EmptyStackException();
    return elements[--size];
}

//whatch this method
public Object pop(){
    if (size == 0)
        throw new EmptyStackException();
    Object result = elements[--size];
    element[size]=null;//Eliminate obsolete reference
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在支持垃圾回收的语言中，内存泄漏是很隐蔽的（称这类内存泄漏为“无意识的对象保持（unintentional object retention）”更为恰当。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;内存泄漏的另一个常见来源是缓存&lt;/li&gt;
&lt;li&gt;内存泄漏的第三个常见来源是监听器和其他回调&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;7、避免使用终结方法（finalizer）&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;不要被System.gc和System.runFinalization这两个方法所诱惑，他们确实增加了终结方法被执行的机会，但是他们不保证终结方法一定被执行。唯一声称保证终结方法被执行的方法是System.runFinalizersOnExit，以及他臭名昭著的孪生兄弟Runtime.runFinalizersOnExit。这两个方法都有致命的缺陷，都被废弃了。&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;第三章 对于所有对象都通用的方法&lt;/h2&gt;

&lt;h3&gt;8、覆盖equals时请遵守通用约定&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;不覆盖equals的情况：

&lt;ul&gt;
&lt;li&gt;类的每个实例本质上都是唯一的。&lt;/li&gt;
&lt;li&gt;不用关心类是否提供了“逻辑相等（logical equality）“的测试功能。&lt;/li&gt;
&lt;li&gt;超类已经覆盖了equals，从超类继承过来的行为对于子类也是合适的。&lt;/li&gt;
&lt;li&gt;类是私有的或包级私有的，可以确定他的equals方法永远不会被调用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应该覆盖equals的情况：

&lt;ul&gt;
&lt;li&gt;如果类具有自己特有的“逻辑想等”概念，而且超类还没有覆盖equals以实现期望的行为，这时我们就需要覆盖equals方法。这通常属于“值类”的情形。&lt;/li&gt;
&lt;li&gt;覆盖equals方法需要遵守的通用约定

&lt;ul&gt;
&lt;li&gt;自反性（reflexivity）：对于任何非空引用值 x，x.equals(x) 都应返回 true。&lt;/li&gt;
&lt;li&gt;对称性（symmetry）：对于任何非空引用值 x 和 y，当且仅当 y.equals(x) 返回 true 时，x.equals(y) 才应返回 true。&lt;/li&gt;
&lt;li&gt;传递性（transitivity）：对于任何非空引用值 x、y 和 z，如果 x.equals(y) 返回 true，并且 y.equals(z) 返回 true，那么 x.equals(z) 应返回 true。&lt;/li&gt;
&lt;li&gt;一致性（consistency）：对于任何非空引用值 x 和 y，多次调用 x.equals(y) 始终返回 true 或始终返回 false，前提是对象上 equals 比较中所用的信息没有被修改。&lt;/li&gt;
&lt;li&gt;非空性（Non-nullity）对于任何非空引用值 x，x.equals(null) 都应返回 false。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实现高质量equals方法的诀窍：

&lt;ol&gt;
&lt;li&gt;使用==操作符检查“参数是否为这个对象的引用”；&lt;/li&gt;
&lt;li&gt;使用instanceof操作符检查“参数是否为正确的类型”；&lt;/li&gt;
&lt;li&gt;把参数转换成正确的类型；&lt;/li&gt;
&lt;li&gt;对于该类中的每个“关键”域，检查参数中的域是否与该对象中对应的域相匹配（为了获得最佳性能，应该先比较最有可能不一致的域，或者开销最低的域，最理想的情况是两个条件同时满足的域）；&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当编写完equals方法后，应该问自己三个问题：它是否是对称的、传递的和一致的？&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;覆盖equals时总要覆盖hashCode。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;不要企图让equals方法过于智能。&lt;/li&gt;
&lt;li&gt;不要将equals声明中的Object对象替换为其他类型。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;9、覆盖equals时总要覆盖hashCode，在每个覆盖了equals方法的类中，也必须覆盖hashCode方法。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在每个覆盖了equals方法的类中，也必须覆盖hashCode方法。如果不那样做的话，就会违反Object.hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这样的集合包括HashMap、HashSet和Hashtable。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// A decent hashCode method - Page 48
@Override public int hashCode() {
     int result = 17;
     result = 31  -  result + areaCode;
     result = 31  -  result + prefix;
     result = 31  -  result + lineNumber;
     return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;31有个很好的特性，用移位和减法来代替乘法，可以得到更好的性能：31 - i ==(i&amp;lt;&amp;lt;5)-i 。现代的VM可以自动完成这种优化。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;延迟初始化hashCode&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Lazily initialized, cached hashCode - Page 49
private volatile int hashCode;  // (See Item 71)

@Override public int hashCode() {
     int result = hashCode;
     if (result == 0) {
         result = 17;
         result = 31  -  result + areaCode;
         result = 31  -  result + prefix;
         result = 31  -  result + lineNumber;
         hashCode = result;
     }
     return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;10、始终要覆盖toString&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;提供好的toString实现可以使类用起来更加舒适，当对象呗传递给println、printf、字符串练操作符（+）以及assert或者被调试器大一出来时，toString方法会被自动调用。&lt;/li&gt;
&lt;li&gt;toString方法应该返回对象中包含的所有值得关注的信息。&lt;/li&gt;
&lt;li&gt;在文档中指定返回值的格式。&lt;/li&gt;
&lt;li&gt;无论是否指定格式，都为toString返回之中包含的所有信息，提供一种编程时的访问路径。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;11、谨慎地覆盖clone&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;clone方法的通用约定是非常弱的&lt;/li&gt;
&lt;li&gt;x.clone()!=x&lt;/li&gt;
&lt;li&gt;x.clone().getClass()==x.getClass()&lt;/li&gt;
&lt;li&gt;x.clone().equals(x)&lt;/li&gt;
&lt;li&gt;这些都不是绝对的要求&lt;/li&gt;
&lt;li&gt;Clone方法就是另一个构造器，你必须保证它不会伤害到原始的对象，并确保正确地创建被克隆对象中的约束条件。&lt;/li&gt;
&lt;li&gt;clone架构与应用可变对象的final域的正常用法是不兼容的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;深度clone，典型例子HashTable&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程安全的类实现Cloneable接口，clone方法必须实现好同步:HashTable。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;12、考虑实现Comparable接口&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; 在下面的说明中，sgn(expression)符号表示数学中的signum函数，即根据expression是负数、零、或正数，分别返回-1、0、1。

&lt;ul&gt;
&lt;li&gt;对称性：实现者必须保证对所有的x和y都有sgn(x.compareTo(y)) == -sgn(y.compareTo(x))。这也暗示当且仅当y.compareTo(x)抛出异常时，x.compareTo(y)才抛出异常。&lt;/li&gt;
&lt;li&gt;传递性：实现者必须保证比较关系是可传递的，如果x.compareTo(y) &gt; 0且y.compareTo(z) &gt; 0，则x.compareTo(z) &gt; 0。&lt;/li&gt;
&lt;li&gt;实现者必须保证x.compareTo(y)==0暗示着所有的z都有(x.compareTo(z)) == (y.compareTo(z))。&lt;/li&gt;
&lt;li&gt;虽不强制要求，但强烈建议(x.compareTo(y) == 0) == (x.equals(y))。一般来说，任何实现了Comparable的类如果违反了这个约定，都应该明确说明。推荐这么说：“注意：本类拥有自然顺序，但与equals不一致”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;第四章 类和接口&lt;/h2&gt;

&lt;h3&gt;13、使类和成员的可访问性最小化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;要区别设计良好的模块与设计不好的模块，最重要的因素在于，这个模块对于外部的其他模块而言，是否隐藏其内部数据和其他细节。&lt;/li&gt;
&lt;li&gt;设计良好的模块会隐藏所有的实现细节，把他的API和他的实现清晰的分割开来。然后，模块之间通过他们之间的API进行通信，一个模块不需要知道其他模块的内部情况。这个概念被成为信息隐藏（information hiding）或封装（encapsulation），是软件设计的基本 原则之一。&lt;/li&gt;
&lt;li&gt;信息隐藏之所以非常重要有许多原因，其中大多数理由都源于这样一个事实：

&lt;ul&gt;
&lt;li&gt;他可以有效的解除系统组成各模块之间的耦合关系，是的这些模块可以独立的开发、测试、优化、使用、理解和修改。&lt;/li&gt;
&lt;li&gt;这样可以加快系统开发的速度，因为这些模块可以并发开发。&lt;/li&gt;
&lt;li&gt;他也减轻了维护的负担，因为程序员可以更快的理解这些模块，并且在调试他们的时候不影响其他的模块。&lt;/li&gt;
&lt;li&gt;虽然信息隐藏本身无论是对内还是对外，都不会带来更好的性能，但是他可以有效的调节性能：一旦完成一个系统，并通过剖析哪些模块影响了系统性能，那些模块可以进一步优化，而不影响到其他模块的正确性。&lt;/li&gt;
&lt;li&gt;信息隐藏提高了软件的可重用性，因为模块之间并不紧密相连，除了开发这些模块所使用的坏境之外，他们在其他坏境中往往也很有用。&lt;/li&gt;
&lt;li&gt;最后，信息隐藏也降低了构建大型系统的风险，因为即使整个系统不可用，但是这些独立的模块却有可能是可用的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实例域决不能是公有的。如果域是非final的，或者是一个指向可变对象的final引用，那么一旦是这个域成为共有的，就放弃了对存储在这个域中的值限制的能力。

&lt;ul&gt;
&lt;li&gt;包含共有可变域的类并不是线程安全的。&lt;/li&gt;
&lt;li&gt;类具有共有的静态的final数组域，或者返回这个域的访问方法，这几乎总是错误的。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以使共有数组变成私有的，并返回一个公有的不可变列表。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; private static final Thing[] PRIVATE_VALUES = {...};
 public static final List&amp;lt;Ting&amp;gt; VALUES = Collecations.unmodifiableList(Arrays.asList(PRIVATE_VALUES));

 //或者

 private static final Thing[] PRIVATE_VALUES = {...};
 public static final Thing[] values() {
      return PRIVATE_VALUES.clone;
 }   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;14、在公有类中使用访问方法而非公有域&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果类可以在他所在的包的外部进行访问，就提供访问方法。&lt;/li&gt;
&lt;li&gt;如果类是包私有的，或者私有的嵌套类，直接暴露他的数据域并没有本质的错误。&lt;/li&gt;
&lt;li&gt;总之，公有类永远都不应该暴漏可变的域。虽然还是有几个问题，但是让公有类暴漏不可变的域，起危害比较小。但是，有时候需要会用到包级私有的或者私有的嵌套类来暴漏域，无论这个类是可变还是不可变。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;15、使可变性最小化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;为了使类成为不可变，要遵循下面五条规则：

&lt;ol&gt;
&lt;li&gt;不要提供任何会修改对象状态的方法。&lt;/li&gt;
&lt;li&gt;保证类不会被扩展。&lt;/li&gt;
&lt;li&gt;使所有的域都是final的。&lt;/li&gt;
&lt;li&gt;使所有的域都成为私有的。&lt;/li&gt;
&lt;li&gt;确保对于任何可变组件的互斥访问。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;不可变对象本质上是线程安全的，他们不要求同步。&lt;/li&gt;
&lt;li&gt;不可变对象可以自由地共享。&lt;/li&gt;
&lt;li&gt;”不可变对象可以被自由的共享”导致的结果是，永远也不需要进行保护性拷贝。&lt;/li&gt;
&lt;li&gt;不仅可以共享不可变对象，甚至也可以共享他们的内部信息。&lt;/li&gt;
&lt;li&gt;不可变对象对其他对象提供了大量的构件（building blocks）。&lt;/li&gt;
&lt;li&gt;不可变对象真正唯一的缺点是，对于每一个值都需要一个单独的对象。&lt;/li&gt;
&lt;li&gt;让不可变对象变成final的另外一个方法就是，让类的所有构造器都变成私有的或者包级私有的，并添加共有的静态工厂（static factory）来替代共有构造器。&lt;/li&gt;
&lt;li&gt;除非有很好的理由要让类成为可变的类，否则就应该是不可变的。&lt;/li&gt;
&lt;li&gt;如果类不能做成不可变的，但也应该尽量限制他的可变性。&lt;/li&gt;
&lt;li&gt;除非有令人信服的理由要使域变成是非final的，否则要使每个域都是final的。&lt;/li&gt;
&lt;li&gt;构造器应该创建完全初始化的对象，并建立起所有的约束关系。不要在构造器或者静态工厂之外再提供共有的初始化方法。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;16、复合优先于继承&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;可以不扩展现有的类，而是在新类中增加一个私有域，他 引用现有类一个实例。这种设计叫做“复合（composition）”，因为现有的类变成新类的一个组件。新类中的每个实例方法都可以调用被包含的现有类实例中对应的方法，并返回他的结果。这被成为转发（forwarding），新类中的方法被成为转发方法（forwarding method）。&lt;/li&gt;
&lt;li&gt;这里的继承是实现继承而非接口继承。与方法调用不同的是，继承打破了封装性：&lt;/li&gt;
&lt;li&gt;换句话说，子类依赖于其超类中特定功能的实现细节。超类的实现有可能会随着发型版本的不同而发生改变，如果真的发生了变化，子类可能会遭到破坏，即使他的代码完全没有改变。因此，子类必须跟着超类的更新而改变，除非超类是专门为扩展而设计的，并用具有很好的文档说明。&lt;/li&gt;
&lt;li&gt;只有当子类真正是超类的子类型（subtype）时，才适合用继承，也就是是“is-a”关系时。&lt;/li&gt;
&lt;li&gt;如果在适合于是用复合的地方是用了继承，则会不必要的暴漏实现细节。这样的到的API会把你限制在原始的实现上，永远限定了类的性能。更为严重的是，由于暴漏了内部细节，客户端就有可能直接访问这些内部细节。这样至少会导致语义上的混淆。例如：Properties，getProperty(String key)就有可能产生与get(Object key) 不同的结果。&lt;/li&gt;
&lt;li&gt;对于你正视图扩展的类，他的API有没有缺陷？如果有，你愿意把那些缺陷传播到子类的API中？而符合则允许设计新的API来隐藏这些缺陷。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;17、要么为继承而设计，并提供文档说明，要么就禁止继承。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;一个好的API文档应该描述一个给定的方法做了什么工作，而不是描述他是如何做到的。&lt;/li&gt;
&lt;li&gt;首先，该类的文档必须精确地描述覆盖每个方法所带来的影响。换句话说，该类必须有文档说明他可覆盖（overridable）的方法的自用型（self-use）。&lt;/li&gt;
&lt;li&gt;对于每个共有的或受保护的方法或构造器，他的文档必须指明该方法或者构造器调用了哪些可覆盖的方法，是以什么顺序调用的，每个调用的结果又是如何影响后续的处理过程的。更一般的，类必须在文档中说明，在哪些情况下会调用可覆盖的方法。（例如：后台的线程或者静态的初始化可能会调用这个方法）&lt;/li&gt;
&lt;li&gt;按惯例，如果方法调用了可覆盖的方法，在他的文档注释的末尾应该包含关于这些调用的描述信息。&lt;/li&gt;
&lt;li&gt;类必须通过某种形式提供适当的钩子（hook），以便能够进入他的内部工作流程中，这种实行可以精心选择受保护的（protected）方法。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;18、接口优于抽象类&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Java语言设计提供了两种机制，可以用来定义允许多个实现的类型：接口和抽象类。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为Java只允许单继承，所以抽象类作为类型定义受到了极大的限制。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;现有的类可以很容易被更新，以实现新的接口。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;一般来说，无法更新现有的类来扩展新的抽象类。如果你希望两个类来扩展一个抽象类，就必须把抽象类放到类型层次的高处，以便这两个类的一个祖先成为他的子类。这样会间接的伤害到类的层次，迫使这个公共祖先的所有后代类都扩展这个新的抽象类，无论他对于这个后代类是否合适。&lt;/li&gt;
&lt;li&gt;接口是定义mixin（混合类型）的理想选择。类除了实现他的“基本类型（primary type）”之外，还可以实现这个mixin类型，以表示提供了某些可供选择的行为。&lt;/li&gt;
&lt;li&gt;接口允许我们构造非层次结构的类型框架。&lt;/li&gt;
&lt;li&gt;包装类（wrapper class）模式，接口使得安全地增强类的功能成为可能。&lt;/li&gt;
&lt;li&gt;通过对你导出的每个重要接口都提供一个抽象的骨架实现（skeletal implementation）类，把这个抽象类的优点结合起来。&lt;/li&gt;
&lt;li&gt;必须认真研究接口，并确定哪些方法是最为基本的（primitive），其他的方法则可以根据他们来实现。这些基本的方法将成为骨架实现类中抽象方法。然后，必须为接口中所有其他的方法提供具体的实现。&lt;/li&gt;
&lt;li&gt;抽象类的演变比接口的演变要容易的多。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接口一旦被公开发行，并且已被广泛实现，再想改变这个接口几乎是不可能的。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;简而言之，接口通常是定义允许多个实现的类型的最佳途径。如果演变的容易性比灵活性和功能更为重要的时候，应当选用抽象类。前提是必须理解并且可以接受这些局限性。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;19、接口只能用于定义类型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;当类实现接口时，接口就充当可以引用这个类的实例的类型（type）。
因此类实现了接口，就表明客户端可以对这个类的实例实施某些动作。为了其他目的而使用接口是不恰当的。&lt;/li&gt;
&lt;li&gt;常量接口（constant interface），使用这些常量的类实现这个接口，以避免用类名来修改常量名。&lt;/li&gt;
&lt;li&gt;常量接口模式是对接口的不良使用。&lt;/li&gt;
&lt;li&gt;如果这些常量最好被看作枚举类型的成员，使用枚举类型。否则，应该使用不可实例化的工具类来导出这些常量。&lt;/li&gt;
&lt;li&gt;工具类通常要求客户端用类名来修饰这些常量名。也可以使用静态导入，避免用类名修饰常量名。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;20、类层次优于标签类&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;标签类很少有适用的时候。当你想要编写一个包含显示标签域类时，应该考虑一下，这个标签是否可以被取消，这个类是否可以用类层次来代替。当你遇到一个包含标签与的现有类时，就要考虑将它重构到一个层次结构中去。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;21、用函数对象表式策略&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;具体的策略类往往使用匿名内部类&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  Arrays.sort(stringArray,new Comparator&amp;lt;String&amp;gt;() {
      @Override
      public int compare(String o1, String o2) {
          return 0;
      }
  });
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;22、优先考虑静态成员类&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;嵌套类（nested class）是指被定义在另一个类的内部的类。&lt;/li&gt;
&lt;li&gt;嵌套类存在的目的应该只是为他的外围类（enclosing class）提供服务。&lt;/li&gt;
&lt;li&gt;如果嵌套类将来可能会用于其他的某个环境中，他就应该是顶层类（top-level class）。&lt;/li&gt;
&lt;li&gt;嵌套类有四种：

&lt;ul&gt;
&lt;li&gt; 静态成员类（static member class）&lt;/li&gt;
&lt;li&gt; 非静态成员类（nonstatic member class）&lt;/li&gt;
&lt;li&gt; 匿名类（anonymous class）&lt;/li&gt;
&lt;li&gt; 局部类（local class）&lt;/li&gt;
&lt;li&gt;除了第一种之外，其他三种都称为内部类（inner class）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;第四章、泛型&lt;/h2&gt;

&lt;h3&gt;23、请不要在新代码中使用原生态类&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;原生态类型指的是没有类型声明的集合类。

&lt;ul&gt;
&lt;li&gt;原生态类型如 List:不带任何类型参数的泛型名称&lt;/li&gt;
&lt;li&gt;参数化类型如List&lt;String&gt; ：表示元素类型为String的列表&lt;/li&gt;
&lt;li&gt;无限制的通配符类型如List&amp;lt;?&gt;:表示元素为未知类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用原生类会失掉泛型在安全性和表述性方面的所有优势。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;安全，提供了编译前检查&lt;/li&gt;
&lt;li&gt;方便，不用显示的cast，自动完成&lt;/li&gt;
&lt;li&gt;原生态类型存在的主要目的是兼容性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;原生态类型List和参数化的类型List&lt;Object&gt;之前的区别不严格的说就是前者逃避了泛型检查，后者&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;后者提供了编译期检查，明确的表明集合中可以放任何类型的元素&lt;/li&gt;
&lt;li&gt;举例:对于方法 f（List param）和方法f（List&lt;Object&gt;），前者可以接受List&lt;String&gt;和List&lt;Integer&gt;类型的元素，后者则不行；因为后者可以接受任何类型的元素，即是Object类的子类，而List&lt;String&gt;只能接受String类型的元素，List&lt;Integer&gt;只能接受Integer类型的元素。因此，List类型丢了了安全性，而List&lt;Object&gt;保证了安全性&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;List和List&amp;lt;?&gt;区别&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;后者一般用于只读模式&lt;/li&gt;
&lt;li&gt;List&amp;lt;?&gt;因为不知道里面元素的类型，所以不能执行add方法，除非是null&lt;/li&gt;
&lt;li&gt;则明确告知编译器，它能够持有任意类型的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;img src=&quot;https://caoshuai.github.io/images/effectiveJava/theTerm.png&quot; alt=&quot;各种术语&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;24、消除非受检警告-SuppressWarnings(&quot;unchecked&quot;)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;许多编译器警告：非受检强制转化警告（unchecked cast warnings）、非受检方法调用警告、非受检普通数组创建警告，以及非受检转换警告（unchecked conversion warnings）。&lt;/li&gt;
&lt;li&gt;要尽可能地消除每一个非受检警告。&lt;/li&gt;
&lt;li&gt;如果无法消除警告，同时可以证明引起警告的代码是类型安全的，（只有这种情况下才）可以用一个@SuppressWarnings(&quot;unchecked&quot;)注释来禁止这条警告。&lt;/li&gt;
&lt;li&gt;应该始终在尽可能小的范围中使用SuppressWarnings注释。&lt;/li&gt;
&lt;li&gt;每当使用SuppressWarnings注释时，都要添加一条注释，说明为什么这么做是安全的。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;25、列表优先于数组&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数组是协变的（convariant）。相反泛型则是不可变的（invariant）。即如果Sub为Super的子类型，那么数组类型Sub[]就是Super[]的子类型；&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  //这是被允许的
  Object[] objectArray = new Long[1];
  objectArray[0] = &quot;hello world&quot;;//Throws java.lang.ArrayStoreException
  //Won&#39;t compile! 不被允许：Type mismatch: cannot convert from LinkedList&amp;lt;Long&amp;gt; to List&amp;lt;Object&amp;gt;
  List&amp;lt;Object&amp;gt; list = new LinkedList&amp;lt;Long&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数组是具体化的（reified）。因此数组会在运行时才知道并检查他们的元素类型约束。泛型是通过擦除来实现的。因此泛型只在编译时强化他们的类型信息，并在运行时丢弃（或者擦除）他们元素的类型信息。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建泛型数组是非法的：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  //Cannot create a generic array of List&amp;lt;String&amp;gt;
  List&amp;lt;String&amp;gt;[] stringLists = new List&amp;lt;String&amp;gt;[1];
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;26、优先考虑泛型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用泛型比使用需要在客户端代码中进行转换的类型来得更加安全，也更加容易。&lt;/li&gt;
&lt;li&gt;再设计新类型的时候，要确保他们不需要这种转换就可以使用。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;27、优先考虑泛型方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;静态工具方法尤其适合于泛型化。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://app.yinxiang.com/shard/s40/sh/1a6fd1f2-9a04-460f-bc3f-6ceb07b02ada/1d6bd992936bb1764e7a879b39b9fe8b&quot;&gt;第27条 优先考虑泛型方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;28、利用有限制通配符来提升API的灵活性&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://app.yinxiang.com/shard/s40/sh/fd601080-d86e-440d-bf36-556f7b8001d3/53e8c6025ae2eb3b1627e3e060ba0ba5&quot;&gt;第28条 利用有限制通配符来提升API的灵活性&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PECS 表示：producer-extends, consumer-super&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有的comparable和comparator都是消费者。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  public static &amp;lt;T extends Comparable&amp;lt;? super T&amp;gt;&amp;gt; T max(
      List&amp;lt;? extends T&amp;gt; list) {
      Iterator&amp;lt;? extends T&amp;gt; i = list.iterator();
      T result = i.next();
      while (i.hasNext()) {
          T t = i.next();
          if (t.compareTo(result) &amp;gt; 0)
              result = t;
      }
      return result;
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;生产者——产生泛型对象所以入栈时继承泛型E// Wildcard type for parameter that serves as an E producer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; public void pushAll(Iterable&amp;lt;? extends E&amp;gt; src) {
     for (E e : src)
         push(e);
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;消费者——使用泛型对象所以使用时为E的超类// Wildcard type for parameter that serves as an E consumer&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  public void popAll(Collection&amp;lt;? super E&amp;gt; dst) {
      while (!isEmpty())
          dst.add(pop());
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;29、优先考虑类型安全的异构容器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://app.yinxiang.com/shard/s40/sh/02bcfd55-c387-41aa-9427-142ff4b127d6/23ba79685b3d87f8ea62dd6e8c3eb635&quot;&gt;优先考虑类型安全的异构容器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;第六章、枚举和注解&lt;/h2&gt;

&lt;h3&gt;30、用enum代替int常量&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;枚举提供了编译时的类型安全。&lt;/li&gt;
&lt;li&gt;枚举中的switch语句适合于给外部的枚举类型增加特定于常量的行为&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://app.yinxiang.com/shard/s40/sh/50e739ac-2a5e-4331-8d23-92dc8f447280/ed39d618a864ace8d2bd12a70b6fe50e&quot;&gt;用enum代替int常量&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;31、用实例域代替序数&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用ordinal()方法能够获得实例在枚举的顺序，从0开始。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;放弃使用序数能够更灵活的使用指定的值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // Enum with integer data stored in an instance field
  public enum Ensemble {
      SOLO(1), DUET(2), TRIO(3), QUARTET(4), QUINTET(5),
      SEXTET(6), SEPTET(7), OCTET(8), DOUBLE_QUARTET(8),
      NONET(9), DECTET(10), TRIPLE_QUARTET(12);

      private final int numberOfMusicians;
      Ensemble(int size) { this.numberOfMusicians = size; }
      public int numberOfMusicians() { return numberOfMusicians; }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;32.用EnumSet代替位域&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;替代了原有的A|B 位运算&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; public class Text {
     public enum Style { BOLD, ITALIC, UNDERLINE, STRIKETHROUGH }

     // Any Set could be passed in, but EnumSet is clearly best
     public void applyStyles(Set&amp;lt;Style&amp;gt; styles) {
         // Body goes here
     }

     // Sample use
     public static void main(String[] args) {
         Text text = new Text();
         text.applyStyles(EnumSet.of(Style.BOLD, Style.ITALIC));
     }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;33、用EnumMap代替序数索引&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;尽量不要使用序数(ordinal)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  //使用Map(起始阶段,Map(目标阶段，阶段过渡))形式代替使用序数组成二维数组的形式，这样更加利于维护。
  public enum Phase {
     SOLID, LIQUID, GAS;

     public enum Transition {
        MELT(SOLID, LIQUID), FREEZE(LIQUID, SOLID),
        BOIL(LIQUID, GAS),   CONDENSE(GAS, LIQUID),
        SUBLIME(SOLID, GAS), DEPOSIT(GAS, SOLID);

        private final Phase src;
        private final Phase dst;
        //将转换所需要的值src为初始阶段，dst为目标阶段
        Transition(Phase src, Phase dst) {
           this.src = src;
           this.dst = dst;
        }
        // Initialize the phase transition map
        private static final Map&amp;lt;Phase, Map&amp;lt;Phase,Transition&amp;gt;&amp;gt; m =
          new EnumMap&amp;lt;Phase, Map&amp;lt;Phase,Transition&amp;gt;&amp;gt;(Phase.class);
        static {
           //放入初始阶段
           for (Phase p : Phase.values())
             m.put(p,new EnumMap&amp;lt;Phase,Transition&amp;gt;(Phase.class));
          //根据起始阶段的键放入目标阶段与状态的映射表
           for (Transition trans : Transition.values())
             m.get(trans.src).put(trans.dst, trans);
        }

        public static Transition from(Phase src, Phase dst) {
           //直接根据初始阶段获取映射在根据目标阶段获取过渡状态
           return m.get(src).get(dst);
        }
     }

     // Simple demo program - prints a sloppy table
     public static void main(String[] args) {
         for (Phase src : Phase.values())
             for (Phase dst : Phase.values())
                 if (src != dst)
                     System.out.printf(&quot;%s to %s : %s %n&quot;, src, dst,
                                       Transition.from(src, dst));
     }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;34、用接口模拟可伸缩的枚举&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;枚举可以实现接口&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;T extends Enum&lt;T&gt; &amp;amp; Operation&gt; 用&amp;amp;标识实现的接口&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虽然无法编写可扩展的枚举类型，却可以通过编写接口以及实现该接口的基础枚举类型，对他进行模拟。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;35、注解优先于命名模式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;命名模式的缺点

&lt;ul&gt;
&lt;li&gt;无法处理命名失误的情况。&lt;/li&gt;
&lt;li&gt;无法确保它们只用于响应的程序元素上&lt;/li&gt;
&lt;li&gt;他们没有提供将参数值与程序元素关联起来的好方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;36、坚持使用Override注解&lt;/h3&gt;

&lt;h3&gt;37、用标记接口定义类型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;标记接口定义的类型是由被标记类的实例实现的，标记注解则没有定义这样的类型。&lt;/li&gt;
&lt;li&gt;使用标记接口的方法能够更加精确的对实现它的类型进行锁定。&lt;/li&gt;
&lt;li&gt;标记注解胜过标记结构的最大优点在于，他可以通过默认的方式添加一个或多个注解类型元素，给已被使用的注解类型添加更多的信息。&lt;/li&gt;
&lt;li&gt;标记注解的另一个优点在于，它们是更大的注解机制的一部分。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;第七章 方法&lt;/h2&gt;

&lt;h3&gt;38、检查参数的有效性&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;私有的方法可以使用断言来作为参数的检查方法&lt;/li&gt;
&lt;li&gt;对参数的任何限制不见得是一件好事，有些计算和方法会隐式的执行必要的有效性检查。&lt;/li&gt;
&lt;li&gt;同样，我们也要注意参数的有效性检查会产生或多或少的系统开销。&lt;/li&gt;
&lt;li&gt;将参数的限制写进文档中，并至于方法的开头处，这样的习惯也是非常重要的。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;39、必要时进行保护性拷贝&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;我们要假设类的客户端会尽其所能来破坏这个类的约束条件，因此你必须保护性地设计程序。&lt;/li&gt;
&lt;li&gt;不管类是否为不可变的，在把一个指向内部可变组建的引用返回给客户端之前，也应该加倍认真地考虑。&lt;/li&gt;
&lt;li&gt;长度非零的数组总是可变的。在吧内部数组返回给客户端之前，应该总要进行保护性拷贝，或者给客户端返回该数组的不可变视图。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;40、谨慎设计方法签名&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;谨慎地选择方法的名称&lt;/li&gt;
&lt;li&gt;不要过于追求提供便利的方法&lt;/li&gt;
&lt;li&gt;避免过长的参数列表（同类型的长参数序列格外有害）

&lt;ul&gt;
&lt;li&gt;分解成多个方法&lt;/li&gt;
&lt;li&gt;创建辅助类&lt;/li&gt;
&lt;li&gt;对于参数类型，要优先使用接口而不是类&lt;/li&gt;
&lt;li&gt;对于boolean参数，要优先使用两个元素的枚举类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;41、慎用重载&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;覆盖机制是规范，而重载机制是例外，所以覆盖机制满足了人们对于方法调用行为的期望。&lt;/li&gt;
&lt;li&gt;永远不要导出两个具有相同参数数目的重载方法。&lt;/li&gt;
&lt;li&gt;必须要保证当传递同样当参数时，所有的重载方法的行为必须一致。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;42、慎用可变参数&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;不必改造具有final数组参数的每个方法；只当确实是在数量不定的值商之行调用时才使用可变参数。&lt;/li&gt;
&lt;li&gt;可变参数的类型检查是个不可控的问题，容易产生混乱的结果。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;43、返回零长度的数组或集合，而不是null&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;返回类型为数组或集合的方法没理由返回null，应当是放回一个令长度的数组或集合。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;44、为所有导出的API元素编写文档注释&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;为了正确地编写API文档，必须在每个被导出的类、接口、构造器、方法和域声明之前增加一个文档注释。&lt;/li&gt;
&lt;li&gt;方法的文档注释应该简洁地描述出它和客户端之间的约定。列出这个方法所有的前提条件和后置条件。&lt;/li&gt;
&lt;li&gt;注释也应该描述类或者方法的线程安全性。&lt;/li&gt;
&lt;li&gt;@code 标签可以防止代码中的’&amp;lt;‘和’&gt;&#39;被转义成html代码，并用代码字体渲染。&lt;/li&gt;
&lt;li&gt;@literal 标签可以防止’|’和’&amp;amp;&#39;符号被处理。&lt;/li&gt;
&lt;li&gt;同样，注释最好是在源码中和产生的文档中都应该是易于阅读的。&lt;/li&gt;
&lt;li&gt;需要注意的是

&lt;ul&gt;
&lt;li&gt;每个文档注释的第一句话，成了该注释所属元素的概要描述。&lt;/li&gt;
&lt;li&gt;同一个类或者接口中的两个成员或者构造器，不应该具有同样的概要描述。&lt;/li&gt;
&lt;li&gt;当为单行或者方法编写文档时，确保要在文档中说明所有的类型参数。&lt;/li&gt;
&lt;li&gt;但未枚举类型编写文档时，要确保在我能当中说明常量。&lt;/li&gt;
&lt;li&gt;为注解类型编写文档时，要确保在文档中说明所有成员，以及类型本身。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;第八章 通用程序设计&lt;/h2&gt;

&lt;h3&gt;45、将局部变量的作用域最小化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;要使局部变量的作用域最小化，最有力的方法就是在第一次使用它的地方声明。&lt;/li&gt;
&lt;li&gt;几乎每个局部变量的声明都应该包含一个初始化的表达式。&lt;/li&gt;
&lt;li&gt;for循环优于while循环是因为for循环的变量作用域在循环体中，所以不容易出现“剪切-粘贴”错误。&lt;/li&gt;
&lt;li&gt;另一个优势就是for循环更加简短可读。&lt;/li&gt;
&lt;li&gt;将局部变量的作用域最小化的方法是使方法小而集中。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;46、for-each循环优先于传统的for循环&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;for-each循环再间接性和预防BUG方面有着传统的佛如循环无发比拟的优势，并且没有性能损失。&lt;/li&gt;
&lt;li&gt;三种情况无法使用for-each循环

&lt;ul&gt;
&lt;li&gt;过滤——遍历集合并删除选定元素&lt;/li&gt;
&lt;li&gt;转换——遍历列表或数组，并取代它部分或者全部的元素值。&lt;/li&gt;
&lt;li&gt;平行迭代——如果需要并行的遍历多个集合，就需要显示的控制迭代器或者索引变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;47、了解和使用类库&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;通过使用标准类库，可以充分利用这些编写标准类库的专家的知识，以及在你之前的其他人的使用经验。&lt;/li&gt;
&lt;li&gt;在每个重要的发行版本中，都会有许多新的特性被加入到类库中，所以与这些新特性保持同步时值得的。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;48、如果需要精确地答案，请避免使用float和double&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;float和double类型尤其不适合用于货币计算。&lt;/li&gt;
&lt;li&gt;使用BigDecimal有两个缺点，与使用基本运算类型想必，这样做很不方便，而且很慢，但是数据精确。&lt;/li&gt;
&lt;li&gt;BigDecimal允许你从8种舍入模式中选择其一。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;49、基本类型优先于装箱基本类型&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;基本类型和装箱基本类型有三个主要区别

&lt;ul&gt;
&lt;li&gt;基本类型只有值，装箱基本类型则具有与它们的值不同的同一性。&lt;/li&gt;
&lt;li&gt;基本类型只有功能完备的值，而每个装箱基本类型除了它对应基本类型的所有功能值之外，还有个非功能值null&lt;/li&gt;
&lt;li&gt;基本类型通常比装箱基本类型更节省时间和空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对装箱基本类型运用==操作符几乎总是错误的。&lt;/li&gt;
&lt;li&gt;当在一项操作中，混合使用基本类型和装箱基本类型时，装箱基本类型就会自动拆箱，这种情况无一例外。&lt;/li&gt;
&lt;li&gt;什么时候使用装箱基本类型呢？

&lt;ul&gt;
&lt;li&gt;最为集合中的元素、键和值，你无法将基本类型放在集合中。&lt;/li&gt;
&lt;li&gt;在参数化类型中，必须使用装箱基本类型作为类型参数。&lt;/li&gt;
&lt;li&gt;在进行反射的方法调用时，必须使用装箱基本类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;自动装箱减少了使用装箱基本类型的繁琐性，但是并没有减少它的风险。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;50、如果其他类型更合适，则尽量避免使用字符串&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;字符串不适合代替其他的值类型。&lt;/li&gt;
&lt;li&gt;字符串不适合代替枚举类型。&lt;/li&gt;
&lt;li&gt;字符串不适合代替聚集类型。&lt;/li&gt;
&lt;li&gt;字符串不适合代替能力表（capabilities）&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;51、当心字符串连接的性能&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;为链接n个字符串而重复第使用字符串连接操作符，需要n的平方级的时间。&lt;/li&gt;
&lt;li&gt;为了获得和已接收的性能，请使用StringBuilder替代String&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;52、通过接口引用对象&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果有合适的接口类型存在，那么对于参数、返回值、变量和域来说，就都应该使用接口类型进行声明。&lt;/li&gt;
&lt;li&gt;它会使程序更加灵活。&lt;/li&gt;
&lt;li&gt;如果没有合适的接口存在，完全可以用类而不是接口来引用对象。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;53、接口优先于反射机制&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;反射机制能够获得Constructor、Method、Field实例，并通过调用实例上的方法狗仔地城类的实例、调用底层类的方法、并访问底层类中的域。当然这样也需要付出代价。

&lt;ul&gt;
&lt;li&gt;丧失了编译时类型检查的好处。包括异常检查。&lt;/li&gt;
&lt;li&gt;执行反射访问所需要的代码非常笨拙和冗长。&lt;/li&gt;
&lt;li&gt;性能损失。反射方法调用比普通方法慢了许多。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;通常，普通应用程序在运行时不应该以反射方式访问对象。&lt;/li&gt;
&lt;li&gt;如果只是以非常有限的形式使用反射机制，虽然也要付出少许代价，但是可以获得许多好处。&lt;/li&gt;
&lt;li&gt;如果你编写的程序必须要与编译时未知的类一起工作，如果有可能，就应该仅仅使用反射机制来实例化对象。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;54、谨慎地使用本地方法（Java Native Interface）允许Java应用程序可以调用本地方法，也就是调用本地程序设计语言，比如C或者C++来编写的特殊方法。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;本地方法的三种用途

&lt;ul&gt;
&lt;li&gt;它们提供了“访问特定于平台的机制”的能力&lt;/li&gt;
&lt;li&gt;提供了访问遗留代码库的能力，从而访问遗留数据。&lt;/li&gt;
&lt;li&gt;可以通过本地语言，编写应用程序中注重性能的部分，以提高系统的性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用本地方法来提高性能的做法方法不值得提倡。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;55、谨慎地进行优化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在优化方面，我们应该遵守两条规则：

&lt;ul&gt;
&lt;li&gt;不要进行优化&lt;/li&gt;
&lt;li&gt;（仅针对专家）还是不要进行优化——也就是说，在你还没有绝对清晰的未优化方案之前，请不要进行优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;要努力编写好的程序而不是快的程序。&lt;/li&gt;
&lt;li&gt;努力避免那些限制性能的设计决策。&lt;/li&gt;
&lt;li&gt;要考虑API设计决策的性能后果。&lt;/li&gt;
&lt;li&gt;为获得好的性能而对API进行包装，这是一种非常不好的想法。&lt;/li&gt;
&lt;li&gt;在每次试图做优化之前和之后，要对性能进行测量。&lt;/li&gt;
&lt;li&gt;再多的底层优化也无法弥补算法的选择不当。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;56、遵守普遍接受的命名惯例&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;驼峰试的命名规则。&lt;/li&gt;
&lt;li&gt;常量域一般会使用大写并使用下滑线连词。

&lt;ul&gt;
&lt;li&gt;类型参数名称通常由单个字母组成，通常是以下五种类型之一&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;T表示任意的类型&lt;/li&gt;
&lt;li&gt;E表示集合的元素类型&lt;/li&gt;
&lt;li&gt;K和V表示映射的键和值类型&lt;/li&gt;
&lt;li&gt;X表示异常。&lt;/li&gt;
&lt;li&gt;任何类型的序列可以是T、U、V或者T1、T2、T3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于返回boolean值的方法，齐明明往往以单词“is”开头。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;第九章 异常&lt;/h2&gt;

&lt;h3&gt;57、只针对异常的情况才使用异常&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;现代的JVM实现上，基于异常的模式比标准模式要慢得多。因为它不仅模糊了代码的意图，而且降低了它的性能。甚至不保证正常工作。&lt;/li&gt;
&lt;li&gt;异常应该只用于异常的情况下：他们永远不应该用于正常的控制流。&lt;/li&gt;
&lt;li&gt;设计良好的API不应该强迫它的客户端为了正常的控制流而使用异常。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;58、对可恢复的情况使用受检异常，对编程错误使用运行时异常&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果期望调用者能够适当地恢复，对于这种情况就是应该使用受检的异常。&lt;/li&gt;
&lt;li&gt;用运行时异常来表明编程错误。&lt;/li&gt;
&lt;li&gt;错误往往被JVM保留用于表示资源不足、约束失败，或者其他使程序无法执行的条件，由于这已经是个几乎被普遍接受的惯例，因此最好不要在实现任何新的Error子类。所以你事先的所有未受检的跑出结构都应该是RuntimeException的子类，不管是直接的还是间接的。&lt;/li&gt;
&lt;li&gt;受检异常往往指明了可恢复的条件，所以，对于这样的异常，提供一些辅助的方法尤其重要，通过这些方法，调用者可以获得一些有助于恢复的信息。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;59、避免不必要的使用受检的异常&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;由于Java程序设计的语言特性，她会强迫程序员处理异常的条件，大大增强了可靠性，但过分的使用受检的异常会使API使用起来非常不方便。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;60、优先使用标准的异常&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://caoshuai.github.io/images/effectiveJava/exception.png&quot; alt=&quot;常用异常&quot; /&gt;
- 上述经常被重用的异常所适用的情况并不是互相排斥的。&lt;/p&gt;

&lt;h3&gt;61、抛出与抽象相对应的异常&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;尽管异常转译与不加选择地从低层传递异常的做法相比有所改进，但是它也不能被滥用。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;62、每个方法抛出的异常都要有文档&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;始终要单独地生命受检的异常，并且利用Javadoc的@throws标记，准确地记录下抛出每个异常的条件。&lt;/li&gt;
&lt;li&gt;使用Javadoc的@throws标签记录下一个方法可能抛出的每个未受捡异常，但是不要使用throws关键字将未受检的异常包含在方法的声明中。&lt;/li&gt;
&lt;li&gt;如果一个类中的许多方法处于同样的原因而抛出同一个异常，在该类的文档注释中对这个异常建立文档，这是可以接受的，&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;63、在细节消息中包含能捕获失败的信息。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;异常的toString方法应该尽可能多地返回有关失败原因的信息。&lt;/li&gt;
&lt;li&gt;为了捕获失败，异常的细节信息应该包含所有“对该异常有贡献”的参数和域的值&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;64、努力使失败保持原子性。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;失败的方法调用应该使对象保持在被调用之前的状态。&lt;/li&gt;
&lt;li&gt;四种方式保持失败的原子性

&lt;ul&gt;
&lt;li&gt;设计一个不可变对象&lt;/li&gt;
&lt;li&gt;调整计算处理过程的顺序，是的任何可能会失败的计算部分都在对象状态被修改之前发生。&lt;/li&gt;
&lt;li&gt;第三种或的失败原子性的办法就是编写一段恢复代码（recovery code）&lt;/li&gt;
&lt;li&gt;最后一种在对象的一份临时拷贝上操作，当操作完成后再用临时拷贝中的结果代替对象的内容。&lt;/li&gt;
&lt;li&gt;一般而言，作为方法规范的一部分，产生的任何异常都应该让对象保持在该方法调用之前的状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;65、不要忽略异常&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;空的catch块会使异常达不到应有的目的，至少应当包含一条说明，解释为什么可以忽略这个异常。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;第十章 并发&lt;/h2&gt;

&lt;h3&gt;66、同步访问共享的可变数据&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;为了在线程之间进行可靠地通信，也为了互斥访问，同步是必要的。&lt;/li&gt;
&lt;li&gt;如果读和写操作没有都被同步，同步就不会起作用&lt;/li&gt;
&lt;li&gt;当多个线程共享可变数据的时候，每个读或者写数据的线程都必须执行同步。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;67、避免过度同步&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;为了避免活性失败和安全性失败，在一个被同步的方法或者代码块中，永远不要放弃对客户端的控制&lt;/li&gt;
&lt;li&gt;通常，你应该在同步区域内做尽可能少的工作，获得锁，检查共享数据，根据需要转换数据，然后放掉锁&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;68、executor和task优先于线程&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Executor Framework——ScheduledThreadPool-Executor&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;69、并发工具优先于wait和notify&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;既然正确地使用wait和notify比较困难，就应该用更高级的并发工具来代替&lt;/li&gt;
&lt;li&gt;java.util.concurrent中更高级的工具分成三类

&lt;ul&gt;
&lt;li&gt;Executor Framework&lt;/li&gt;
&lt;li&gt;并发集合（Concurrent Collection）

&lt;ul&gt;
&lt;li&gt;并发集合中不可能排除并发活动；将他锁定没有什么作用，只会是程序速度变慢。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同步器（Synchronizer）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于间歇式的定时，始终应该优先使用System.nanoTime而不是System.currentTimeMills，System.nanoTime更加准确也更加精确，他不收系统的实时时钟的调整所影响&lt;/li&gt;
&lt;li&gt;一般情况下，你应该有限使用notifyAll，而不是notify。如果使用notify，请一定小心，以确保程序的活性。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;70、线程安全性的文档化。&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;JavaDoc并没有在它的输出中包含synchronized修饰符，因为在一个方法声明中出现synchronized修饰符，这个事实现细节，并不是到处API的一部分。&lt;/li&gt;
&lt;li&gt;一个类为了可悲多个线程安全地使用，必须在文档中清楚地说明它所支持的线程安全性级别。

&lt;ul&gt;
&lt;li&gt;不可变（immutable）——类的实例是不变的。&lt;/li&gt;
&lt;li&gt;无条件的线程安全（unconditionally thread-safe）——类的实例是可变的，但是这个类有着足够的内部同步。Random和ConcurrentHashMap的实例可以并发使用，无需任何外部同步。&lt;/li&gt;
&lt;li&gt;有条件的线程安全（conditional thread-safe）——除了有些方法为进行安全的并发使用而需要外部同步之外，这种线程安全级别于无条件的线程安全相同。&lt;/li&gt;
&lt;li&gt;非线程安全（not thread-safe）——这个类的实例是可变的，为了并发地使用他们，客户必须利用自己选择的外部同步包围每个方法调用。包括通用的集合实现，例如ArrayList和HashMap。&lt;/li&gt;
&lt;li&gt;线程队里的（thread-hostile）——这个类不能安全地被多个线程并发使用，及时所有的方法调用都被外部同步包围，线程对立的根源通常在于，没有同步地修改静态数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;简而言之，每个类都应该利用字斟句酌的说明或者线程安全注解，清楚地在文档中说明他的线程安全属性。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;71、慎用延迟初始化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;对于延迟初始化，最好的建议“除非绝对必要，否则就不要这么做”，虽然降低了初始化类或者创建实例的开销，却增加了访问被延迟初始化的域的开销&lt;/li&gt;
&lt;li&gt;在大多数情况下，正常初始化要优先于延迟初始化。&lt;/li&gt;
&lt;li&gt;如果出于性能的考虑而需要对静态域使用延迟初始化，就使用lazy initialization holder class模式。&lt;/li&gt;
&lt;li&gt;如果出于性能的考虑而需要对实例域使用延迟初始化，就是用双重检查模式（double-check idiom）。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;72、不要依赖于线程调度器&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;任何依赖于线程调度器来达到正确性或者性能要求的程序，很有可能都是不可移植的。&lt;/li&gt;
&lt;li&gt;如果线程没有在做有意义的工作，就不应该运行，&lt;/li&gt;
&lt;li&gt;如果某一个程序不能工作，是因为某些线程无法像其他线程那样获得足够的CPU时间，那么，不要企图通过调用Thread.yield来“修正”该程序。这样的程序是不可移植的，因为不同的JVM对其实现不同。Thread.yield没有可测试的语义。&lt;/li&gt;
&lt;li&gt;线程优先级是Java平台上最不可移植的特性了。&lt;/li&gt;
&lt;li&gt;Thread.yield的唯一用途是在测试期间人为地增加程序的并发性。&lt;/li&gt;
&lt;li&gt;使用Thread.sleep(1)代替Thread.yield来进行并发测试。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;73、避免使用线程组&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;线程组已经过时了，没必要修正。&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;第十一章 序列化&lt;/h2&gt;

&lt;h3&gt;74、谨慎的实现Serializable接口&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;实现Serializable接口而付出的最大代价是，一旦一个类被发布，就大大降低了”改变这个类的实现“的灵活性。&lt;/li&gt;
&lt;li&gt;第二个代价是，他增加了出现Bug和安全漏洞的可能性。反序列化机制（deserialization）都是一个”隐藏的构造器“，具备与其他构造器相同的特点。&lt;/li&gt;
&lt;li&gt;第三个代价是，随着发行新的版本，相关的测试负担也增加了。&lt;/li&gt;
&lt;li&gt;实现Serializable接口并不是一个很轻松就可以做出的决定。&lt;/li&gt;
&lt;li&gt;为了继承而设计的类应该尽可能少地去实现Serializable接口，用户的接口也应该尽可能少地去继承Serializable接口。&lt;/li&gt;
&lt;li&gt;内部类不应该实现Serializable。因此，内部类的默认序列化形式是定义不清楚的。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;75、考虑使用自定义的序列化形式&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果没有先认真考虑默认的序列化形式是否合适，则不要贸然接受。&lt;/li&gt;
&lt;li&gt;如果一个对象的物理表示法等同于它的逻辑内容，可能就适合于使用默认的序列化形式。&lt;/li&gt;
&lt;li&gt;及时你确定了默认的序列化形式是合适的，通常还必须提供一个readObject方法以保证约束关系和安全性。&lt;/li&gt;
&lt;li&gt;当一个对象的物理表示法与他的逻辑数据内容有实质性地区别时，使用默认序列化形式会有以下4个缺点。（例如双向列表）

&lt;ul&gt;
&lt;li&gt;他使这个类的导出API永远地束缚在该类的内部表示法上。&lt;/li&gt;
&lt;li&gt;会消耗过多的空间&lt;/li&gt;
&lt;li&gt;消耗过多的时间&lt;/li&gt;
&lt;li&gt;特惠引起栈溢出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果所有的实例域都是瞬时的，从技术角度而言，不调用defaultWriteObject和defaultReadObject也是允许的，但是不推荐这么做。&lt;/li&gt;
&lt;li&gt;不管你选择了哪种序列化形式，都要为自己编写的每个可序列化的类声明一个显示的序列版本UID（serial version UID）

&lt;ul&gt;
&lt;li&gt;可以提升小小的性能好处，不然会在运行时通过一个高开销的计算过程，产生一个序列版本UID&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;76、保护性地编写readObject方法&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;当一个对象被反序列化的时候，对于客户端不应该拥有的对象引用，如果哪个域包含了这样的引用，就必须要做保护性拷贝&lt;/li&gt;
&lt;li&gt;不要使用writeUnshared和readUnshared方法，它们通常比保护性拷贝更快，但是他们不提供必要的安全性保护。&lt;/li&gt;
&lt;li&gt;当你编写readObject方法的时候，尽量尊崇以下指导方针：

&lt;ul&gt;
&lt;li&gt;对于对象引用域必须保持为私有的类，要保护性地拷贝这些域中的每个对象，不可变类的可变组建就属于这一类别。&lt;/li&gt;
&lt;li&gt;对于任何约束条件，如果检查失败则抛出一个InvalidObjectException异常。这些检查动作应该跟在所有的保护性拷贝之后。&lt;/li&gt;
&lt;li&gt;如果整个对象图在被反序列化之后必须进行验证，就应该使用ObjectInputValidation接口&lt;/li&gt;
&lt;li&gt;无论是直接方式还是间接方式，都不要调用类中任何可被覆盖的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;77、对于实例控制，枚举类型优先于readResolve&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果依赖readResolve进行实例控制，带有对象引用类型的所有实例域都必须声明为transient&lt;/li&gt;
&lt;li&gt;readResolve的可访问性（accessibility）很重要。&lt;/li&gt;
&lt;li&gt;总之，你应该及可能地使用枚举类型来实施实例控制的约束条件。如果做不到，同时又需要一个即可序列化又是实例受控（instance-controlled）的类，就必须提供一个readResolver方法，并确保该类的所有实例域都为基本类型，或者是transient的。&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;78、考虑用序列化代理代替序列化实例&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;序列化代理模式有两个局限性：

&lt;ul&gt;
&lt;li&gt;它不能与可以被客户端扩展的类兼容。&lt;/li&gt;
&lt;li&gt;也不能于对象图中包含循环的某些类兼容。&lt;/li&gt;
&lt;li&gt;序列化代理模式所增强的功能是有代价的。&lt;/li&gt;
&lt;li&gt;总之每当你发现自己必须在一个不能被客户端扩展的类上编写readObject或者writeObject方法的时候，就应该考虑使用序列化代理模式。要稳健地将带有重要约束条件的对象序列化时，这种模式可能是最容易的方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;服务提供者框架有三个重要的组件&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; 服务接口——提供者实现&lt;/li&gt;
&lt;li&gt; 提供者注册API——是系统用来注册实现，让客户端访问他们。&lt;/li&gt;
&lt;li&gt; 服务访问API——客户端用来获取服务的实例。&lt;/li&gt;
&lt;li&gt; 可选的第四个组件为服务提供者接口——负责创建其服务实现的实例。&lt;/li&gt;
&lt;/ol&gt;

</content>
 </entry>
 
 <entry>
   <title>新媒体营销哪家强？</title>
   <link href="http://caoshuai.github.com/BetterShower/"/>
   <updated>2014-11-08T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/BetterShower</id>
   <content type="html">&lt;p&gt;今天花了将近三个多小时看完了雕爷学徒的选拔视频，这期间我打扫了卫生，做了顿午饭然后洗了洗衣服，因为太感兴趣，没舍得一心两用的去听，而是老老实实地暂停，事情做完之后再接着看。如果要给一个客观的评价的话，那就是雕爷又换了一种花样为自己的品牌做深度宣传。这时天空飘来一行字。。。。。&lt;/p&gt;

&lt;!--more--&gt;


&lt;blockquote&gt;&lt;p&gt;任何组织和团体都在想方设法的影响你的判断。&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;这种玩法是相当颠覆的，效果同样也是最好的。我们可能都见过厂商独家冠名某某选秀节目，天价的冠名费换来的只是令观众耳朵起茧的开场词或者根本没人愿意听得结束语，再或者是在节目播出的过程中在显眼的位置放上品牌的logo，甚至简单粗暴地在节目高潮中插入广告，当人们意识到这些冷冰冰的东西都是起到催眠、暗示、洗脑的作用时，商家的小把戏就不灵了，况且现在的观众大都已经对植入的广告免疫了，大家都见过了太多的垃圾，所以你端上来一盆屎也不会让人太惊艳。&lt;/p&gt;

&lt;p&gt;而雕爷就是把角色翻转，商家自己办选秀节目，所有环节一手全包，虽然有点不够专业，但却赚足了眼球，最重要的是企业成了规则的制定者，所有的环节都是为达到照企业宣传的目的而量身订做，不光让旁观者过足了娱乐的瘾，也能让宣传更容易被人接受，六位学徒和雕爷旗下的六个品牌一一对应，加上雕爷现身说法，又完成一次成功的自我营销。可谓是一箭三雕。下面我斗胆总结一下雕爷这次活动的几个亮点：&lt;/p&gt;

&lt;h4&gt;精准的受众定位&lt;/h4&gt;

&lt;p&gt;直接面对罗辑思维社群二百六十万的小伙伴，首先他们都有可能成为企业的潜在客户，同样也能够快速的接受新的价值观和有趣的玩法；其次老罗曾不止一次的提到雕爷，曝光的程度也足够，小伙伴更容易产生代入感。再次，社群成员能够帮助信息快速传播，这也是通过微信散布消息的优势。最后就是低成本的前期宣传，老罗和雕爷的关系如何我并不太清楚，反正雕爷玩这么一出，老罗是肯定会拍手叫好的，而且肯定愿意帮忙吆喝，两天时间七千多分简历就是很好的说明。&lt;/p&gt;

&lt;h4&gt;深度的资源整合&lt;/h4&gt;

&lt;p&gt;让老罗帮忙宣传，雕爷自己写文案，然后是整个的宣传片拍摄，而且看那些录像的拍摄水准也绝非是普通剧组的制作水准，必然是一个专业的拍摄和编导团队，雕爷为了宣传做的大量投入由此可见一斑。这也符合了雕爷一贯大手笔的风格，要做就做到最好，和老罗的嫖娘娘理论异曲同工。&lt;/p&gt;

&lt;h4&gt;巧妙的环节设计&lt;/h4&gt;

&lt;p&gt;这也是最核心的亮点，从一开始的招学徒活动，整个宣传的计划就已经成型了，单单从选拔会的环节来看，从候选人的自我介绍，到短片的播放，然后是雕爷的点评与演讲，这些都经过了很精心的设计，让整个宣传的过程以一种让人感觉稍微舒服的方式一步一步的进行，六位候选人对应六个品牌，体验的报告其实也是企业宣传的主体，不光是雕爷的企业完整的做了品牌宣传，雕爷本身也做了一次完美的自我营销，这可比冠名娱乐活动的效果好的太多了。自己设计宣传方案的优势体现的淋漓尽致。而且这种热乎乎的宣传方式也不会让观众觉得很反感。&lt;/p&gt;

&lt;h4&gt;体验无处不在&lt;/h4&gt;

&lt;p&gt;其实我们也不难意识到，雕爷从一开始就在营造一种参与的氛围，罗辑思维社群的七千多封简历，和小伙伴们的转发都强化对活动的关注度，这就是体验的一部分，而且活动的周期相比较长，也就能在开始的时候给大家吊足胃口，一起持续的关注，不管是百度贴吧的互动也好还是视频直播也好，都是为了营造参与的感觉，让人们发自内心的去关注小伙伴们的近况，为之后的活动预热，从而能够更好地达到营销的目的。让你体验到陪着候选人一点点成长的感觉，从选拔活动的视频来看，前两个闯关的环节就是在烘托氛围，增加观众的认同感和代入感，喜欢上这些具有独立人格的候选人，之后他们做的什么，说的什么，我们都能照单全收了。这也是设计的精妙所在。&lt;/p&gt;

&lt;p&gt;总而言之，这次无疑又是一场经过精心策划的营销活动，水平有限，只能总结这么多，最后不得不给雕爷点个赞，被其精妙的构思和极具颠覆的创意深深的折服，那么问题来了，新媒体营销哪家强？&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>走捷径</title>
   <link href="http://caoshuai.github.com/takeTheShortcut/"/>
   <updated>2014-11-07T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/takeTheShortcut</id>
   <content type="html">&lt;p&gt;今天我的一位久未联系的大学同学突然给我发消息说要聊一聊，我知道他又遇到问题了，之前他就经常在聊天的时候谈论自己的烦恼，不管是在朋友聚会，还是私下里的交流，总能感受到他深深的焦虑，无时无刻不在抱怨着对工作的不满还有对自己的奇葩上司的愤恨，就好像再这么下去他必然会精神崩溃撒手人间。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;可经过多次的交流，我渐渐找到了他烦恼的原因，那就是能力不足以撑起他的欲望，之所以用「欲望」而不是「野心」来形容，是因为他现在毫无目标可言，唯一可以称作目标的就是想要逃离现在工作的欲望。而他觉得很痛苦的根本原因就是他无法胜任现在的工作，刚毕业时经亲戚介绍来到北京，叔叔就是一家大型IT公司的中层管理，很容易的就把他招进了公司，熟悉的领导，还有一大帮优秀的同事，他拥有者得天独厚的优势，努力踏实的工作一两年，肯定会比我们这些没有后台背景并在小公司挣扎的程序员发展的块，可两年过去了，除了对工作的抱怨，我并没有听到他谈论在大公司工作的收获，更多的却是在他的谈吐中流露出对公司那些高管富足奢侈生活的羡慕之情，虽然他经常说的一句话是太羡慕你了，但从客观的角度来看，他的条件确实比我好的太多，只是因为一提到写代码，他就会头疼，遗憾的是这个问题谁也解决不了，包括他自己。&lt;/p&gt;

&lt;p&gt;这就是典型的自我否定自我设限的想法，不愿意尝试不喜欢的东西，对自己的能力不够认可，在工作中成为了彻彻底底的酱油男，能力无法满足工作的要求，但因为有叔叔的照顾，暂时也没有丢掉饭碗的可能，于是事情就发展到了很尴尬的境地，越是呆在公司就越烦躁，工作任务没办法完成，而且也得不到正向的反馈，于是就更加厌烦当前的工作，自我否定，现在已经沦落到「只要不让我写代码，让我做什么都可以」的地步。&lt;/p&gt;

&lt;p&gt;当然我并没有觉得自己在这方面做的很好，更不觉得自己有资格教训别人，只是因为他今天跟我谈论的话题惊艳又一次惊艳到了我，大致内容就是他面试某大型的互联网公司被拒之后，提出了贿赂面试官的条件，好在面试官没有让他失望，开口要了一万元，并保证他顺利入职编辑岗工作而且待遇也不错，今天特意咨询下我这件事是否可行。听到这个消息我先是震惊，然后是深深的担忧，震惊的是这么一家知名上市公司居然会有如此不堪的情节发生，不过稍微想一下也就释然了，毕竟公司大了，就会出现各式各样的人，原来腐败问题不光存在于政府部门，这件事着实让我开了眼界。担忧的是我这个同学对走捷径的渴望是如此强烈，这种心态最终是会害了他，且不说他能不能胜任编辑这份工作，如果贿赂了面试官进入企业，就已经给了面试官落下了口实，今后的发展是否会受影响，而且以他现在的状态，是否还是会在面对困难和压力的时候自我否定，是否也会觉得一看到文字头就大呢，如果到了那个时候，可就没有慈祥的叔叔罩着他了，失去的机会成本也就不只是一万块钱了。&lt;/p&gt;

&lt;p&gt;当然，我并没有和他说这些，而是旁敲侧击的提醒他一定小心谨慎，因为我知道他平时喜欢去酒吧和夜店一类的娱乐场所消费，虽然工资不低，但这两年也没有积蓄，这一万块也许是他全部的存款，可也许他也就是想找人倾诉一下内心的烦恼吧，对我善意的提醒选择忽略，接着告诉我他觉得自己的文凭不够硬，想要买个假的撑一撑，这种想法又一次冲击了我的价值观，我又想说些什么，到最后还是知趣的沉默了，他说他们领导都买了文凭，花费不低，我查了查那个价钱差不多够一个真文凭的学费了，可假文凭太容易办了，如果不被发现，那简直就是捷径。是的，又一个捷径。话题既然都谈到这里，我心中只剩下「呵呵」两个字了，他的想法我不敢苟同，也不能改变，只有心中默默地祝福他，然后我告诉他我支持你，接着同学心满意足的结束了这段令我并不怎么舒服的谈话，希望他能够顺利进入高大上的互联网公司，离开那个让他备受煎熬的公司，走捷径成功。&lt;/p&gt;

&lt;p&gt;可我始终认为，世上没有任何捷径可走，投机倒把固然能够短期获利，最终还是会害了自己，也许我的思想太过于顽固和迂腐，不懂得灵活变通，可就算能够走捷径达满足你的欲望，那么这之后你还会踏踏实实的做事么，就像吸毒一样，如果你体验过毒品带来的高于平常几十倍的多巴胺分泌，享受过这种刺激的大脑还会因为看了一本好书而感到开心么？很抱歉，让你快乐的阀值已经不再是正常人的平均的水平了，欲望满足之后接着就是更难以忍受的痛苦，想要得到满足？你只能再次寻求另一个更大的刺激，于是就掉进了深不见底的深渊。&lt;/p&gt;

&lt;p&gt;我想问，人生哪有那么多捷径可以走？不去专注于提升自身的能力反而去追求那些浮于表面的事情，这种本末倒置的做法一定会摔得很惨很惨。可这个道理他怎么能明白呢？我怎么能让他明白呢？如果不狠狠的摔一次，他怎么能记得深切呢？&lt;/p&gt;

&lt;p&gt;希望我的同学能够如愿以偿，更希望他能早日穿帮，请允许我这么说，谢谢！&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>相信可能</title>
   <link href="http://caoshuai.github.com/believe/"/>
   <updated>2014-11-06T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/believe</id>
   <content type="html">&lt;p&gt;昨天看了一篇文章，引发了我的深思，文中的观点那就是相信可能才能把事情做好，其中还提到了目标倒推的方法去作为解决事情的依据，做一件事情之前要明确需要达成什么样的目标，为了达成目标我们要把注意力放在可能推动事情进步的关键点上，如果只聚焦困难的因素和悲观的预测，那么作为本该成为推动力的你，却成了第一个需要克服的障碍。&lt;/p&gt;

&lt;!--more--&gt;


&lt;blockquote&gt;&lt;p&gt;人之所以能，是因为相信可能&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;很简单的一句话，其实凝结了很多智慧和思考。包括清晰的目标定位，不轻言放弃的精神，乐观积极地态度，明确的执行计划，还需要有很强的预见能力、筹划能力。这些都是建立在灵活的头脑和思维的基础上，同样，灵活的头脑和思维也会因为相信可能并积极乐观才能真正的达到以上的状态，这是一个自我强化的过程，不断的开放思维促进心智，一件一件的达成预先规划的目标，得到正向的反馈，然后提高预见力，筹划力，促进下一个目标达成，最后形成良性的循环。&lt;/p&gt;

&lt;p&gt;这让我意识到了自己的心障碍所在，之前苦恼大多源于此，很庆幸能够读到这篇文章，思考了文中的观点，有些困惑已经解决了大半，相信可能也就代表着不轻易对困难屈服，也相信自己能够解决眼前的问题，对未来的生活充满信心。&lt;/p&gt;

&lt;p&gt;事实的确是这样，我自卑，胆怯，怀疑自己，思想封闭迂腐，这些都给我带来了很多烦恼。生活变得极其无趣，没有任何幸福感可言。我所缺乏的就是相信可能的心态，对困难和为知的事物本能的排斥和拒绝，只在乎存量而不去思考增量的典型穷困思维，能够隐约意识到这种想法是不好的，也曾思考如何去改变，始终跳不出禁锢思维的怪圈，在自我怀疑和自我否定的情绪中备受煎熬。大胆设想并相信可能，虽然与我的思维相悖，这句话点醒了我，我会试着克服原来的思维定势，不断的寻求变化和改进，尝试着培养出能够自我强化的思考方式。&lt;/p&gt;

&lt;p&gt;这也是心智成长的一部分，解放你的思维，相信人生有无限可能，这才是我真正向往的生活态度，也是我本该有的生活态度。想到什么就去做，不要担心会遇到困难，没有什么事情比死亡可怕，所以没什么好担心的，只要不会失去生命，一切都会有转机，此时我想起一位叫方励的老人，60岁的年纪，每天却活的比我们这些年轻人精彩和快乐许多，他说人的生命是极其渺小和短暂的，所以我们要惜命，但惜命不是叫大家去养生，而是不停的去折腾，人的生命都是有限的，区别就是看谁活的精彩，折腾的过程就是找寻自我并不断丰富体验的过程，活的精彩的人就是赚到了，这些都和世俗衡量成功的标准不同，快乐的生活是无法用金钱和物质去衡量的，真正找到生命真谛的人大多数都是重新定义了成功的概念，才活的成功的。想做什么就去做，不要畏首畏尾，也许这就是相信可能的另一种解读。年轻的身体衰老的心始终敌不过衰老的身体拥有一颗年轻的心。&lt;/p&gt;

&lt;p&gt;那么问题来了，你相信你未来的人生会有什么可能？&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>第一篇博客</title>
   <link href="http://caoshuai.github.com/theFirstArticle/"/>
   <updated>2014-05-11T00:00:00+08:00</updated>
   <id>http://caoshuai.github.com/theFirstArticle</id>
   <content type="html">&lt;h3&gt;关于github博客&lt;/h3&gt;

&lt;p&gt;一直有在github上搭建博客的想法，但由于种种原因没能实现，周末花了两天的时间研究，由于个人能力有限，并且对自己的前端技术水平十分没有信心，最终决定fork现成的代码略作修改，作为自己的github博客，也算是完成了一直以来的小心愿，过程虽然有些磕磕绊绊，但也是一件另人开心的事情，以后就有了一个属于自己的博客。&lt;/p&gt;

&lt;!--more--&gt;


&lt;p&gt;&lt;strong&gt;当然，在这里要感谢前辈&lt;a href=&quot;http://jolestar.com/&quot;&gt;@jolestar&lt;/a&gt;提供的博客源代码&lt;/strong&gt;&lt;br/&gt;
要想在github上写博客其实也不是很简单的事情，首先要学会使用git并了解github page的生成原理，其次选择一款适合自己的静态网页框架，之后使用markdown语法撰写文章，最后将文章推送到git库中。其实这些也是最基本的知识，要想搭建一个功能齐全，美观漂亮的网站是要倾注很多心血在里面的，就拿本博客作为例子，框架为jekyll，前端采用的是高大上的bootstrap技术，并且使用Google analysis和微博评论插件，并且样式支持文本高亮显示，等其他很强大的功能。&lt;/p&gt;

&lt;h3&gt;关于开源&lt;/h3&gt;

&lt;p&gt;做为一名软件工程师，之前对于“开源”这个词并没有切身的感受，也接触过一些大大小小的开源软件，由于太浮躁，都是浅尝辄止，没有深入的研究，更别说体会到开源精神的精髓，直到今天才意识到，我们每个人都是开源的受益者，我们使用的免费的软件都是由开发者花费了大量的时间和精力开发而成，我们免费的享用着他们劳动成果和智慧的结晶，这难道不是一件无比荣幸的事情么，试想如果没有这些开源软件，互联网会是什么样子？至少我会心生敬畏，在我渐渐明白之后。。。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总而言之 &lt;/strong&gt;&lt;br/&gt;
人总因无知而勇敢，也因无知而怯懦，所以不管前方的路是崎岖还是坦途，只要勇敢踏出第一步，心怀感激和敬畏，剩下的交给命运，自会有满意的结果。&lt;br/&gt;
Come on baby dont be shy，no zuo no life why not try?&lt;br/&gt;
Let it go!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;关于打脸（2014-11-04更新）&lt;/h3&gt;

&lt;p&gt;好吧，我承认自己zuo的有些过分了，原本可以不写这些东西，好让大家都认为博主已经为自己五个月之前的打脸行为自惭形秽，从此再也不敢在来Github上造次，但出于对自身劳动成果的尊重和对自身懒癌症状的无比厌恶，我决定还是回来承认一下错误（虽然也没人在意），最起码让我这张不知廉耻的老脸微微发热，没事打打也是有利于健康的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;回归正题&lt;/em&gt;&lt;/strong&gt;
不出自己所料，之前制定的计划仍然没有执行，其实在之后写过一些文章，但都是不痛不痒的自我呻吟，发布了一些，可总觉得和自己当初搭建博客的初衷相悖，考虑再三最终还是删掉了，之后也在业余时间写一些毫无营养的文字，始终也拿不出手放到网上。直到现在我才逐渐明白建立博客的意义，其实很简单，记录和分享。
这也是我直接在第一篇博文中写下这段话的原因，这一切都是为了让自己走了一段之后回望过去的自己，不管那段光阴是否虚度，都会让我认真的反思自己，调整方向。同样，分享也是我乐于去做的一件事，不过目前最大的问题就是我掌握的知识没有成为一套体系，并不能很好的给大家提供价值，其实也是由于我个人能力不足，学习深度不够同时缺乏积累，书写能力不强，缺乏文章构思的技巧，这也是我迟迟不更新文章的原因之一，说白了也就是不好意思给别人看自己都觉得垃圾的东西，不过这种想法现在已经不存在了，因为我只在乎自己写不写，至于看不看那是别人的事情。时不时的分享一些技术相关的文章和自己生活的思考，作好记录的工作，丢掉这个思想包袱也许我能够变得高产一些，可谁又能保证我还会不会再做一次大脸的事情呢，我自己都不确定。&lt;/p&gt;
</content>
 </entry>
 
 
</feed>